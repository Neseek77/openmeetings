<?xml version="1.0" encoding="UTF-8" ?>
<library>
    
<class name="swfResourceView" extends="view" 
    clip="true" width="${ parent.width }" height="${ parent.height }">
    
    <attribute name="refObj" value="null" />
	<attribute name="alterModus" value="true" type="boolean" />
    
    <attribute name="standardFileName" value="" type="string"/>
	
	<attribute name="recorderModus" value="false" type="boolean" />
    
    <attribute name="fullFit" value="true" type="boolean" />
	
	<attribute name="baseurl" value="" type="string" />
	<attribute name="fileName" value="" type="string" />
	<attribute name="moduleName" value="" type="string" />
	<attribute name="parentPath" value="" type="string" />
	<attribute name="room" value="" type="string" />
	<attribute name="domain" value="" type="string" />    
    <attribute name="slideNumber" value="1" type="number" /> 
    
    <attribute name="currentzoomFactor" value="100" type="number" />
    <attribute name="zoomlevel" value="20" type="number" />
    <attribute name="initwidth" value="0" type="number" />
    <attribute name="initheight" value="0" type="number" />
    
    <!-- for wml-loaded SWF's
        attribute only set on init
     -->
    <attribute name="innerwidth" value="0" type="number" />
    <attribute name="innerheight" value="0" type="number" />
    <attribute name="innerx" value="0" type="number" />
    <attribute name="innery" value="0" type="number" />
    <attribute name="currentzoom" value="0" type="number" />
    
    <attribute name="typeOfObject" value="swf" type="string" />
    
	<!-- holds the reference_id to the SyncProcess -->
	<attribute name="uniqueObjectSyncName" value="" type="string" />    
    
    <view name="_swfView" play="false" stretches="both">
    	
    	<attribute name="timeisInited" value="false" type="boolean" />
        <attribute name="sendObjectDel" value="null" />
        
        <!-- Do not send update events in case 
            this is sync event broadcasted by another user -->
        <attribute name="doSendChangeValue" value="false" type="boolean" />
        
        <handler name="onframe" args="i">
            ////Debug.write("onframe",i);
        </handler>
        
        <handler name="onplay" args="i">
            ////Debug.write("onplay",i);
        </handler>
        
        <handler name="onstop" args="i">
            ////Debug.write("onstop",i);
        </handler>
        
        <handler name="oninit">
            this.sendObjectDel = new LzDelegate( this, "sendObject" );
        </handler>
        
        <handler name="onx" args="x">
        	if (!this.doSendChangeValue) {
        		return;
        	}
        	
            if (!this.timeisInited){
                this.timeisInited=true;
                lz.Timer.addTimer( this.sendObjectDel, 250 );
            } else {
                lz.Timer.resetTimer( this.sendObjectDel, 250 );
            }
        </handler>
        <handler name="ony" args="y">
        	if (!this.doSendChangeValue) {
                return;
            }
            
            if (!this.timeisInited){
                this.timeisInited=true;
                lz.Timer.addTimer( this.sendObjectDel, 250 );
            } else {
                lz.Timer.resetTimer( this.sendObjectDel, 250 );
            }
        </handler>        
        
        <method name="sendObject" args="itemRef">
            if ($debug) Debug.info("sendObject :: sendCurrentSWFObject");
            this.parent.parent.sendCurrentSWFObject(this.parent);
            this.timeisInited=false;
        </method>
        
        <method name="initialLoadFullFit">
            <![CDATA[
            
                if (parent.fullFit) {
                    
                    if ($debug) Debug.write(" -- fullFit -- ");
                    
                    var newwidth = (parent.initwidth/100)*80;
                    var newheight = (parent.initheight/100)*80;
                    
                    if (this.width > parent.width || this.height > parent.height) {
                        
                        if (parent.width - newwidth > 0 && parent.height - newheight > 0) {
                            
                            parent.currentzoomFactor = 80;
                            parent.currentzoom = 80;
                            
                        } else {
                        
                            newwidth = (parent.initwidth/100)*60;
                            newheight = (parent.initheight/100)*60;
                    
                            if (parent.width - newwidth > 0 && parent.height - newheight > 0) {
                                
                                parent.currentzoomFactor = 80;
                                parent.currentzoom = 80;
                           
                            } else {
                            
	                            newwidth = (parent.initwidth/100)*40;
	                            newheight = (parent.initheight/100)*40;
	                    
	                            if (parent.width - newwidth > 0 && parent.height - newheight > 0) {
	                                
                                    parent.currentzoomFactor = 40;
                                    parent.currentzoom = 40;
                                    
	                            } else {
	                            
		                            newwidth = (parent.initwidth/100)*20;
		                            newheight = (parent.initheight/100)*20;
		                    
		                            if (parent.width - newwidth > 0 && parent.height - newheight > 0) {
		                                
                                        parent.currentzoomFactor = 20;
                                        parent.currentzoom = 20;
                                        
		                            } else {
                                        
                                        if ($debug) Debug.write(" COULD NOT SHRINK smaller then 20");
                                        
                                    }
                                
                                }
                            
                            }
                        
                        }
                        
                    }
                    
                    if ($debug) Debug.write("initialLoadFullFit",parent.currentzoomFactor);
                        
                    this.setAttribute('width',newwidth);
                    this.setAttribute('height',newheight);
                }
            
            ]]>
        </method>
        
        <handler name="onload">
            <![CDATA[
                if ($debug) Debug.info("onload: ",this.width,this,height);
                
                ////Debug.write("onload: ",this.stop);
                this.stop();
                this.setAttribute('play',false);             
                
                this.parent.initwidth = this.width;
                this.parent.initheight = this.height;
                
                this.setAttribute('frame',parent.slideNumber);
                
                //only send syncCommand if alterModus is true (meaning that this is the Moderator)
                //otherwise just send a notification to moderator that this iamge has been loaded
                if (this.parent.recorderModus) {
					this.parent.refObj.storeTempValsAndLoadSyncListSWFRecording(this.parent);
				} else if (this.parent.alterModus){
                    
                    //this code is invoked when the Moderator loads the Document
                    
                    this.parent.refObj.storeTempValsAndLoadSyncListSWF(this.parent);
                    if ($debug) Debug.write("==> doShowObjectBounds MOD ");
                    
                    this.initialLoadFullFit();
                    
                    this.parent.refObj.doShowObjectBounds(this.parent.name);
                    this.parent.refObj.doUpdateDocumentToolBar();
                } else {
                    
                    //this code is invoked when any participants syncronizes and loads the document
                    //because a Moderator has loaded it
                    
                    if ($debug) Debug.write("==> doShowObjectBounds Participant ");
                    
                    this.initialLoadFullFit();
                    
                    this.parent.refObj.sendLoadNotificationSWF(this.parent);
                    
                    this.parent.refObj.doUpdateDocumentToolBarByParticipant(this.parent.name);
                    
                }
                
                if ($debug) Debug.write("swf loaded -2- ",this.parent.refObj.isWmlLoaderImage);
                if (this.parent.refObj.isWmlLoaderImage){
                    if ($debug) Debug.write("swf loaded ",this.parent.innerwidth,this.parent.innerheight);
                	if (this.parent.innerwidth != 0 && this.parent.innerheight != 0) {
	                    this.setAttribute('width',this.parent.innerwidth);
	                    this.setAttribute('height',this.parent.innerheight);
	                    this.setAttribute('x',this.parent.innerx);
	                    this.setAttribute('y',this.parent.innery);
                	}
                    this.parent.currentzoomFactor = this.parent.currentzoom;
                }

                this.parent.refObj.layers.push(this.parent);			
                
                this.doSendChangeValue = true;
                
                this.oninit.sendEvent();
                //this.parent.refObj.parent.parent.isloadedImage.sendEvent(this);
                
                //send notification to wml-loader
                //this is send later then in normal objects cause it needs to be send after the image
                //has been loaded completely
                //if (this.parent.refObj.isWmlLoaderImage){
                //    this.parent.refObj.isWmlLoaderImage=false;
                //    if (this.parent.refObj.onwmlLoaderSend) this.parent.refObj.onwmlLoaderSend.sendEvent('swf');
                //}
            ]]>
        </handler>
        <handler name="onerror" args="error">
            <![CDATA[
            ////Debug.write("onerror "+error);
            
            
                new lz.errorPopup(canvas,{error:"onerror SWF!! "+error});
                
                this.parent.initwidth = this.width;
                this.parent.initheight = this.height;
                                
                //only send syncCommand if alterModus is true (meaning that this is the Moderator)
                //otherwise just send a notification to moderator that this iamge has been loaded
                if (this.parent.recorderModus) {
					this.parent.refObj.storeTempValsAndLoadSyncListSWFRecording(this.parent);
				} else if (this.parent.alterModus){
                    this.parent.refObj.storeTempValsAndLoadSyncListSWF(this.parent);
                } else {
                    this.parent.refObj.sendLoadNotificationSWF(this.parent);
                }
                this.parent.refObj.layers.push(this.parent);			
                
                this.oninit.sendEvent();
                //this.parent.refObj.parent.parent.isloadedImage.sendEvent(this.parent);
                
                //send notification to wml-loader
                //this is send later then in normal objects cause it needs to be send after the image
                //has been loaded completely
                //if (this.parent.refObj.isWmlLoaderImage){
                //    this.parent.refObj.isWmlLoaderImage=false;
                //    if (this.parent.refObj.onwmlLoaderSend) this.parent.refObj.onwmlLoaderSend.sendEvent('swf');
                //}
            ]]>
        </handler>
        <handler name="ontimeout" args="error">
            <![CDATA[
            ////Debug.write("ontimeout "+error);
            
                new lz.errorPopup(canvas,{error:"ontimeout SWF!! "+error});
                
                this.parent.initwidth = this.width;
                this.parent.initheight = this.height;
                                
                //only send syncCommand if alterModus is true (meaning that this is the Moderator)
                //otherwise just send a notification to moderator that this iamge has been loaded
                if (this.parent.recorderModus) {
					this.parent.refObj.storeTempValsAndLoadSyncListSWFRecording(this.parent);
				} else if (this.parent.alterModus){
                    this.parent.refObj.storeTempValsAndLoadSyncListSWF(this.parent);
                } else {
                    this.parent.refObj.sendLoadNotificationSWF(this.parent);
                }
                this.parent.refObj.layers.push(this.parent);			
                
                this.oninit.sendEvent();
                //this.parent.refObj.parent.parent.isloadedImage.sendEvent(this.parent);
                
                //send notification to wml-loader
                //this is send later then in normal objects cause it needs to be send after the image
                //has been loaded completely
                //if (this.parent.refObj.isWmlLoaderImage){
                //    this.parent.refObj.isWmlLoaderImage=false;
                //    if (this.parent.refObj.onwmlLoaderSend) this.parent.refObj.onwmlLoaderSend.sendEvent('swf');
                //}
            ]]>
        </handler> 
        
        <handler name="onwidth" args="w">
            if ($debug) Debug.write("onwidth ",w);
        </handler>
        
        <handler name="onheight" args="h">
            if ($debug) Debug.write("onheight ",h);
        </handler>
        
    </view>    
    
    <vscrollbar name="_scrollstv"
                visible="${ ((canvas.ismoderator) ? true : ((canvas.isAllowedToDraw) ? true : false )) }" /> 
    <hscrollbar name="_scrollsth"
                visible="${ ((canvas.ismoderator) ? true : ((canvas.isAllowedToDraw) ? true : false )) }" />
        
</class>

</library>
