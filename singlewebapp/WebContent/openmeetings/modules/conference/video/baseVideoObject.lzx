<?xml version="1.0" encoding="UTF-8" ?>
<library>


<!---
	Base container for a client, can be either:
	a remote-video (subscribing/playing a video)
	or a self-video (broadcasting a cam/mic)
 -->
    
<class name="baseVideoObject" extends="view" bgcolor="0x000000" width="132" height="120">
	 
	<!--- @keywords private -->
	<attribute name="chatpartnername" value="" type="string" />
	<!--- @keywords private -->
	<attribute name="showUserProfilePic" type="boolean" value="false" />
	
	<!--- color of this user, this is the color the user will also use for his chat-color -->
	<attribute name="usercolor" value="0" type="number" />
		
	<!--- publicSID is a hash-value to identify a user -->
	<attribute name="publicSID" value="" type="string" />
	
	<!--- @keywords private -->
	<attribute name="isremote" value="true" type="boolean" />
	
	<!--- @keywords private -->
	<attribute name="clientVars" value="null" />
    
    <!--- @keywords private -->
    <attribute name="isResizing" value="false" type="boolean" />
    
    <!--- @keywords private -->
    <attribute name="isInterview" value="false" type="boolean" />
    
    <attribute name="respectRatio" value="true" type="boolean" />
    
    <attribute name="minimized" value="false" type="boolean" />
    
    <attribute name="hidebyAudioOnly" value="false" type="boolean" />
    
    <attribute name="custom" value="false" type="boolean" />
    
    <attribute name="initH" value="40" type="number" />
    <attribute name="initW" value="40" type="number" />

    <attribute name="isShowMicMute" value="false" type="boolean"/>
	
	<handler name="onisremote" args="r">
		this.isremote = r;
                //the mute attribute may not exist
		if (r) {
			//this.message.setAttribute('visibility','hidden');
			this._toolbar.showuser.setAttribute('visibility','visible');
			this._toolbar._mute.setAttribute('visibility','visible')
		} else {
			//this.message.setAttribute('visibility','visible');
			this._toolbar.showuser.setAttribute('visibility','hidden');
			this._toolbar._mute.setAttribute('visibility','hidden')
		}
	</handler>
    
    <handler name="oninit">
        <![CDATA[
            this.clientVars = new Array();
            this.clientVars['User']='No User Connected';
            
            if (this.isInterview) {
            	this._toolbar._showusercontext.setAttribute("visibility","hidden");
            	this._toolbar._minimize.setAttribute("visibility","hidden");
            	this._resizeview.setAttribute("visibility","hidden");
            	return;
            }
            
            if (this.custom) {
                this._toolbar._showusercontext.setAttribute("visibility","hidden");
                this._toolbar._minimize.setAttribute("visibility","hidden");
                this._resizeview.setAttribute("visibility","hidden");
                this._toolbar.setAttribute("visibility","hidden");
                this._resizeview.setAttribute("visibility","hidden");
                this._loudness.setAttribute("visibility","hidden");
                this._innertop.setAttribute("visibility","hidden");
                
                //return;
            }
            
            var prop1 = [this, "width"];
            var prop2 = [this, "height"];
            this.applyConstraintMethod("setItemContraints", prop1);
            this.applyConstraintMethod("setItemContraints", prop2);
            this.setShadow();   
            
            if (this.publicSID == canvas.publicSID) {
            	this._toolbar._resync._tip.setAttribute("labelid",610);
            }
            this._micView.bringToFront();
            if (this.isInterview) {
                this.isShowMicMute = false;
            } else if (canvas.ismoderator) {
                this.isShowMicMute = true;
            } else if (canvas.publicSID == this.publicSID) {
                this.isShowMicMute = true;
            } else {
                this.isShowMicMute = false;
            }
            if (this.isShowMicMute) {
                this._micView.setAttribute("visibility", "visible");
            } else {
                this._micView.setAttribute("visibility", "hidden");
            }
            this.getHasAudioByPublicSID.doCall();
        ]]>
    
    </handler>

    <netRemoteCallHib name="getMicMutedByPublicSID" funcname="getMicMutedByPublicSID" remotecontext="${ canvas.thishib }">
        <netparam><method name="getValue">return parent.parent.publicSID;</method></netparam>
        <handler name="ondata" args="value">
            <![CDATA[
            //The onResult-Handler will be called be the rtmpconnection
            parent.setMicMuted(value);
            ]]>
        </handler>
    </netRemoteCallHib>
	
	<handler name="ony">
		<![CDATA[
		
		    if (this.isInterview) {
                return;
            }
            
            if (this.custom) {
                return;
            }
            
			var bounds = this.getBounds();
			var parentBounds = canvas.getBounds();
			if ( bounds.y < 0 )
			{
				this.setAttribute('y',0);
			}
			
			if ( bounds.y > ( parentBounds.height - bounds.height ) )
			{			
				this.setAttribute('y', parentBounds.height - bounds.height );
			}
		]]>
	</handler>

	<handler name="onx">
		<![CDATA[
		
            if (this.isInterview) {
                return;
            }	
            
            if (this.custom) {
                return;
            }
		
			var bounds = this.getBounds();
			var parentBounds = canvas.getBounds();
			if ( bounds.x < 0 )
			{
				this.setAttribute('x',0);
			}
			
			if ( bounds.x > ( parentBounds.width - bounds.width ) )
			{
				this.setAttribute('x', parentBounds.width - bounds.width );
			}
		]]>
	</handler>
	
    <method name="setShadow" args="bool">
        <![CDATA[
        if (this.isinited){
            this.normalMC = this.getDisplayObject();
            //Debug.write(this.normalMC);
            ////Debug.write("this.normalMC: ",this.normalMC);
            ////Debug.write("this: ",this);
            this.displacementMap = new flash.filters.DropShadowFilter();
            this.normalMC.filters = [this.displacementMap];
        }
        ]]>              
    </method>   
        
    <!-- respect ratio and keep minimum width / height -->
    <method name="setItemContraints" args="w">
        <![CDATA[
            if (!this.respectRatio) {
                return;
            }
        
            //if ($debug) Debug.write("setItemContraints ",w);
            
            //if ($debug) Debug.write("setItemContraints",w)
            var w=this.height * this.initW/this.initH;
            w=((w < this.initW ) ? initW : w);
            var h=this.width * this.initH/this.initW;
            h=((h < this.initH ) ? initH : h);
    
            this.setAttribute("width",w);
            this.setAttribute("height",h);
        ]]>
    </method>
        
	
	<method name="updateAVSettingsSymbol" args="rcl">
		//FIXME: Set a Symbol wether this Client is Audio(only)/Video(only), both or Profile Picture 
		if ($debug) Debug.warn("updateAVSettingsSymbol TODO ",rcl);
	</method>
    
    <method name="doResize" args="bool">
    	
        if (this.isInterview) {
            return;
        }   
        
        if (this.custom) {
                return;
        }
        
        if (bool) {
            this.isResizing = true;
            this.rs.apply();
        } else {
            this.isResizing = false;
            this.rs.remove();
        }
    </method>
    
    <!--- resets all values and stops the streaming -->
    <method name="resetValues">
      <![CDATA[
    	this.clientVars=null;
    	if (this.showUserProfilePic && !this.isremote){
    		this._chatvideoinner.userProfilePic.destroy();
    		this.showUserProfilePic = false;
    	}
    	if ($debug) Debug.write("resetValues: ",this.isremote);
    	if (this.isremote){
    		this._chatvideoinner._videostream.restart();
    	} else {
    		this._chatvideoinner._videostream.stop();
    	}
     ]]>
    </method>
    <method name="setVideouserProfilePic" args="value">
    	if ($debug) Debug.write("### setVideouserProfilePic ",value);
    	this.deleteVideoConfProfilePic(value);
    	new lz.videoUserProfilePic(this._chatvideoinner,{name:'userProfilePic',value:value});
    	this.showUserProfilePic = true;
    </method>    
    <method name="deleteVideoConfProfilePic" args="value">
    	if ($debug) Debug.write("### deleteVideoConfProfilePic ",value);
        if ($debug) Debug.write("delete ",this.showUserProfilePic);
    	if (this.showUserProfilePic){
    		this._chatvideoinner.userProfilePic.destroy();
    		this.showUserProfilePic = false;
    	}
    </method>    
    
        <!--- @keywords private  -->
    <method name="_startDragState" args="obj">
    	
        if (this.isInterview) {
            return;
        }    	
        
        if (this.custom) {
            return;
        }
    	
        this.bringToFront();
        parent.bringToFront();
        this.dragger.apply();
    </method> 
    
        <!--- @keywords private  -->
    <method name="_removeDragState" args="obj">
    	<![CDATA[
	        lz.Cursor.unlock();
	        
	        if (this.x < 0) {
	        	this.setAttribute("x",20);
	        }
	        
	        if (this.y < 0) {
	        	this.setAttribute("y",20);
	        }
	        
	        if (this.x+this.width > parent.width) {
	        	this.setAttribute("x",parent.width - this.width - 20);
	        }
	        
	        if (this.y+this.height > parent.height) {
	        	this.setAttribute("y",parent.height - this.height - 20);
	        }
	        
	        this.dragger.remove();
        
        ]]>
    </method>
    
    <method name="minimize">
        <![CDATA[
        
            this.respectRatio = false;
        
            this.setAttribute("minimized",true);
            
            this._toolbar._minimize.setAttribute("visibility","hidden");
            this._toolbar._maximize2.setAttribute("visibility","visible");
            
            for (var eg in this.subviews) {
                if (this.subviews[eg].name != "_toolbar" 
                        && this.subviews[eg].name != "_innertop"
                        && this.subviews[eg].name != "_loudness"
                        && this.subviews[eg].name != "_micView") {
                     this.subviews[eg].setAttribute("visibility","hidden");   
                }
            }
            
            this._loudness.setAttribute("x",this.width - 84 - (this.isShowMicMute ? 20 : 0));
            this._micView.setAttribute("x",this.width - 84);
            this._loudness.bringToFront();
            this._micView.bringToFront();
            
            this.initialHeight = this.height;
            //this.setAttribute("height",20);
            this._minimizeZoom.setAttribute("to",20);
            this._minimizeZoom.doStart();
        ]]>
    </method>
    
    <method name="reminimize">
        <![CDATA[
            this.setAttribute("minimized",false);
            
            this._toolbar._minimize.setAttribute("visibility","visible");
            this._toolbar._maximize2.setAttribute("visibility","hidden");
            
            this._loudness.setAttribute("x",1);
            this._micView.setAttribute("x",21);
            
            //this.setAttribute("height",this.initialHeight); 
            this._minimizeZoom.setAttribute("to",this.initialHeight);
            this._minimizeZoom.doStart();
        ]]>
    </method>    
    
    <method name="reminimizeComplete">
        <![CDATA[
            if (!this.minimized) {
                
                for (var eg in this.subviews) {
                    if (this.subviews[eg].name != "_toolbar" 
                            && this.subviews[eg].name != "_innertop"
                            && this.subviews[eg].name != "_loudness"
                            && this.subviews[eg].name != "_micView") {
                         this.subviews[eg].setAttribute("visibility","visible");   
                    }
                }
                
                
            
                this.respectRatio = true;
            }
            
        ]]>
    </method>    

	<view name="_innertop" width="${parent.width-2 }" 
		  height="18" x="1" y="1" bgcolor="$once{ canvas.basebgcolorizer }">
  		<text text="${ parent.parent.chatpartnername }" 
              onmousedown="parent.parent._startDragState(this)" 
              onmouseup="parent.parent._removeDragState(this)"
              width="${ parent.width-2 }" fgcolor="white"
  			fontsize="9">
            <handler name="onmouseover">
		        //cursor="arrow_draw_panel_cursor" 
		        lz.Cursor.setCursorGlobal("arrow_draw_panel_cursor");
		    </handler>
		    
		    <handler name="onmouseout">
		        lz.Cursor.unlock();
		    </handler>
        </text>
	</view>	
    
	<view name="_loudness" x="1" y="${parent.height - 20}">
		<view x="2" y="2" name="loudness" resource="speaking" opacity="0.2"
			  onmouseover="" onmouseout="" >		
			<labelTooltip inittwice="true" labelid="372" />
		</view>
	</view>

    <view name="_micView" x="21" y="${parent.height - 20}">
        <miniIcons name="_micButton" width="14" height="14" resource="mute_micro_btn_rsc">
            <handler name="onclick">
                <![CDATA[
                canvas.thishib.switchMicMuted.publicSID = parent.parent.publicSID;
                canvas.thishib.switchMicMuted.doCall();
                ]]>
            </handler>
            <labelTooltip name="_tip" labelid="1384" />
        </miniIcons>
    </view>

    <!--
	<view name="showuser" x="${ parent.width-20 }" y="2" width="20"
		onmouseover="" onmouseup="" resource="showusercontext">
		<handler name="onclick">
			new lz.remoteUserDetails(parent);
		</handler>
		<labelTooltip inittwice="true" labelid="68" />
	</view>
     -->

    <view name="_resizeview" x="${ this.parent.width - 17 }" 
          y="${ this.parent.height - 17 }" 
        resource="explorer_resize_rsc" cursor="explorer_resizemouse_rsc" 
        onmousedown="this.parent.doResize(true)"
        onmouseup="this.parent.doResize(false)" >
        <handler name="oninit">
            //if ($debug) Debug.write("setTint");
            //TODO: Fix this, does not work at the moment
            //http://code.google.com/p/openmeetings/issues/detail?id=470
            this.setColor(canvas.baseMousecolorizer);
        </handler>      
    </view>
    
    <view name="_toolbar" x="${ parent.width-this.width-2 }" layout="axis:x;spacing:0" y="2">     
        
        <attribute name="isload" value="true" type="boolean"/>        
        
        <miniIconsPresenter name="_minimize"
            iconRessourceName="btn_presenter_minimize">
            <handler name="onclick">
                this.parent.parent.minimize();
            </handler>
            <labelTooltip labelid="856" />
        </miniIconsPresenter>
        
        <miniIconsPresenter name="_maximize2" visibility="hidden"
            iconRessourceName="btn_presenter_maximize">
            <handler name="onclick">
                this.parent.parent.reminimize();
            </handler>
            <labelTooltip labelid="857" />
        </miniIconsPresenter>
        
        <miniIcons name="_mute" width="16" height="16" resource="mute_btn_rsc">
            <handler name="onclick">
                if (parent.isload){
	                parent.parent._chatvideoinner._videostream.setVolume(0);
	                this.setAttribute('frame',2);
	                this.parent.isload = false;
	                this._tip.setAttribute("labelid","1075");
	            } else {
	                parent.parent._chatvideoinner._videostream.setVolume(100);
	                this.setAttribute('frame',1);
	                this.parent.isload = true;
	                this._tip.setAttribute("labelid","1074");
	            }
            </handler>
            <labelTooltip name="_tip" labelid="1074" />
        </miniIcons>  
        
        <miniIconsPresenter name="_resync"
            iconRessourceName="resyncuser_rsc">
            <handler name="onclick">
                parent.parent.resetValues();
                if(!this.parent.parent.isremote) {
                	if ($debug) Debug.write("editRecordStream ################# baseVideObject ");
                	if (this.parent.parent.isInterview) {
                		new lz.editRecordStream(parent.parent.parent,{
                			    doDefaultAnimation:false,
                                align:'center',valign:'middle',
                			    isInterview:true,
                			    myvideocontainer:parent.parent,
                                isSyncUpdate:true});
                	} else {
                		new lz.editRecordStream(canvas.main_content._content.inner,{
                                isSyncUpdate:true});
                	}
                }
            </handler>
            <labelTooltip name="_tip" labelid="540" />
        </miniIconsPresenter>  
        
        <miniIconsPresenter name="_showusercontext"
            iconRessourceName="showusercontext">
            <handler name="onclick">
                new lz.remoteUserDetails(parent.parent);
            </handler>
            <labelTooltip labelid="68" />
        </miniIconsPresenter>  
        
    </view>         
    
    <dragstate name="dragger" />
    <resizestate name="rs"/>
    
    <animator name="_minimizeZoom" attribute="height" 
              duration="750" to="20" start="false">
        <handler name="onstop" args="s">
            parent.reminimizeComplete();
        </handler>
    </animator>    

    <handler name="onismoderator" reference="canvas" args="m">
        if ($debug) Debug.write("###### ismoderator ", m);
        <![CDATA[
        if (this.isInterview) {
            this.isShowMicMute = false;
        } else if (m) {
            this.isShowMicMute = true;
        } else if (canvas.publicSID == this.publicSID) {
            this.isShowMicMute = true;
        } else {
            this.isShowMicMute = false;
        }
        if (this,isShowMicMute) {
            this._micView.setAttribute("visibility", "visible");
        } else {
            this._micView.setAttribute("visibility", "hidden");
        }
        if (this.minimized) {
            this._loudness.setAttribute("x",this.width - 84 - (this.isShowMicMute ? 20 : 0));
            this._micView.setAttribute("x",this.width - 84);
            this._loudness.bringToFront();
            this._micView.bringToFront();
        }
        ]]>
    </handler>

    <method name="muteMicrophone" args="mute">
        <![CDATA[
        var gain = this._chatvideoinner._videostream.micro.gain;
        if (mute) {
            this._chatvideoinner._videostream.micro.setGain(0);
        } else {
            this._chatvideoinner._videostream.micro.setGain(50);
        }
        this.setMicMuted(mute);
        ]]>
    </method>

    <method name="setMicMuted" args="micMuted">
        <![CDATA[
        if (micMuted) {
            this._micView._micButton._tip.setAttribute("labelid","1385");
            this._micView._micButton.setAttribute('frame',2);
        } else {
            this._micView._micButton._tip.setAttribute("labelid","1384");
            this._micView._micButton.setAttribute('frame',1);
        }
        ]]>
    </method>

</class>


</library>
