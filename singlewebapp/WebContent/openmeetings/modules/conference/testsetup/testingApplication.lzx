<?xml version="1.0" encoding="UTF-8" ?>
<library>

<!-- 
#########################################

Test the setup values before you enter a room

 -->
 
<class name="testingApplication" extends="view" x="1" y="24">
	
	<attribute name="lastRecorded" value="" type="string" />
	
	<attribute name="isRunning" value="false" type="boolean" />
	
	<attribute name="recordingsCounter" value="5" type="number" />
	
	<attribute name="timerIsRunning" value="false" type="boolean" />
	
	<attribute name="counterDelegate" value="null" />
	
	<handler name="oninit">
		this.counterDelegate = new LzDelegate( this, "count" );
	</handler>
	
	<method name="startTimer">
		this.timerIsRunning = true;
		this.timerWasUnmutedTheFirstTime = true;
		lz.Timer.addTimer( this.counterDelegate, 1000 );
	</method>
	
	<method name="count" args="calleeObj">
		if (this.recordingsCounter != 0){
			this.recordingsCounter -= 1;
			lz.Timer.addTimer( this.counterDelegate, 1000 );
			
			this._text._info.setAttribute("text",""+this.recordingsCounter+" sec");
			
		} else {
			this._text.setAttribute("visibility","hidden");
			this.doStop();
			this.timerIsRunning = false;
			this.doPlay();
		}
	</method>
	
	<method name="startTimerToCount">
		if (!this.timerIsRunning) {
			this.startTimer();
		}
	</method>
	
	<method name="doninitalize">
        <![CDATA[
        
            this._btnStartRecording.setAttribute("enabled",false);
            
            this.recordingsCounter = 5;
            
            this._text.setAttribute("visibility","visible");
            this._text._info.setAttribute("text","5 sec");
        
            this.isRunning = true;
            
            var valCam = this.availibleCams.getValue();
            var valMic = this.availibleCams.getValue();
            
            var videoview = this._publisher._chatvideoinner._videostream;
            if ($debug) Debug.write("videoview: ",videoview);
            if ($debug) Debug.write(valCam,valMic);
            
            var _micro = Microphone.get(valMic);
            var _camera = Camera.get(valCam);
            if ($debug) Debug.write("_camera.setMode: ",videoview.width,videoview.height,canvas.framesPerSecond,true);
            _camera.setMode(videoview.width,videoview.height,canvas.framesPerSecond,true);
            
            //The First start-timer message will come from the Flash Object
            
            if ($debug) Debug.warn("_camera.muted ",_camera.muted);
            if ($debug) Debug.warn("_micro.muted ",_micro.muted);
            
            if (!_camera.muted) {
                this.startTimer();
            }
            
            
            //Microphone.set
            if (canvas.vaquality=="best") {
                _micro.setRate(canvas.microphoneRateBest);
                if ($debug) Debug.write("_camera.setQuality BEST: ",canvas.bandwidthNeededBest,canvas.camQualityBest);
                _camera.setQuality(canvas.bandwidthNeededBest,canvas.camQualityBest);
            } else {
                _micro.setRate(canvas.microphoneRateNormal);
                _micro.setSilenceLevel(canvas.loudnessAcitviation);
                if ($debug) Debug.write("_camera.setQuality NORMAL: ",canvas.bandwidthNeededNormal,canvas.camQualityNormal);
                _camera.setQuality(canvas.bandwidthNeededNormal,canvas.camQualityNormal);
            }
            
            //Microphone setUseEchoSupression(bool)
            _micro.setUseEchoSuppression(true);

            //start recording of client stream
            
            var t = new Date();
            this.lastRecorded = "TEST_SETUP_"+t.getTime();
            
            this._publisher.setAttribute("visibility","visible");
            this._viewer.setAttribute("visibility","hidden");
            
            videoview.record(this.lastRecorded,_camera,_micro);
        ]]>
    </method>
    
    <method name="doPlay">
    	<![CDATA[
    	
    	   if (this.lastRecorded == "") {
    	   	   //Error - nothing recorded yet
    	   	   if ($debug) Debug.warn("Nothing to Play");
    	   } else {
    	   	   
    	   	   this._play.setAttribute("visibility","visible");
    	   	
    	   	   this._publisher.setAttribute("visibility","hidden");
               this._viewer.setAttribute("visibility","visible");
               
               var videoview = this._viewer._chatvideoinner._videostream;
               
               videoview.justPlayStream(this.lastRecorded+".flv",0);
                
    	   }
    	
    	]]>
    </method>
    
    <method name="doStop">
    	if (this.isRunning) {
    		this.isRunning = false;
    		
    		var videoview = this._publisher._chatvideoinner._videostream;
    		
    		this._btnStartRecording.setAttribute("enabled",true);
    		
    		videoview.stop();
    		
    		this.doPlay();
    	}
    	
    	var videoviewViewer = this._viewer._chatvideoinner._videostream;
        videoviewViewer.stop();
    </method>
	
	<labelText fontstyle="bold" labelid="758"
			   width="$once{ parent.parent.width-2 }" height="30" multiline="true" /> 
	
	<labelText name="availibleCamsLabel" labelid="52" fontsize="11" x="2" y="40" />

    <resetCombobox fontsize="11" name="availibleCams" x="10" y="60" width="260" editable="false">
        <handler name="oninit">
            <![CDATA[
                //Get all availible Cam's
                var tw = Camera.names;
                var r = "";
                for (var eg=0;eg<tw.length;eg++){
                    this.addItem(tw[eg],eg);
                    r=eg;
                }
                var t = new lz.sharedObject();
                t.getLocal('userdata');
                var g = t.getData('userdata');
                if (g!=null){
                    var cam = g["cam"];
                } else {
                    var cam = r;
                }
                if (cam=='undefined' || cam =='' || cam == null) cam=r;
                this.selectItem(String(cam));    

            ]]>
        </handler>
    </resetCombobox>
    
    <labelText name="availibleMicsLabel" labelid="53" fontsize="11" x="2" y="84" />

    <resetCombobox fontsize="11" name="availibleMics"  x="10" y="104" width="260" editable="false">
        <handler name="oninit">
            <![CDATA[
                //Get all availible Mic's
                var tw = Microphone.names;
                var r = "";
                for (var eg=0;eg<tw.length;eg++){
                    r=eg;
                    this.addItem(tw[eg],eg);
                }
                
                var t = new lz.sharedObject();
                t.getLocal('userdata');
                var g = t.getData('userdata');
                if (g!=null){
                    var mic = g["mic"];
                } else {
                    var mic = r;
                }
                if (mic=='undefined' || mic =='' || mic ==null) mic=r;
                this.selectItem(String(mic));  
            ]]>
        </handler>
    </resetCombobox>
    
    
    <simpleLabelButton name="_btnStartRecording" labelid="775" 
    				   width="170" x="100" y="150" height="28">
    	<handler name="onclick">
            parent._level_meter.startLevel();
            parent.doninitalize();
        </handler>
        <view resource="test_setup_record_rsc" x="2" y="4" />
    </simpleLabelButton>
    
	
	<videoObjectTestBroadcast name="_publisher" x="340" y="40" width="240" height="180">
		<handler name="sendCameraStatus" args="camStatus">
            if ($debug) Debug.write("sendCameraStatus -1- ",camStatus);
            if (camStatus == "Camera.Unmuted") {
            	parent.startTimerToCount();
            }
        </handler>
        
        <handler name="sendMicroStatus" args="micStatus">
            if ($debug) Debug.write("sendMicroStatus -1- ",micStatus);
            if (micStatus == "Microphone.Unmuted") {
                parent.startTimerToCount();
            }
        </handler>
	</videoObjectTestBroadcast>
	
	<videoObjectPlayTestBroadcast name="_viewer" x="340" y="40" 
								  width="240" height="180" visibility="hidden" />
								  
	<view name="_text" x="340" y="40" width="240" height="180" visibility="hidden">
		<text name="_info" resize="true" bgcolor="0xFFFFFF" align="right"
			  fontsize="12" fontstyle="bold" />
	</view>
	
	<!--
	<simpleLabelRoundButtonIcon name="_start" y="190" x="350" 
				ressourceIcon="test_setup_record_rsc"
				width="70" tlabelid="763" >
		<handler name="onclick">
			parent._level_meter.startLevel();
			parent.doninitalize();
		</handler>
	</simpleLabelRoundButtonIcon>
	
	<simpleLabelRoundButtonIcon name="_stop" y="190" x="425" 
				ressourceIcon="test_setup_stop_rsc"
				width="70" tlabelid="766" >
        <handler name="onclick">
        	parent._level_meter.resetNewLevel();
            parent.doStop();
        </handler>
    </simpleLabelRoundButtonIcon>
    
	<simpleLabelRoundButtonIcon name="_play" y="190" x="500" 
				ressourceIcon="test_setup_play_rsc"
				width="70" tlabelid="764" 
				enabled="false">
        <handler name="onclick">
            parent.doPlay();
        </handler>
    </simpleLabelRoundButtonIcon>
     -->
     
    <simpleLabelRoundButtonIcon name="_play" y="190" x="490" visibility="hidden"
                ressourceIcon="test_setup_play_rsc"
                width="86" tlabelid="764" 
                enabled="false">
        <handler name="onclick">
            parent.doPlay();
        </handler>
    </simpleLabelRoundButtonIcon>
     
    <labelText labelid="767" x="340" y="224" />
    
    <view name="_level_meter" x="340" y="244" width="240" height="20" clip="true" bgcolor="0x000000">
    	
    	 <!--- Level delegate, used to track level changes. 
              @keywords private -->
        <attribute name="_leveldel" value="$once{new LzDelegate(this, '_updateLevel')}"/>
    	
    	<method name="_updateLevel" args="no">
    		<![CDATA[
    		    //if ($debug) Debug.write("activityLevel",parent._publisher._chatvideoinner._videostream.micro.activityLevel);
    		    this.setNewLevel(parent._publisher._chatvideoinner._videostream.micro.activityLevel);
    		]]>
    	</method>
    	
    	<method name="startLevel">
    		this._leveldel.register(lz.Idle, "onidle");
    	</method>
    	
    	<method name="resetNewLevel">
    		this._leveldel.unregisterAll();
    		this.setNewLevel(0);
    	</method>
    	
    	<method name="setNewLevel" args="no">
    		<![CDATA[
    		
                var newLevel = (238/100) * no;
            
                this._over.setAttribute("width",238-newLevel);
                this._over.setAttribute("x",1+(newLevel));
                
            ]]>
    	</method>
    	
    	<view name="_bg" width="238" height="18" x="1" y="1" bgcolor="0xFFFFFF" />
    	<view name="_grip" resource="level_meter_rsc" x="1" y="1" />
    	<view name="_over" width="238" height="18" x="1" y="1" bgcolor="0xFFFFFF" />
    </view>
    
    <view y="294" resource="test_setup_info_rsc" x="10" />
    
    <labelText fontstyle="bold" labelid="765" x="39" y="290"
               width="$once{ parent.parent.width-50 }" multiline="true" /> 
    
</class>
	
</library>
 
