<?xml version="1.0" encoding="UTF-8" ?>
<canvas debug="true" width="100%" height="100%" >
    
    <debug fontsize="12" oninit="Debug.showInternalProperties = true" />
     

<include href="incubator/lzcombobox.lzx" />
<include href="incubator/shadowbox.lzx" />


<!--
attributes,methods,datasets,views are moved into /base
-->
<include href="base/" />


<include href="oslmon/" /> 
<include href="resources/" />
<include href="conference/" /> 
<include href="xmlcrm/" /> 


<silverstyle name="defaultstyle" isdefault="true" basecolor="${ canvas.basebgcolorizer }"
	canvascolor="white" />

<resource name="currentsplash" src="splash_defaultvalues.swf" />

<splash>
	<view center="true" ratio="1" resource="splash_defaultvalues.swf" />
</splash>



<!-- main colors:
264269
 -->
  



<resource name="configure_vidrsc" src="resources/configure.png" />

<resource name="mainbackroundmenu_rsc" src="resources/mainbackroundmenu.png" />
        
    
<handler name="oninit">
	//this.setAttribute('framerate',12);
    var cmenu = new LzContextMenu();
    canvas.setDefaultContextMenu(cmenu);
    cmenu.hideBuiltInItems();

    // Add Custom Items:

    //var item1 = cmenu.makeMenuItem('MedCast', new LzDelegate(this,"openMeetingsMenuItemHandler"));
    //cmenu.addItem(item1);

	if($debug) Debug.write("main.lzx/oninit:",this);
</handler>
    
<method name="openMeetingsMenuItemHandler">
    LzBrowser.loadURL("http://code.google.com/p/openmeetings/", "Openmeetings Homepage");  
</method>    
    
<dataset type="http" name="myConfigSet" src="config.xml" request="true"
    ondata="canvas.myinit()" />
			
<method name="myinit">
	<![CDATA[
	if($debug) Debug.write("main.lzx/config.xml ondata",this);
	//Set Config-values by config.xml, see comments on config.xml
	this.setAttribute('rtmphostlocal',canvas.myConfigSet.getPointer().xpathQuery('config/rtmphostlocal/text()'));   
	this.setAttribute('rtmpport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rtmpport/text()')));  
	this.setAttribute('rtmpTunnelport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rtmpTunnelport/text()')));  
	this.setAttribute('red5httpport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/red5httpport/text()')));  
	this.setAttribute('basebgcolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/basebgcolorizer/text()'));  
	this.setAttribute('baseMousecolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/baseMousecolorizer/text()'));  
	this.setAttribute('baseMouseOvercolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/baseMouseOvercolorizer/text()'));  
	this.setAttribute('currentappversion',canvas.myConfigSet.getPointer().xpathQuery('config/currentappversion/text()'));  
	this.setAttribute('currentappname',canvas.myConfigSet.getPointer().xpathQuery('config/currentappname/text()'));  
	this.setAttribute('currentappnameurl',canvas.myConfigSet.getPointer().xpathQuery('config/currentappnameurl/text()'));  
	this.setAttribute('currentappnamebugurl',canvas.myConfigSet.getPointer().xpathQuery('config/currentappnamebugurl/text()'));
	this.setAttribute('loudnessAcitviation',canvas.myConfigSet.getPointer().xpathQuery('config/loudnessAcitviation/text()'));
	this.setAttribute('webAppRootKey',canvas.myConfigSet.getPointer().xpathQuery('config/webAppRootKey/text()'));
	this.setAttribute('showWindowEffect',canvas.myConfigSet.getPointer().xpathQuery('config/showWindowEffect/text()'));
	this.setAttribute('firstdayinweek',canvas.myConfigSet.getPointer().xpathQuery('config/firstdayinweek/text()'));

	mainBaseText.setText(canvas.currentappname);
	mainBaseText.setShadow();
	mainBaseTextLabel.setAttribute('text',canvas.currentappnameurl);  

	this.chathistory=new Array();
	
	var doubleSlash = _url.indexOf("//");
	var isNotPort80 = _url.indexOf(":", doubleSlash+2);
	//Debug.write("isNotPort80: ",isNotPort80);
	if (isNotPort80!=-1){
	    //Debug.write("isNotPort80: ",doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2);
	    var server = _url.substr(doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2); 
	} else {
	    var server = _url.substr(doubleSlash+2, _url.indexOf("/", doubleSlash+2)-doubleSlash-2); 
	}
	
	//Debug.write("this zielnr: ",this,server);
	
	this.setAttribute('rtmphost',server);

	if (this.rtmphostlocal.length==0){
	    this.setAttribute('rtmphostlocal',server);
	}
	
	//Check for Invitation
	var domain = LzBrowser.getInitArg('domain');
	var room = LzBrowser.getInitArg('room');
	var roomid = LzBrowser.getInitArg('roomid');
	var roomtype = LzBrowser.getInitArg('roomtype');
	var emailGuest = LzBrowser.getInitArg('email');

	//Debug.write("domain: ",domain);

	if (domain!=undefined && room!=undefined && roomtype!=undefined 
			&& roomid!=undefined && emailGuest != undefined){
		canvas.initroomid = Number(roomid);
		canvas.initroomStr = room;
		canvas.initroomtype = roomtype;
		canvas.initdomainid = domain;
		canvas.isinitRoomDirect = true;
		canvas.firstName = emailGuest;
		canvas.mail = emailGuest;
	}

	//check for reset password
	var hash = LzBrowser.getInitArg('hash');

	if (hash!=undefined){
		canvas.isResetUsername = true;
		canvas.resetHash = hash;		
	}

	//Debug.write("rtmphostlocal,rtmphost: ",canvas.rtmphostlocal,canvas.rtmphost);	
	
	var src = 'rtmp://'+canvas.rtmphostlocal+':'+canvas.rtmpport+'/'+canvas.webAppRootKey+'/hibernate';
	canvas.thishib.setAttribute('src',src);
	canvas.thishib.loaderVar = new autoLoader(canvas);
	canvas.thishib.loaderVar.src.setText(src);
	canvas.thishib.connect();
	]]>
</method>

<method name="getLabelName" args="id">
	return getLabelTag(id);
</method>

<!-- View for Contents. All Windows will be loaded on this view. -->
<view name="main_content" y="${ canvas.naviHeightDelta }" width="${canvas.width}" 
    height="${canvas.height-canvas.naviHeightDelta}" visibility="hidden">
    <view name="_content" x="0" width="${parent.width}" height="${parent.height}" layout="axis:y;spacing:2">
        <view name="inner" width="${parent.width}" height="${parent.height}" />
        <method name="clearAll">
        	<![CDATA[
	            if($debug) Debug.write("main.lzx/clearAll() this.inner: ",this.inner,this.inner.subviews.length);
	            if (this.inner.subviews.length!=0) var baseContent = this.inner.subviews[0].close();
	            for (var eg in this.inner.subviews) {
	                if($debug) Debug.write("clearAll this.inner.subviews: ",this.inner.subviews[eg]);
	                if (eg!=0) this.inner.subviews[eg].close();               
	            }
	            return baseContent;
            ]]>
        </method>
    </view>
    <vscrollbar />
</view>  
  
<!-- View for Navigation-bar and App-name -->
<view name="_mainbgcontentNavi" x="0" y="0" bgcolor="${ canvas.baseMousecolorizer }" clip="true"
    width="100%" height="$once{ canvas.naviHeight }" visibility="hidden">
    <text id="mainBaseText" x="10" y="10"
        fgcolor="white" fontsize="20" fontstyle="bold">
        <method name="setShadow" >
            <![CDATA[
            if (this.isinited){
                this.normalMC = this.getMCRef();
                this.displacementMap = new flash.filters.DropShadowFilter();
                this.normalMC.filters = [this.displacementMap];
            }
            ]]>              
        </method> 
        <handler name="onclick">
            LzBrowser.loadURL(canvas.currentappnameurl,"_blank");
        </handler>  
        <labelTooltip id="mainBaseTextLabel" />      
    </text>
    <handler name="oninit">
        var cmenu = new LzContextMenu();
        this.setContextMenu(cmenu);
        cmenu.hideBuiltInItems();
    </handler>     
</view>

<!-- View for Conference menu bar at the top side. Visible on conference -->
<view name="_conferencemenu" y="0" x="0" width="100%" height="20"
    bgcolor="$once{ canvas.baseMousecolorizer }" visibility="hidden" > 
    <method name="removeAll">
		<![CDATA[
			while (this.subviews.length > 0) {
				this.subviews[0].destroy();
			}
		]]>
    </method>
</view>   
    
<!-- View for "Loading" -->
<view name="_loadingAll" visible="false" opacity="0.5" 
    width="${ canvas.width }" height="${ canvas.height }" 
    bgcolor="0xFFFFFF" clickable="true" >
    <text align="right" y="56" fontsize="14" fgcolor="red">Loading...</text>
</view>
    
    
</canvas>