<?xml version="1.0" encoding="UTF-8" ?>
<library>

<!-- 
############################

    Class newWhiteBoard
    
 -->


<class name="newWhiteBoard" extends="view" >
    
    <attribute name="baseurl" value="" type="string" />
    <attribute name="fileName" value="" type="string" />
    <attribute name="moduleName" value="" type="string" />
    <attribute name="parentPath" value="" type="string" />
    <attribute name="room" value="" type="string" />
    <attribute name="domain" value="" type="string" />
    
    <attribute name="downloadurl" value="" type="string" />
    <attribute name="iamgex" value="" type="string" />
    <attribute name="imagey" value="" type="string" />
    
    <handler name="onsharedMessage" args="obj" />
    
    <attribute name="sendObject" value="null" />
    <attribute name="sendObjectToClientID" value="0" type="number"  />
    
    <attribute name="confirmdialog" value="null" />
    
    <attribute name="documentmenuIsInited" value="false" type="boolean" />

    <method name="sendConfirmation" args="yesno,askagain" >
        
        ////Debug.write("clear yesno,askagain: ",yesno,askagain);
    
         var t = new sharedObject();
         t.getLocal('userdata');
         var g = t.getData('userdata');
         if (g==null) g = new Array();
         if (g["image"]==null) g["image"]=new Array();
         g["image"]["clearField"]=yesno;
         g["image"]["askagainclear"]=!askagain;
         t.setData('userdata',g);
         t.flush();     

         if (yesno){
            ////Debug.write("clear field!!");
            canvas._drawarea.setModus('plain');
            canvas._drawarea.addNewImage(this.downloadurl,this.x,this.y,this.baseurl,this.fileName,this.moduleName,this.parentPath,this.room,this.domain);
         } else {
            ////Debug.write("don't clear field!!");
            canvas._drawarea.addNewImage(this.downloadurl,this.x,this.y,this.baseurl,this.fileName,this.moduleName,this.parentPath,this.room,this.domain);
         }
         this.confirmdialog.close();
    </method>
    
    <method name="getconfirmationscode">
        var t = new sharedObject();
        t.getLocal('userdata');
        var g = t.getData('userdata');
        if (g==null) g = new Array();
        if (g["image"]==null) {
            g["image"]=new Array();
            g["image"]["clearField"]=false;
            g["image"]["askagainclear"]=true;
            t.setData('userdata',g);
            t.flush();              
        }
        return g["image"];
    </method>
    
    <method name="resetDefaultConfirmations">
        var t = new sharedObject();
        t.getLocal('userdata');
        var g = t.getData('userdata');
        if (g==null) g = new Array();
        if (g["image"]==null) g["image"]=new Array();
        g["image"]["clearField"]=false;
        g["image"]["askagainclear"]=true;
        t.setData('userdata',g);
        t.flush();              
    </method>   
    
    <method name="clearAreaAndAddImage" args="downloadurlVal,xVal,yVal,baseurl,fileName,moduleName,parentPath,room,domain">
        <![CDATA[
        ////Debug.write("clearAreaAndAddImage: ",downloadurlVal,xVal,yVal,baseurl,fileName,moduleName,parentPath,room,domain);
        this.downloadurl=downloadurlVal;
        this.iamgex=xVal;
        this.imagey=yVal;   
        this.baseurl=baseurl;
        this.fileName=fileName;
        this.moduleName=moduleName;
        this.parentPath=parentPath;
        this.room=room;
        this.domain=domain;
        var storedImageDate = this.getconfirmationscode();
        ////Debug.write(" g[image] ",storedImageDate);
        if (storedImageDate["clearField"] && !storedImageDate["askagainclear"]){
            canvas._drawarea.setModus('plain');
            Debug.write(" canvas._drawarea.addNewImage 1 ",this.downloadurl,this.x,this.y);
            canvas._drawarea.addNewImage(this.downloadurl,this.x,this.y,this.baseurl,this.fileName,this.moduleName,this.parentPath,this.room,this.domain);
        } else if (!storedImageDate["askagainclear"] && !storedImageDate["clearField"]){
            canvas._drawarea.addNewImage(this.downloadurl,this.x,this.y,this.baseurl,this.fileName,this.moduleName,this.parentPath,this.room,this.domain);
            Debug.write(" canvas._drawarea.addNewImage 2 ",this.downloadurl,this.x,this.y);
        } else if (storedImageDate["askagainclear"]){
            this.confirmdialog = new confirmationBox(canvas.main_content._content.inner,{labelid:62,labeliderror:63,refObj:this});
        } else {
            this.confirmdialog = new confirmationBox(canvas.main_content._content.inner,{labelid:62,labeliderror:63,refObj:this});
        }
        ]]> 
    </method>
    
    <handler name="isloadingImage" args="val" />
    <handler name="isloadedImage" args="val" />
    
    
    <text fontsize="12" x="10" y="2" 
        name="_sharingClientName" fontstyle="bold" />    
    
    <simpleLabelButton labelid="239" height="24" name="_doShare" width="200" 
    				   x="$once{ parent.parent.width-210 }" y="2" 
    				   enabled="${  canvas.ismoderator }">
        <handler name="onclick">
	    canvas._drawarea.setModus('plain');          
            this.parent.checkForApplyScreen();
        </handler>
        <view y="1" x="2" resource="background_screenview_rsc" />
        
    </simpleLabelButton>  
    
    <method name="checkForApplyScreen">
            <![CDATA[
                var downloadurl = 'http://'+canvas.rtmphostlocal+':'+canvas.red5httpport
                    +'/'+canvas.webAppRootKey+'/ScreenRequestHandler?'
                    +'rtmphostlocal='+canvas.rtmphostlocal
                    +'&room='+hib.currentroomid
                    +'&domain='+hib.conferencedomain
                    +'&sid='+canvas.sessionId
                    +'&red5httpport='+canvas.red5httpport;

                //Debug.write(downloadurl); 
                LzBrowser.loadURL(downloadurl,'_blank');    
            ]]>        
    </method> 
    
    <!-- 
        The Content Area    
     -->
    <view width="${ parent.parent.width-2 }" height="${ parent.parent.height-23 }" 
    	  y="0" name="_drawareaMask" clip="true" bgcolor="white" >
        <baseDrawSave y="0" name="_drawarea" width="${parent.width}" height="${parent.height}" >
            <attribute name="initH"/>
            <attribute name="initW"/>
			<handler name="oninit">
            	canvas._drawarea = this;
            </handler>
            
            <handler name="onprogress" args="perc">
                //Debug.write("onprogress: ",perc);
                this.parent.parent._progress.setProgress(perc);
            </handler>
            <handler name="onmousedown" >
                
            </handler>
            <handler name="ondrawmodus" args="d">
                this.drawmodus = d;
                parent.parent._propertyPanel.loadPanelByModus(this);
            </handler>
            <handler name="setNewScreenUserName" args="value">
                this.parent.parent._sharingClientName.setText(value);
            </handler>
            <!-- @overwrite -->
            <method name="onsharedMessage" args="action,obj">
    
                var tempSendArray = new Array ();
                tempSendArray[0] = 'whiteboard';
                tempSendArray[1] = new Date();
                Debug.write("onsharedMessage Setting Message: ",action,obj);
                tempSendArray[2] = action;
                tempSendArray[3] = obj;
                     
                parent.parent.onsharedMessage.sendEvent(tempSendArray);
            </method>
            <handler name="onopenWhiteBoard" >
                var obj = new Array();
                obj[0] = 'whiteboard';
                obj[1] = 'initgetVars';
                obj[2] = canvas.streamid;
                
                //Debug.write("Setting Message onopenWhiteBoard: ",canvas.moderatorStreamID,obj);
                
                this.parent.parent.sendObjectToClientID = canvas.moderatorStreamID;
                this.parent.parent.sendObject = obj;
                     
                this.parent.parent.sendMessageWithClientById.doCall();
            </handler>
            <!-- clientid  = streamid of the user -->
            <method name="oninitUser" args="clientid,objectList">
                this.parent.parent.sendObjectToClientID = clientid;
                this.parent.parent.sendObject = objectList;
                this.parent.parent.sendMessageWithClientById.doCall();
            </method>
            
            <handler name="onboundingIsActive" args="b">
            	if ($debug) Debug.write("boundingIsActive: ",b);
            	if (b){
            		var boundingDoUpdateOnInit = true;
		            if (this.ObjectByName instanceof swfResourceView){
		                //Debug.write("is swf Presentation");
		                boundingDoUpdateOnInit=false;
		            }
            		if (!boundingDoUpdateOnInit) {
		                parent.parent._propertyPanel.setObjectBounds(
		                	this.ObjectByName.x,this.ObjectByName.y,
		                	this.ObjectByName._swfView.width,this.ObjectByName._swfView.height);
		            } else {
		                parent.parent._propertyPanel.setObjectBounds(
		                	this.ObjectByName.x,this.ObjectByName.y,
		                	this.ObjectByName.width,this.ObjectByName.height);
		            }
            	}
            </handler>
        </baseDrawSave>  
    </view>
    
        <netRemoteCallHib name="sendMessageWithClientById" funcname="sendMessageWithClientById"
            remotecontext="$once{ canvas.thishib }" >
            <netparam><method name="getValue">return parent.parent.sendObject;</method></netparam>
            <netparam><method name="getValue">return parent.parent.sendObjectToClientID;</method></netparam>
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                //Debug.write("sendMessageWithClientById : ",value);
                
                ]]>
            </handler>   
        </netRemoteCallHib>     
    
    <!-- 
        Container for the bounding Box (selection Box)
     -->
    <view name="boundboxesView" width="${ parent.parent.width-1 }" 
    	  height="${ parent.parent.height-23 }" y="0">
    	<handler name="onBoundingBox" args="boundingBoxRef">
    		var boundingDoUpdateOnInit = true;
			if (boundingBoxRef.objRef instanceof swfResourceView){
                //Debug.write("is swf Presentation");
                boundingDoUpdateOnInit=false;
            }
    		if (!boundingDoUpdateOnInit) {
                parent._propertyPanel.setObjectBounds(
                	boundingBoxRef.objRef.x,boundingBoxRef.objRef.y,
                	boundingBoxRef.objRef._swfView.width,boundingBoxRef.objRef._swfView.height);
            } else {
                parent._propertyPanel.setObjectBounds(
                	boundingBoxRef.objRef.x,boundingBoxRef.objRef.y,
                	boundingBoxRef.objRef.width,boundingBoxRef.objRef.height);
            }
    	</handler>
    </view>
    
    <view name="panelArea" width="${ parent.parent.width }" 
    	  height="${ parent.parent.height-21-parent._propertyPanel.height }">
    	
    	<attribute name="objectRef" value="null" />
    	
    	<!--- @deprecated -->
		<method name="_setSelection" args="obj">
			parent._drawareaMask._drawarea.removeObjectBounds();
			if (obj.setSelectionToItem){			
				if (this.objectRef!=null){
					this.objectRef._isselected = false;
					this.objectRef._area.setBGColor(0xFFFFFF);
				}
				this.objectRef = obj;
				this.objectRef._isselected = true;
				this.objectRef._area.setBGColor(canvas.basebgcolorizer);
				parent._drawareaMask._drawarea.setModus(this.objectRef.modi);
			}
		</method>
		
		<method name="setSelection" args="obj">
			parent._drawareaMask._drawarea.removeObjectBounds();
			if (obj.setSelectionToItem){			
				if (this.objectRef!=null){
					this.objectRef._isselected = false;
					this.objectRef.setAttribute('enabled',true);
				}
				this.objectRef = obj;
				this.objectRef._isselected = true;
				this.objectRef.setAttribute('enabled',false);
			}
			parent._drawareaMask._drawarea.setModus(obj.modi);
		</method>
		
		<method name="sendNewPropertyHeight" args="objRef">
			<![CDATA[
				if (this.subviews[0] instanceof mainToolsTopPanel) {
					if (objRef.height<=22){
						if (this.subviews[0].y+this.subviews[0].height+5>=parent.parent.height-objRef.initheight-21){
							if ($debug) Debug.write("mainToolsTopPanel");
							this.subviews[0].setAttribute('y',objRef.y-this.subviews[0].height);
						}
					} else {
						if (this.subviews[0].y+this.subviews[0].height+5>=objRef.y){
							if ($debug) Debug.write("mainToolsTopPanel");
							this.subviews[0].setAttribute('y',objRef.y-this.subviews[0].height);
						}
					}
				}
			]]>
		</method>
    	
    	<mainToolsLeftPanel y="20" />	
   
    </view> 
    
    <propertyPanel name="_propertyPanel" x="0" y="${ parent.parent.height-this.height-21 }" >
   		<handler name="onheight" args="h">
   			this.height = h;
   			if ($debug) Debug.write("onheight: ",h);
   			parent.panelArea.sendNewPropertyHeight(this);
   		</handler>
    </propertyPanel>
     
</class>

</library>
