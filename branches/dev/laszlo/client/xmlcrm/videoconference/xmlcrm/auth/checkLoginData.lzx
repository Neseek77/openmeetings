<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="checkLoginData" extends="labelexplorerbox" labelid="108"
    docking="true" resizeable="false" closable="false" width="300" x="350" y="0" height="240">
    
    <handler name="onclose">
    	if (this.childObj!=null) this.childObj.close();
    </handler>
    
    <attribute name="refObj" value="null" />
    <attribute name="childObj" value="null" />
    
    <attribute name="labeliderror" value="0" type="number" />
    
    <labeltext name="n1" labelid="109" width="200" y="42" resize="false" x="2"/>
        <customedittext name="username" y="42" x="120" width="170" text="" />

    <labeltext name="n2" labelid="110" width="200" y="72" resize="false" x="2"/>
        <customedittext name="userpass" y="72" password="true" x="120" width="170" text="" />

    <labeltext name="n3" labelid="111" width="200" y="102" resize="false" x="2"/>  
        
        <combobox name="languages" width="170" y="102" x="120" editable="false">
            <netremotecallhib name="getLanguages" funcname="xmlcrm.getLanguages" remotecontext="$once{ canvas.thishib }" >      
                <handler name="oninit">
                    this.doCall();
                </handler>
                <handler name="ondata" args="value">
                    //The onResult-Handler will be called be the rtmpconnection
                    //Debug.write("getLanguages: ",value);
                    <![CDATA[
                    for (var i=0;i<value.length;i++){
                        this.parent.addItem(value[i].name,value[i].language_id);
                    }
                    this.parent.selectItem(value[0].language_id);
                    ]]>
                </handler>  
            </netremotecallhib>
        </combobox>
	
    <labeltext name="n5" text="Color-Style" width="200" y="132" resize="false" x="2"/>  
        
        <combobox name="colors" width="170" y="132" x="120" editable="false">
			<attribute name="initselect" value="true" type="boolean" />
            <handler name="oninit">
				this.addItem('redorange','redorange');
				this.addItem('mediumseagreen','mediumseagreen');
				this.addItem('steelblue','steelblue');
				this.addItem('lightsteelblue','lightsteelblue');
				this.addItem('goldenrod','goldenrod');
				this.selectItem('lightsteelblue');
			</handler>
			<handler name="onselect" args="v">
				//Debug.write("onselect: ",v.value);
				if (this.initselect){
					this.initselect=false;
				} else {
					if (v.value=="mediumseagreen"){
						canvas.setAttribute('basebgcolorizer',"0x3CB371");
						canvas.setAttribute('baseMousecolorizer',"0x66CC8E");
						canvas.setAttribute('baseMouseOvercolorizer',"0x66CC8E");
					} else if (v.value=="steelblue"){
						canvas.setAttribute('basebgcolorizer',"0x4682B4");
						canvas.setAttribute('baseMousecolorizer',"0x80AECC");
						canvas.setAttribute('baseMouseOvercolorizer',"0x80AECC");
					} else if (v.value=="redorange"){
						canvas.setAttribute('basebgcolorizer',"0xFC8558");
						canvas.setAttribute('baseMousecolorizer',"0xFDC4A6");
						canvas.setAttribute('baseMouseOvercolorizer',"0xFDC4A6");
					} else if (v.value=="lightsteelblue"){
						canvas.setAttribute('basebgcolorizer',"0xB0C4DE");
						canvas.setAttribute('baseMousecolorizer',"0xC4D5E6");
						canvas.setAttribute('baseMouseOvercolorizer',"0xC4D5E6");
					} else if (v.value=="goldenrod"){
						canvas.setAttribute('basebgcolorizer',"0xDAA520");
						canvas.setAttribute('baseMousecolorizer',"0xE8C064");
						canvas.setAttribute('baseMouseOvercolorizer',"0xE8C064");
					}
					this.parent.close();
					new checkLoginData(canvas.main_content._content.inner);
				}
			</handler>
        </combobox>	
	

    <labeltext name="n4" labelid="184" width="200" y="102" resize="false" x="2" visible="false" />     
        <combobox name="organisation" width="170" y="102" x="120" editable="false" visible="false" />
        
    <simplelabelbutton labelid="123" name="_register" width="120" x="40" y="196" visible="false">
    	<handler name="onclick">
	    	this.parent._register.setAttribute('visible',false);
	    	this.parent.childObj = new registerNewUser(canvas.main_content._content.inner,{refObj:this.parent});    	
    		parent.showRegForm.doStart();
    	</handler>
    </simplelabelbutton>          
        
    <simplelabelbutton name="b2" labelid="112" width="120" x="170" y="196">
    	<handler name="onclick">
            this.parent.errormess.setText('');
    		this.parent.loginUser.doCall();
    	</handler>
    </simplelabelbutton>   
        
    <simplelabelbutton name="b3" labelid="185" width="120" x="170" y="196" visible="false">
    	<handler name="onclick">
			var orgIndexId = Number(parent.organisation.getValue());
			hib.currentdomain = hib.userobject.organisation_users[orgIndexId].organisation.name;
			hib.currentdomainObj = hib.userobject.organisation_users[orgIndexId].organisation;
			hib.getLanguageById.doCall();
			parent.close();
    	</handler>
    </simplelabelbutton> 	
    
     <text name="errormess" resize="true" y="154" />

    <netremotecallhib name="loginUser" funcname="xmlcrm.loginUser" remotecontext="$once{ canvas.thishib }" >      
        <netparam name="vars1"><method name="getValue"> return canvas.sessionId; </method></netparam>  
        <netparam name="vars2"><method name="getValue"> return parent.parent.username.getText(); </method></netparam>  
        <netparam name="vars3"><method name="getValue"> return parent.parent.userpass.getText(); </method></netparam>  
        <handler name="ondata" args="value">
			<![CDATA[
            //The onResult-Handler will be called be the rtmpconnection
            //Debug.write("loginUser: ",value);
            
            if (value.level_id!=-1){
            
				canvas.setAttribute('user_id',value.user_id);
				canvas.setAttribute('firstName',value.firstname);
				canvas.setAttribute('lastName',value.lastname);
				canvas.setAttribute('mail','');
				canvas.setAttribute('lastLogin','');
				canvas.setAttribute('official_code','');
				canvas.setAttribute('picture_uri','');
				canvas.setAttribute('language','');
            	
                hib.userlang = Number(parent.languages.getValue());
            	hib.userobject = value;
            	if (value.organisation_users.length==0){
            		//Debug.write("this user has no Organisation ");
                } else if (value.organisation_users.length==1){
            		hib.currentdomain = value.organisation_users[0].organisation.name;
            		hib.currentdomainObj = value.organisation_users[0].organisation;
	            	hib.getLanguageById.doCall();
	                parent.close();
                } else {
					
					parent.n1.setAttribute('visible',false);
					parent.username.setAttribute('visible',false);
					parent.n2.setAttribute('visible',false);
			        parent.userpass.setAttribute('visible',false);
					parent.n3.setAttribute('visible',false);
			        parent.languages.setAttribute('visible',false);
                    parent.n5.setAttribute('visible',false);
                    parent.colors.setAttribute('visible',false);
	 				parent._register.setAttribute('visible',false);
					parent.b2.setAttribute('visible',false);
					parent.n4.setAttribute('visible',true);
					parent.organisation.setAttribute('visible',true);
					parent.b3.setAttribute('visible',true);
			
					for (var i=0;i<value.organisation_users.length;i++){
						parent.organisation.addItem(value.organisation_users[i].organisation.name,String(i));
					}
					parent.organisation.selectItem(String(i-1));
                	//Debug.write("multiple organisations Issue 31 http://code.google.com/p/openmeetings/issues/detail?id=31");
                }
            }  else {
                parent.errormess.setText(value.firstname);
            }
            ]]>
        </handler>  
    </netremotecallhib>
    
    <netremotecallhib name="allowFrontendRegister" funcname="xmlcrm.allowFrontendRegister" remotecontext="$once{ canvas.thishib }" >      
        <handler name="oninit">
            this.doCall();
        </handler> 
        <handler name="ondata" args="value">
            //The onResult-Handler will be called be the rtmpconnection
            //Debug.write("allowFrontendRegister: ",value);
            if (value.conf_value==1){
            	parent._register.setAttribute('visible',true);
            }
        </handler>  
    </netremotecallhib>    
    
    <!-- 
    This method is just a test for returning Object Variables from Client to Server
     -->
    <netremotecallhib name="testObject" funcname="xmlcrm.testObject" 
		remotecontext="$once{ canvas.thishib }" >      
        <handler name="oninit">
            this.doCall();
        </handler>
        <netparam name="vars1">
        	<method name="getValue"> 
        		var t = new Array();
        		t.push("as");
        		t.push("ab");
        		t["stringObj"]="myString1";
        		return t; 
        	</method>
        </netparam>         
        <handler name="ondata" args="value">
            //The onResult-Handler will be called be the rtmpconnection
            //Debug.write("testObject: ",value);
        </handler>  
    </netremotecallhib>              
    
    <animator name="showRegForm" attribute="x" to="20" duration="1000" start="false" />
    <animator name="doreset" attribute="x" to="350" duration="1000" start="false" />


</class>

</library>