<?xml version="1.0" encoding="UTF-8" ?>
<library>

<rtmpconnection name="thishib" id="hib" debug="true" autoconnect="true"
    src="$once{ this.protocollName+'://'+canvas.rmpthostlocal+':'+this.protocollPort+'/xmlcrm/hibernate' }" >

  	 <attribute name="protocollName" type="string" value="rtmp" />
  	 <attribute name="protocollPort" type="string" value="$once{ canvas.rmptport }" />
     <attribute name="counterror" type="number" value="0" />
         
     <handler name="onconnect">
        Debug.write("connected");
        this.getsessiondata.call();
     </handler>
  	 <handler name="onerror" >
        <![CDATA[
  	 	Debug.write("error ",this.status);
  	 	this.setAttribute('protocollName','rtmpt');
  	 	this.setAttribute('protocollPort',canvas.rmptTunnelport);
  	 	var src = 'rtmpt://'+canvas.rmpthostlocal+':'+canvas.rmptTunnelport+'/xmlcrm/hibernate';
  	 	this.setAttribute('src',src);
  	 	Debug.write("new src ",this.src);
        if (this.counterror<3){
            this.counterror++;
	  	 	this.init();
	  	 	Debug.write("try ",this.counterror,"one");
	  	 	this.connect();
        } else {
            Debug.write("connection failed");
            canvas.setAttribute('loadingmessage','connection failed');
        }
        ]]>
  	 </handler>
         
     <attribute name="userobject" value="null" />
     
     <!-- default will be loaded on startup -->
     <attribute name="userlang" value="2" type="number" />
     
     <!-- The default Language will be laoded on init  -->
     <attribute name="initlanguageLoaded" value="false" type="boolean" />
     
     <!-- This domain is the orgdomain used in the video-conference -->
     <attribute name="conferencedomain" value="public" type="string" />
     
     <!-- the room of the current conference -->
     <attribute name="connectedroom" value="" type="string" />
     
     <!-- This is the current domain the user has logged-in -->
     <attribute name="currentdomain" value="domain1" type="string" />
     <attribute name="currentdomainObj" value="domain1" type="string" />
	
	<!-- shows what kind of conference it is at the moment
		wether its conference or audience -->
	<attribute name="modus" value="" type="string" />
     
    <netremotecallhib name="getsessiondata" funcname="xmlcrm.getsessiondata" >      
        <handler name="ondata" args="value">
            //The onResult-Handler will be called be the rtmpconnection
            Debug.write("getsessiondata: ",value);
            canvas.sessionObject = value;
            canvas.sessionId = value.session_id;           
            parent.getLanguageById.doCall();
        </handler>  
    </netremotecallhib>
    
    <netremotecallhib name="getLanguageById" funcname="xmlcrm.getLanguageById" >      
        <netparam name="vars1"><method name="getValue"> return parent.parent.userlang; </method></netparam> 
        <handler name="ondata" args="value">
            //The onResult-Handler will be called be the rtmpconnection
            Debug.write("getLanguageById: ",value);
            setLabelObject(value);
            if (parent.initlanguageLoaded){
            	parent.getRoomTypes.doCall();
            } else {
            	parent.initlanguageLoaded=true;
			    if(!canvas.isinitRoomDirect){
            	    parent.getStates.doCall();
			    } else {
			        Debug.write("canvas.isinitRoomDirect is true");
			        parent.markSessionAsLogedIn.doCall();
			    }
            }
        </handler>  
    </netremotecallhib>
	
    <netremotecallhib name="markSessionAsLogedIn" funcname="xmlcrm.markSessionAsLogedIn" >
		<netparam name="vars1"><method name="getValue">return canvas.sessionId;</method></netparam>
        <handler name="ondata" args="value">
            //The onResult-Handler will be called be the rtmpconnection
            Debug.write("markSessionAsLogedIn ",value);
			
			if (canvas.mail == undefined)
			{
			    new invitationuserwin(canvas.main_content._content.inner);
			}
			else
			{		
                        clearStageContent();
                        canvas._mainbgcontentNavi.navi._innercontent.clearAllSubItemLists(); 			
			            if (canvas.initroomtype=="conference"){
				            new conference(canvas.main_content._content.inner); 
			            } else {
				             new audience(canvas.main_content._content.inner); 
			            }
			}                 

        </handler>  
    </netremotecallhib>    
    
    <netremotecallhib name="getStates" funcname="xmlcrm.getStates" >
        <handler name="ondata" args="value">
            //The onResult-Handler will be called be the rtmpconnection
            Debug.write("getStates: ",value);
            canvas.statesInitValues = value;
            parent.getUserSalutations.doCall();
        </handler>  
    </netremotecallhib>    
    
    <netremotecallhib name="getUserSalutations" funcname="userservice.getUserSalutations" >
		<netparam name="vars1"><method name="getValue">return canvas.sessionId;</method></netparam>
        <handler name="ondata" args="value">
            //The onResult-Handler will be called be the rtmpconnection
            Debug.write("getUserSalutations ",value);
            canvas.salutationsInitValues = value;
            new checkLoginData(canvas.main_content._content);
        </handler>  
    </netremotecallhib>   
    
    <netremotecallhib name="getRoomTypes" funcname="conferenceservice.getRoomTypes" >
		<netparam name="vars1"><method name="getValue">return canvas.sessionId;</method></netparam>
        <handler name="ondata" args="value">
            //The onResult-Handler will be called be the rtmpconnection
            Debug.write("getRoomTypes ",value);
            canvas.roomTypesInitValues = value;
            parent.setUsername.doCall();
        </handler>  
    </netremotecallhib>    	 
    
    <netremotecallhib name="getNavi" funcname="xmlcrm.getNavi" >      
        <netparam name="vars1"><method name="getValue"> return canvas.sessionId; </method></netparam> 
        <netparam name="vars2"><method name="getValue"> return parent.parent.userlang; </method></netparam> 
        <handler name="ondata" args="value">
            //The onResult-Handler will be called be the rtmpconnection
            Debug.write("getNavi: ",value);
            new mainnavi(canvas._mainbgcontentNavi,{name:'navi',naviObject:value});
        </handler>  
    </netremotecallhib>
    
        <netremotecallhib name="setId" funcname="setId">
            <handler name="ondata" args="value">
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("################ setId: ",value);
                canvas.setAttribute('streamid',value);   
            </handler>  
        </netremotecallhib> 
        
        <netremotecallhib name="setUsername" funcname="setUsername" remotecontext="$once{ canvas.thishib }" >   
            <netparam name="vars1"><method name="getValue">return canvas.user_id;</method></netparam>
            <netparam name="vars2"><method name="getValue">return canvas.currentuser;</method></netparam>
            <netparam name="vars3"><method name="getValue">return canvas.firstName;</method></netparam>
            <netparam name="vars4"><method name="getValue">return canvas.lastName;</method></netparam>      
            <netparam name="vars6"><method name="getValue">return parent.parent.currentdomain;</method></netparam>
            <handler name="ondata" args="value">
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("setUsername: ",value);
                parent.getNavi.doCall();                    
            </handler>  
        </netremotecallhib>        
        
        <netremotecallhib name="setUserObjectOne2Four" funcname="setUserObjectOne2Four">
            <netparam name="vars1"><method name="getValue"> return canvas.currentusercolor; </method></netparam>        
            <netparam name="vars2"><method name="getValue"> return canvas.currentuserpos; </method></netparam>      
            <handler name="ondata" args="value">
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("setUserObjectOne2Four: ",value);                   
            </handler>  
        </netremotecallhib>
        <netremotecallhib name="setUserObjectNewOne2Four" funcname="setUserObjectNewOne2Four">
            <handler name="ondata" args="value">
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("setUserObjectNewOne2Four: ",value);    
                canvas._videocontainer.addClientItem(value.connectedSince,value.isMod,value.streamid,value.username,value.userroom,value.formatedDate,value.userpos,value.usercolor,value); 
                canvas.setAttribute('numberofpartners',canvas.getAttribute('numberofpartners')+1);                              
            </handler>  
        </netremotecallhib>        
        <netremotecallhib name="getCurrentModerator" funcname="getCurrentModerator">
            <handler name="ondata" args="value">
				<![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                //Debug.write("getCurrentModerator: ",value,value.username,value.streamid);
				if (value!=null){
					canvas.setAttribute('moderatorationObject',value);
					canvas.setAttribute('moderatorStreamID',value.streamid);
					canvas.setAttribute('moderatorName',value.firstname+' '+value.lastname);
				} else {
					
				}
				//Debug.write("throw event to drawarea: ",canvas.moderatorStreamID);
				if (canvas.ismoderator){
					Debug.write("############## editrecordstream 3");
					new editrecordstream(canvas.main_content._content.inner,{y:-320});
				} else if (value==null){
					//no moderator availible
					//check if this is conferncemodus
					if (this.parent.modus == "confernce"){
						Debug.write("############## editrecordstream 4");
						new editrecordstream(canvas.main_content._content.inner,{y:-320});
					} else {
						// in audience modus you get no notification
						// cause you are not able to register your stream
						// as non moderator
					
					}					
				} else {
					_drawarea.onopenWhiteBoard.sendEvent();
				}
				]]>
            </handler>  
        </netremotecallhib>        
        <netremotecallhib name="newStream" funcname="newStream">
            <handler name="ondata" args="value">
                //The onResult-Handler will be called be the rtmpconnection
                //Debug.write("newStream: ",value);
                canvas._videocontainer.startStream(value.streamid,value.userpos); 
            </handler>   
        </netremotecallhib>    
        <netremotecallhib name="closeStream" funcname="closeStream">
            <handler name="ondata" args="value">
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("closeStream: ",value);
                //free the VideoContainer
                canvas._videocontainer.closeStreamClient(value.streamid,value.userpos); 
                canvas.setAttribute('numberofpartners',canvas.getAttribute('numberofpartners')-1);       
                //TODO:check first current tab
            </handler>   
        </netremotecallhib>       
        <netremotecallhib name="clientregisterRoom" funcname="clientregisterRoom">
            <handler name="ondata" args="value">
                //The onResult-Handler will be called be the rtmpconnection
                //Debug.write("clientregisterRoom: ",value);
                //parent.getClientListScope.doCall();  
            </handler>   
        </netremotecallhib>                 
        <netremotecallhib name="roomDisconnect" funcname="roomDisconnect">
            <handler name="ondata" args="value">
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("roomDisconnect: ",value);
                canvas._videocontainer.disconnectclient(value.streamid,value.userpos); 
				//remove that client from sync list of wmlFileLoader/image if present
				_drawarea.sendCompleteWmlLoadedRClient(value);
				_drawarea.sendCompleteImageLoadedRClient(value);
                if (canvas.currentModApply!=null) canvas.currentModApply.rejectUser(value);
                //parent.getClientListScope.doCall();  
            </handler>   
        </netremotecallhib>     
		<netremotecallhib name="logicalRoomLeaveDis" funcname="logicalRoomLeaveDis" >      
	    	<handler name="ondata" args="value">
	    		Debug.write("logicalRoomLeaveDis: ",value);
	    		canvas._videocontainer.disconnectclient(value.streamid,value.userpos); 
				//remove that client from sync list of wmlFileLoader/image if present
				_drawarea.sendCompleteWmlLoadedRClient(value);
				_drawarea.sendCompleteImageLoadedRClient(value);
	    		if (canvas.currentModApply!=null) canvas.currentModApply.rejectUser(value);
	    	</handler>
	    </netremotecallhib>             
  
        <netremotecallhib name="sendVars" funcname="sendVars">
            <netparam name="vars"><method name="getValue">return canvas.objWhiteboard;</method></netparam>
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                //Debug.write("getValue : ",value);
                
                ]]>
            </handler>   
        </netremotecallhib>    
        <netremotecallhib name="sendVarsToWhiteboard" funcname="sendVarsToWhiteboard">
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("sendVarsToWhiteboard : ",value);
                _drawarea.sendWatchObject(value[2],value[3],false);
                ]]>
            </handler>   
        </netremotecallhib>   
        <netremotecallhib name="setModerator" funcname="setModerator">
            <netparam name="vars"><method name="getValue">return canvas.streamid;</method></netparam>
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write(" onResult setModerator : ",value);					
                ]]>
            </handler>   
        </netremotecallhib>    
        <netremotecallhib name="setNewModerator" funcname="setNewModerator">
            <netparam name="vars"><method name="getValue">return canvas.streamid;</method></netparam>
            <handler name="ondata" args="value">
				<![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("setNewModerator : ",value,value.firstname+' '+value.lastname);
                canvas.setAttribute('moderatorationObject',value);
                canvas.setAttribute('moderatorStreamID',value.streamid);
                canvas.setAttribute('moderatorName',value.firstname+' '+value.lastname);
				//in audience Modus this requires that the new user will be
				//streamed
				if (parent.modus == "audience"){
					canvas._videocontainer.clearAllVideoRefernces();
					if (canvas.ismoderator){
						Debug.write("############## editrecordstream 5");
						new editrecordstream(canvas.main_content._content.inner,{y:-320});
					} else {
						canvas._videocontainer.getClientListScope.doCall();
					}
				}
				]]>
            </handler>   
        </netremotecallhib>       
        <netremotecallhib name="sendMessage" funcname="sendMessage">
            <netparam name="vars"><method name="getValue">return canvas.objMessage;</method></netparam>
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("getValue : ",value);
                
                ]]>
            </handler>   
        </netremotecallhib>    
        <netremotecallhib name="sendVarsToMessage" funcname="sendVarsToMessage">
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("sendVarsToMessage : ",value);
                if (value[0]=='chat'){
                    canvas.addChatHistory(value);
                } else if(value[0]=='fileslist'){
                    _imageslistdraw.parent.oninit.sendEvent();
                }
                ]]>
            </handler>   
        </netremotecallhib>  
        <netremotecallhib name="sendVarsModeratorGeneral" funcname="sendVarsModeratorGeneral">
            <netparam name="vars"><method name="getValue">return canvas.VarsModeratorGeneral;</method></netparam>
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("sendVarsModeratorGeneral : ",value);
                
                ]]>
            </handler>   
        </netremotecallhib>    
        <netremotecallhib name="sendVarsToMessageWithClient" funcname="sendVarsToMessageWithClient" remotecontext="$once{ canvas.thishib }" >  
            <netparam name="vars"><method name="getValue">return parent.parent.applymessage;</method></netparam>
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("sendVarsToMessageWithClient : ",value,value.message,value.message[0],value.client);
                if (value.message[0]=='applyforMod'){
                    //canvas.currentModApply
                    if (canvas.streamid!=value.client.streamid) new responseformoderation(canvas.main_content._content.inner,{userobject:value.client,clientId:value.client.streamid});
                } else if (value.message[0]=='applyModAnswer'){
                    canvas.currentModApply.setUserAnswer(value);
                } else if (value.message[0]=='chat'){
                    canvas.addChatHistory(value.message,value.client);
                } else if (value.message[0]=='whiteboard'){
					if (value.message[1]=='wmlloadcomplete'){
						_drawarea.sendCompleteWmlLoadedRClient(value.client);
					} else if (value.message[1]=='wmlsynccomplete'){
						_drawarea.sendCompleteWmlSync(value.client);
					} else if (value.message[1]=='imageloadcomplete'){
						_drawarea.sendCompleteImageLoadedRClient(value.client);
					} else if (value.message[1]=='imagesynccomplete'){
						_drawarea.sendCompleteImageSync(value.client);
					} else if (value.message[1]=='inituser'){
						//_drawarea.sendCompleteImageSync(value.client);
					    Debug.write("inituser sendVarsToMessageWithClient: ",value.message[2]);
					    if (!canvas.ismoderator) _drawarea.loadwmlObjectToStage(value.message[2],"","","",true,true);
					} else if (value.message[1]=='initgetVars'){
						//_drawarea.sendCompleteImageSync(value.client);
					    Debug.write("initgetVars sendVarsToMessageWithClient: ",value.message[2]);
					    _drawarea.sendWatchObject(value.message[1],value.message[2],false);
					} else if (value.message[1]=='syncinitLoader'){
						//_drawarea.sendCompleteImageSync(value.client);
					    Debug.write("syncinitLoader sendVarsToMessageWithClient: ",value.message[2]);
						if (value.client.streamid!=canvas.streamid) _drawarea.remoteSyncLoader();
					}
                }
                ]]>
            </handler>   
        </netremotecallhib>            
        <netremotecallhib name="createPoll" funcname="dokeosService.createPoll">
            <attribute name="pollquestion" value="" type="string" />
            <attribute name="polltypesid" value="0" type="number" />
            <netparam><method name="getValue">return parent.pollquestion;</method></netparam>
            <netparam><method name="getValue">return parent.polltypesid;</method></netparam>
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("createPoll : ",value);
                ]]>
            </handler>   
        </netremotecallhib>         
        <netremotecallhib name="newPoll" funcname="newPoll">
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called by the rtmpconnection
                Debug.write("newPoll : ",value);
                if(canvas.streamid!=value.createdBy.streamid) new answerpoll(canvas.main_content._content.inner,{createdBy:value.createdBy.username,pollDate:value.pollDate,pollQuestion:value.pollQuestion,pollTypeId:value.pollTypeId,roomPollAnswerList:value.roomPollAnswerList,roomPollId:value.roomPollId,roomScopeName:value.roomScopeName});
                ]]>
            </handler>   
        </netremotecallhib>
        <netremotecallhib name="vote" funcname="dokeosService.vote">
            <attribute name="pollvalue" type="number" value="0" />
            <attribute name="pollTypesId" type="number" value="0" />
            <netparam><method name="getValue">return parent.pollvalue;</method></netparam>
            <netparam><method name="getValue">return parent.pollTypesId;</method></netparam>
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("vote : ",value);
                ]]>
            </handler>   
        </netremotecallhib>      
        <netremotecallhib name="getVotes" funcname="dokeosService.getVotes">
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("getVotes : ",value);
                if (value!=null){
                    new resultpollwin(canvas.main_content._content.inner,{createdBy:value.createdBy.username,pollDate:value.pollDate,pollQuestion:value.pollQuestion,pollTypeId:value.pollTypeId,roomPollAnswerList:value.roomPollAnswerList,roomPollId:value.roomPollId,roomScopeName:value.roomScopeName});
                } else {
                    new messagewin(canvas.main_content._content.inner,{labeliderror:41});
                }
                ]]>
            </handler>   
        </netremotecallhib>     
        <netremotecallhib name="checkHasVoted" funcname="dokeosService.checkHasVoted">
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("checkHasVoted : ",value);
                if (value==1){
                    parent.getPoll.doCall();
                } else if (value==-1){
                    new messagewin(canvas.main_content._content.inner,{labeliderror:31});
                } else if (value==-2){
                    new messagewin(canvas.main_content._content.inner,{labeliderror:41});
                }
                ]]>
            </handler>   
        </netremotecallhib>  
        <netremotecallhib name="getPoll" funcname="dokeosService.getPoll">
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("checkHasVoted : ",value);
                if (value!=null){
                    new answerpoll(canvas.main_content._content.inner,{createdBy:value.createdBy.username,pollDate:value.pollDate,pollQuestion:value.pollQuestion,pollTypeId:value.pollTypeId,roomPollAnswerList:value.roomPollAnswerList,roomPollId:value.roomPollId,roomScopeName:value.roomScopeName});
                }
                ]]>
            </handler>   
        </netremotecallhib>                      
        <netremotecallhib name="getPollTypeList" funcname="dokeosService.getPollTypeList">
            <attribute name="refObj" value="null" />
            <method name="setReferenceObj" args="obj">
                this.refObj = obj;
            </method>
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("getPollTypeList : ",value,this.refObj);
                for (var i=0;i<value.length;i++){
                    this.refObj.addItem(canvas.getLabelName(value[i].pollTypeLabelid),value[i].pollTypesId);
                }
                this.refObj.selectItem(value[0].pollTypesId);
                ]]>
            </handler>   
        </netremotecallhib>                                   
        <netremotecallhib name="sendVarsToModeratorGeneral" funcname="sendVarsToModeratorGeneral">
            <handler name="ondata" args="value">
                <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                Debug.write("sendVarsToWhiteboard : ",value);
                if (value[0]=='sharewhiteinit'){
                    if (!canvas.htmlframeisloaded){         
                        canvas.ifrm.createIFrame();
                        canvas.setAttribute('htmlframeisloaded',true);
                    }
                } else if (value[0]=='sharewhiteside'){
                    if (canvas.htmlframeisloaded){      
                        _htmlside.setText(value[2]);
                        canvas.ifrm.setAttribute('isrc','http://'+value[2]);
                    }
                }
                ]]>
            </handler>   
        </netremotecallhib>       
         
</rtmpconnection>

</library>