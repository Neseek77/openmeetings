<?xml version="1.0" encoding="UTF-8" ?>
<library>

<!-- #################
	Class videocontainer lol
 -->
 
<class name="videocontainer" extends="view" >
	
	<!-- 
		Attribute stores all Initial Streams
	 -->
	<attribute name="streams" value="null" />

	<attribute name="allUsers" value="null" />
  	
	<attribute name="remoteMessage" value="null" />
	<attribute name="currentuserObject" value="null" />
	
	<handler name="oninit">
		canvas.thishib.modus = "conference";
		
		this._video1.usercolor=0x4174B1;
		this._video2.usercolor=0x00CC00;
		this._video3.usercolor=0xFFCC33;
		this._video4.usercolor=0xFF6633;
		
		canvas._videocontainer=this;
		this.allUsers = new Array();
		this.streams = new Array();
		this.initializeStreams();
	</handler>
	
	<method name="addUser" args="objectR">
		this.allUsers.push(objectR);
	</method>
	
	<method name="initializeStreams">
		//Get teachers Streams
		this.currentuserObject = new Array();
		this.currentuserObject.push(canvas.currentuser);
		this.currentuserObject.push(canvas.user_id);
		this.currentuserObject.push(canvas.firstName);
		this.currentuserObject.push(canvas.lastName);
		this.currentuserObject.push(canvas.mail);
		this.currentuserObject.push(canvas.lastLogin);
		this.currentuserObject.push(canvas.official_code);
		this.currentuserObject.push(canvas.picture_uri);
		this.currentuserObject.push(canvas.language);
		
        Debug.write("initializeStreams");
		this.setRoomValues.doCall();
	</method>  

  	<netremotecallhib name="setRoomValues" funcname="setRoomValues" remotecontext="$once{ canvas.thishib }" >   
    	<netparam><method name="getValue">return hib.connectedroom;</method></netparam>	 
    	<netparam><method name="getValue">return hib.currentroomid;</method></netparam>
    	<netparam><method name="getValue">return hib.conferencedomain;</method></netparam>  	
		<handler name="ondata" args="value">
			//The onResult-Handler will be called be the rtmpconnection
			Debug.write("setRoomValues: ",value,hib.connectedroom);
            Debug.write("+++++++++++++++++ getClientListScope : ",value);
            for (var i in value){
            	Debug.write("getClientListScope value: ",value[i]);
            	if (value[i].username!=null){
            		this.parent.addItem(value[i].connectedSince,value[i].isMod,value[i].streamid,value[i].username,value[i].userroom,value[i].formatedDate,value[i].userpos,value[i].usercolor,value[i]);
            	}
            }
            canvas.thishib.getCurrentModerator.doCall(); 
            canvas._mymod.checkForRecording.doCall();
            canvas._chartcontent.doInit();				
		</handler>	
  	</netremotecallhib>

	<!-- invoked if another client logs into the room 
	after choosing devices -->     
    <method name="setAVSettingsToClient" args="userposition,rcl">
    	Debug.write("addNoAVClient ",userposition,rcl);
		if (rcl.avsettings=="n"){
			this.subviews[userposition].setVideouserProfilePic(rcl);
		} else if (rcl.avsettings=="a"){
			this.subviews[userposition].setVideouserProfilePic(rcl);
		}
    	this.subviews[userposition].updateAVSettingsSymbol(rcl);
    </method>    	

	<method name="addItem" args="connectedSince,isMod,streamid,username,userroom,formatedDate,position,color,object">
		<![CDATA[
		////Debug.write("initializeStreams addItem: ",connectedSince,isMod,streamid,username,userroom,formatedDate);
		if (streamid!=canvas.streamid){
            var myvideocontainer = this.getNewVideoObjectByPos(position);
            myvideocontainer.v_output._stream=null;
	  		myvideocontainer.parent.parent.clientVars = object;
	  		myvideocontainer.parent.parent.setAttribute('chatpartnername',object.firstname+' '+object.lastname);
	  		myvideocontainer.parent.parent.setAttribute('uniqueid',streamid);
	  		myvideocontainer.parent.parent.setAttribute('isremote',true);
	  		Debug.write("object.avsettings: ",object.avsettings);
	  		if (object.avsettings=="n"){
    			myvideocontainer.setVideouserProfilePic(object);
    		} else if (object.avsettings=="a"){
    			myvideocontainer.parent.parent.setVideouserProfilePic(object);
    			Debug.warn("start play");
    			myvideocontainer.v_output.play(streamid,-1);	
    		} else {
    			myvideocontainer.v_output.play(streamid,-1);
    			Debug.warn("start play");
    		}
    		myvideocontainer.parent.parent.updateAVSettingsSymbol(object);
	  		return myvideocontainer;
		}
		]]>
	</method>
	
	
	<method name="addClientItem" args="connectedSince,isMod,streamid,username,userroom,formatedDate,position,color,object">
		<![CDATA[
		////Debug.write("initializeStreams addClientItem: ",connectedSince,isMod,streamid,username,userroom,formatedDate);
		if (streamid!=canvas.streamid){
            var myvideocontainer = this.getNewVideoObjectByPos(position);
            myvideocontainer.v_output._stream=null;
	  		myvideocontainer.parent.parent.clientVars = object;
	  		myvideocontainer.parent.parent.setAttribute('chatpartnername',object.firstname+' '+object.lastname);
	  		myvideocontainer.parent.parent.setAttribute('uniqueid',streamid);
	  		myvideocontainer.parent.parent.setAttribute('isremote',true);	
	  		Debug.write("addClientItem avsettings: ",object.avsettings);
    		if (object.avsettings=="n" || object.avsettings=="a"){
    			myvideocontainer.parent.parent.setVideouserProfilePic(value[i]);
    		}
    		myvideocontainer.parent.parent.updateAVSettingsSymbol(object);
		}
		]]>
	</method>
		
	<method name="startStream" args="searchid,userpos">
		////Debug.write("startStream: ",searchid,userpos);
		<![CDATA[
	
			////Debug.write("startStream: ",this.subviews[userpos],searchid,userpos);
			if (this.subviews[userpos].uniqueid == searchid){
				//VideoView with Partner has been found
	            //remove Stream from view
	            ////Debug.write("Found client to startStream");
				this.subviews[userpos]._chatvideoinner._videoview.v_output.play(searchid,-1);
				return this.subviews[userpos].getVideoReference();
			}
			return null;
		]]>
	</method>

	
	<!-- 
		This method returns a free Video-View to show
		a Stream or yourself, if there is no free view 
		availible it will return null
	 -->
	<method name="getNewVideoObject">
		<![CDATA[
			//Get a Free VideoView Slot
			for (var i=0;i<this.subviews.length;i++){
				if (!this.subviews[i].isassigned){
					//A free Slot has been found
					//return the Reference to the VideoView it and mark it as used
					this.subviews[i].setAttribute('isassigned',true);
					canvas.currentusercolor = this.subviews[i].usercolor;
					canvas.currentuserpos = this.subviews[i].userposition;
					this.subviews[i]._chatvideoinner.r.setResourceNumber(canvas.currentuserpos+1);
					this.subviews[i]._chatvideoinner._videoview.setAttribute('visible',true);
					////Debug.write("canvas.currentusercolor : ",canvas.currentusercolor);
					canvas.thishib.setAudienceModus.doCall();
				    this.subviews[i].setAttribute('chatpartnername',hib.userobject.firstname+' '+hib.userobject.lastname);
					return this.subviews[i].getVideoReference();
				}
			}
			return null;
		]]>
	</method>
	<method name="getNewVideoObjectByPos" args="pos">
		<![CDATA[
			//Get a Free VideoView Slot by Position
			////Debug.write("this.subviews[pos]: ",this.subviews,this.subviews[pos],pos);
			if (!this.subviews[pos].isassigned){
				//A free Slot has been found
				//return the Reference to the VideoView it and mark it as used
				this.subviews[pos]._chatvideoinner.r.setResourceNumber(pos+1);
				this.subviews[pos]._chatvideoinner._videoview.setAttribute('visible',true);
				this.subviews[pos].setAttribute('isassigned',true);
				return this.subviews[pos].getVideoReference();
			}
			return null;
		]]>
	</method>
	
	<method name="setSpeakingByPos" args="pos,bool">
		<![CDATA[
			if (bool){
				this.subviews[pos]._loudness.loudness.setAttribute('opacity',1);
			} else {
				this.subviews[pos]._loudness.loudness.setAttribute('opacity',0.2);
			}
		]]>
	</method>	
	
	<!-- 
		Method makes this View free for a new Client
		by the partnerid
		Returns the new free VideoView or null if no VideoView can be found with this partnerid
		@param int partnerid
	 -->
	<method name="closeStreamClient" args="searchid,userpos">
		////Debug.write("closeStreamclient: ",searchid,userpos);
		<![CDATA[
	
			////Debug.write("closeStreamClient: ",this.subviews[userpos],searchid,userpos);
			if (this.subviews[userpos].uniqueid == searchid){
				//VideoView with Partner has been found
	            //remove Stream from view
	            ////Debug.write("Found client to closeStream");
				this.subviews[userpos]._chatvideoinner._videoview.setAttribute('visible',false);
				return this.subviews[userpos].getVideoReference();
			}
			return null;
		]]>
	</method>
	<method name="disconnectclient" args="searchid,userpos">
		////Debug.write("disconnectclient: ",searchid,userpos);
		<![CDATA[
			////Debug.write("disconnectclient: ",this.subviews[userpos],searchid,userpos);
			if (this.subviews[userpos].uniqueid == searchid){
				//VideoView with Partner has been found
	            //mark this view as free
	            ////Debug.write("Found client to disconnect");
				this.subviews[userpos].setAttribute('isassigned',false);
				this.subviews[userpos]._chatvideoinner.r.setResourceNumber(5);
				this.subviews[userpos].resetValues();
				this.subviews[userpos]._chatvideoinner._videoview.setAttribute('visible',false);
				return this.subviews[userpos].getVideoReferenceDis();
			}
			return null;
		]]>
	</method>	

	<videoobject name="_video1" x="0" y="0" userposition="0" />
	
	<videoobject name="_video2" x="134" y="0" userposition="1" />
	
	<videoobject name="_video3" x="0" y="126" userposition="2" />
	
	<videoobject name="_video4" x="134" y="126" userposition="3" />
	
</class>

</library>