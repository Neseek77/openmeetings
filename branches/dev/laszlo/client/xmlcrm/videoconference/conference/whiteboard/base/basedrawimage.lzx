<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="imagefordrawView" extends="image" stretches="both">
	
	<attribute name="downloadurl" value="" type="string" />
		
	<attribute name="alterModus" value="true" type="boolean" />
	
	<attribute name="baseurl" value="" type="string" />
	<attribute name="fileName" value="" type="string" />
	<attribute name="moduleName" value="" type="string" />
	<attribute name="parentPath" value="" type="string" />
	<attribute name="room" value="" type="string" />
	<attribute name="domain" value="" type="string" />
		
	<attribute name="refObj" value="null" />
	<handler name="onload">
		<![CDATA[
			Debug.write("image loaded");
			//this.refObj.parent._loading.setAttribute('visible',false);
			if (this.width>this.refObj.width){
				var height = this.height/(this.width/this.refObj.width)
				this.setAttribute('width',this.refObj.width);
				this.setAttribute('height',height);
				this.setAttribute('x',0);
			}
			if (this.height>this.refObj.height){
				var width = this.width/(this.height/this.refObj.height)
				this.setAttribute('height',this.refObj.height);
				this.setAttribute('width',width);
				this.setAttribute('y',0);
			}	
			if(this.y+this.height>this.refObj.height){
				this.setAttribute('y',0);
			}
			if(this.x+this.width>this.refObj.width){
				this.setAttribute('x',0);
			}		
			//only send syncCommand if alterModus is true (meaning that this is the Moderator)
			//otherwise just send a notification to moderator that this iamge has been loaded
			if (this.alterModus){
				this.refObj.storeTempValsAndLoadSyncList(this);
			} else {
				this.refObj.sendLoadNotificationImage("imageloadcomplete");
			}
			this.refObj.layers.push(this);			
			
			this.oninit.sendEvent();
			this.refObj.parent.isloadedImage.sendEvent(this);
			
			//send notification to wml-loader
			//this is send later then in normal objects cause it needs to be send after the image
			//has been loaded completely
			if (this.refObj.isWmlLoaderImage){
				this.refObj.isWmlLoaderImage=false;
				if (this.refObj.onwmlLoaderSend) this.refObj.onwmlLoaderSend.sendEvent('image');
			}
		]]>
	</handler>
	<handler name="onerror" args="error">
		<![CDATA[
		Debug.write("onerror "+error);
			//only send syncCommand if alterModus is true (meaning that this is the Moderator)
			//otherwise just send a notification to moderator that this iamge has been loaded
			if (this.alterModus){
				this.refObj.storeTempValsAndLoadSyncList(this);
			} else {
				this.refObj.sendLoadNotificationImage("imageloaderror");
			}
			this.refObj.layers.push(this);			
			
			this.oninit.sendEvent();
			this.refObj.parent.isloadedImage.sendEvent(this);
			
			//send notification to wml-loader
			//this is send later then in normal objects cause it needs to be send after the image
			//has been loaded completely
			if (this.refObj.isWmlLoaderImage){
				this.refObj.isWmlLoaderImage=false;
				if (this.refObj.onwmlLoaderSend) this.refObj.onwmlLoaderSend.sendEvent('image');
			}
		]]>
	</handler>
	<handler name="ontimeout" args="error">
		<![CDATA[
		Debug.write("ontimeout "+error);
			//only send syncCommand if alterModus is true (meaning that this is the Moderator)
			//otherwise just send a notification to moderator that this iamge has been loaded
			if (this.alterModus){
				this.refObj.storeTempValsAndLoadSyncList(this);
			} else {
				this.refObj.sendLoadNotificationImage("imageloadtimeout");
			}
			this.refObj.layers.push(this);			
			
			this.oninit.sendEvent();
			this.refObj.parent.isloadedImage.sendEvent(this);
			
			//send notification to wml-loader
			//this is send later then in normal objects cause it needs to be send after the image
			//has been loaded completely
			if (this.refObj.isWmlLoaderImage){
				this.refObj.isWmlLoaderImage=false;
				if (this.refObj.onwmlLoaderSend) this.refObj.onwmlLoaderSend.sendEvent('image');
			}
		]]>
	</handler>	
</class>
    
<class name="imageforScreenViewer" extends="image" stretches="both" x="0" y="0">
	
	<attribute name="downloadurl" value="" type="string" />
		
	<attribute name="alterModus" value="true" type="boolean" />
	
	<attribute name="baseurl" value="" type="string" />
	<attribute name="fileName" value="" type="string" />
	<attribute name="moduleName" value="" type="string" />
	<attribute name="parentPath" value="" type="string" />
	<attribute name="room" value="" type="string" />
	<attribute name="domain" value="" type="string" />
    
    <attribute name="username" value="" type="string" />
		
	<attribute name="refObj" value="null" />
	<handler name="onload">
        this.refObj.layers.push(this);	
        this.refObj.isScreenImageLoading=false;
        this.refObj.toggleVisibleScreenSharing();
	</handler>
	<handler name="onerror" args="error">
        this.refObj.toggleVisibleScreenSharing();
	</handler>
	<handler name="ontimeout" args="error">
        this.refObj.toggleVisibleScreenSharing();
	</handler>	
    
</class>
    

<class name="basedrawimage" extends="basedrawletter">
	
	<!-- attribute shows if this image is loaded as part of a wml-file-object
		if true it will send a onwmlLoaderSend message and NO extra loading bar
		if false it will show a loading abr for that image
	-->
	<attribute name="isWmlLoaderImage" value="false" type="boolean" />
    
    <!-- indicates if this client is still loading an old image for the screenViwer -->
    <attribute name="isScreenImageLoading" value="false" type="boolean" />
    <attribute name="screenImageRefNumber" value="1" type="number" />
    <attribute name="screenImageRef1" value="null" />
    <attribute name="screenImageRef2" value="null" />
	
	<!-- reference to the current loading bar -->
	<attribute name="loadimageDataWinRef" value="null" />
	
	<!-- labelid of the message seen while waiting for loading -->
	<attribute name="imageLoadMessageId" value="208" type="number" />
	
	<!-- labelid of the message seen while waiting for syncing -->
	<attribute name="imageSyncMessageId" value="209" type="number" />
	<attribute name="imageSyncMessageText" value="" type="string" />
	
	<!-- syncing process -->
	<attribute name="syncImageCheckTime" value="1000" type="number" />
	<attribute name="_loadingUsersImageList" value="null" />
	<attribute name="loadingUsersImageListIndex" value="0" type="number" />
	<attribute name="syncImageRefObj" value="null" />
	<attribute name="imageLoadingCompleteMessage" value="null" />
	<attribute name="loadImageObjectTimer" value="null" />
    
    <handler name="setNewScreenUserName" args="val" />
  	
  	<method name="addNewImage" args="urlname,posx,posy,baseurl,fileName,moduleName,parentPath,room,domain">
  		this.addImageToLayer(this,'image'+this.getCounter(),urlname,posx,posy,0,0,true,baseurl,fileName,moduleName,parentPath,room,domain);
  	</method>
  	
	<!--
		alterModus => this is added by the mod not remotely
	 -->
  	<method name="addImageToLayer" args="obj,nameing,urlname,posx,posy,width,height,alterModus,baseurl,fileName,moduleName,parentPath,room,domain">
        <![CDATA[
		//only show if it is not part of wml-file-object
		if (!this.isWmlLoaderImage) {
			this.loadimageDataWinRef = new loadwhiteboardwindow(canvas.main_content._content.inner,{refObj:this});
			this.loadimageDataWinRef.setMessage(canvas.getLabelName(this.imageLoadMessageId));
		}
		var src = baseurl+'?fileName='+fileName+'&moduleName='+moduleName+'&parentPath='+parentPath+'&room='+room+'&domain='+domain+'&sid='+canvas.sessionId;
        Debug.write("src: ");    
        Debug.write(src); 
        Debug.write("src: "); 
  		if (alterModus){
			this.currentlayer = new imagefordrawView(obj,{src:src,refObj:this,name:nameing,x:posx,y:posy,downloadurl:urlname,alterModus:alterModus,baseurl:baseurl,fileName:fileName,moduleName:moduleName,parentPath:parentPath,room:room,domain:domain});
		} else {
			this.currentlayer = new imagefordrawView(obj,{src:src,refObj:this,name:nameing,x:posx,y:posy,downloadurl:urlname,width:width,height:height,alterModus:alterModus,baseurl:baseurl,fileName:fileName,moduleName:moduleName,parentPath:parentPath,room:room,domain:domain});
		}
		this.parent.isloadingImage.sendEvent(this.currentlayer);
		//this.parent._loading.setAttribute('visible',true);
		//Add Layer to global Layer  	
	    return this.currentlayer;
		]]>
  	</method>
    
  	<method name="incomingScreenSharing" args="value">
        <![CDATA[
		//only do if last image has been loading successfully
            if (!this.isScreenImageLoading){
                this.isScreenImageLoading = true;
                var downloadurl = 'http://'+canvas.rtmphostlocal+':'+canvas.red5httpport+'/xmlcrm/ScreenViewHandler?'
                    +'fileName='+value.fileName
                    +'&room='+hib.connectedroom
                    +'&domain='+hib.conferencedomain
                    +'&sid='+canvas.sessionId;
            
                Debug.write("incomingScreenSharing URL: ",downloadurl);
                if (this.screenImageRefNumber==1){
                    this.screenImageRef1 = new imageforScreenViewer(this,{visible:false,src:downloadurl,refObj:this,name:'screen1',x:0,y:0,downloadurl:downloadurl});
                    this.screenImageRefNumber = 2;
                } else if (this.screenImageRefNumber==2){
                    this.screenImageRef2 = new imageforScreenViewer(this,{visible:false,src:downloadurl,refObj:this,name:'screen2',x:0,y:0,downloadurl:downloadurl});
                    this.screenImageRefNumber = 1;
                }
                this.setNewScreenUserName.sendEvent('Screen of User: '+value.user.firstname+','+value.user.lastname);
            } else {
                Debug.write("frame dropped!");
                Debug.warn("frame dropped!");
                new errorpopup(canvas,{error:canvas.getLabelName(240)});
            }
		]]>
  	</method>   
    
    <method name="toggleVisibleScreenSharing">
        if (this.screenImageRefNumber==1){
            if (this.screenImageRef1) this.screenImageRef1.destroy();
            this.screenImageRef2.setAttribute('visible',true);
        } else if (this.screenImageRefNumber==2){
            this.screenImageRef1.setAttribute('visible',true);
            if (this.screenImageRef2) this.screenImageRef2.destroy();
        }
        this.isScreenImageLoading = false;
    </method> 
	
	<!--
		actionObject => attributes neccessary for loading image
		refObj = drawarea
		isWmlLoader => (true)is loaded as part of wml-object
		
		-->
  	<method name="addImageToLayerHistory" args="actionObject,refObj,isWmlLoader">
		this.isWmlLoaderImage = isWmlLoader;
  		this.addImageToLayer(refObj,actionObject[actionObject.length-1],actionObject[1],actionObject[actionObject.length-5],actionObject[actionObject.length-4],actionObject[actionObject.length-3],actionObject[actionObject.length-2],false,actionObject[2],actionObject[3],actionObject[4],actionObject[5],actionObject[6],actionObject[7]);
  	</method>
  	
  	<method name="registerNewImage" args="urlname,posx,posy,width,height,baseurl,fileName,moduleName,parentPath,room,domain">
		var actionObject = new Array();
	    actionObject.push('image');
	    actionObject.push(urlname);
		actionObject.push(baseurl);
		actionObject.push(fileName);
		actionObject.push(moduleName);
		actionObject.push(parentPath);
		actionObject.push(room);
		actionObject.push(domain);
		actionObject.push(this.counter);
	    actionObject.push(posx);
	    actionObject.push(posy);
	    actionObject.push(width);
	    actionObject.push(height);
	    actionObject.push(this.currentlayer.name);
	    this.baseactionobjectList.push(actionObject);	
	    this.checkStepLayers();
	    this.onsharedMessage('draw',actionObject);	
  	</method>
		
	
	<method name="storeTempValsAndLoadSyncList" args="objRef">
		this.syncImageRefObj = objRef;
		this.getImageClientListScope.doCall();
	</method>
	
	<method name="sendLoadNotificationImage" args="message" >
		this.imageLoadingCompleteMessage = new Array();
		this.imageLoadingCompleteMessage[0] = "whiteboard";
		this.imageLoadingCompleteMessage[1] = message; //"imageloadcomplete"
		this.sendMessageWithClientImage.doCall();
	</method>
	
	<!-- sending messages/notifications of sync process -->
	<netremotecallhib name="sendMessageWithClientImage" funcname="sendMessageWithClient" remotecontext="$once{ canvas.thishib }" >   
		<netparam name="vars"><method name="getValue">return parent.parent.imageLoadingCompleteMessage;</method></netparam>
		<handler name="ondata" args="value">
			<![CDATA[
			//The onResult-Handler will be called be the rtmpconnection
			Debug.write("getValue : ",value);
			
			]]>
		</handler>   
	</netremotecallhib> 		
	
	<!-- get list of clients before loading image cause
		we have to show the sync process
		-->
    <netremotecallhib name="getImageClientListScope" funcname="getClientListScope" remotecontext="$once{ canvas.thishib }" >          
        <handler name="ondata" args="value">
        	<![CDATA[
				//The onResult-Handler will be called by the rtmpconnection
				Debug.write("getClientListScope Instance: ",value);
				parent._loadingUsersImageList = new Array();
				for (var eg in value){
					if (canvas.streamid != value[eg].streamid){
						Debug.write("parent._loadingUsersImageList value eg ",eg,value[eg]);
						parent._loadingUsersImageList.push(value[eg]);
					}
				}
				this.parent.imageSyncMessageText = canvas.getLabelName(this.parent.imageSyncMessageId);
				//now send notifications to connected clients
				this.parent.setAttribute('drawmodus','image');
				this.parent.registerNewImage(this.parent.syncImageRefObj.src,this.parent.syncImageRefObj.x,this.parent.syncImageRefObj.y,this.parent.syncImageRefObj.width,this.parent.syncImageRefObj.height,this.parent.syncImageRefObj.baseurl,this.parent.syncImageRefObj.fileName,this.parent.syncImageRefObj.moduleName,this.parent.syncImageRefObj.parentPath,this.parent.syncImageRefObj.room,this.parent.syncImageRefObj.domain);
				//set modus to hand so users can directly select that image
				this.parent.setModus('hand');	
				this.parent.startImgaesyncCheck();			
            ]]>
        </handler>   
    </netremotecallhib>
	
	<!-- after loading the objects check if all connected clients of that conference
		have loaded the file completely, check it every 1 seconds -->
	<method name="startImgaesyncCheck">
		<![CDATA[
			if (this._loadingUsersImageList.length==0){
				this.sendSyncNotificationImage();
			} else {
				var txt = this.imageSyncMessageText+' '+this._loadingUsersImageList.length;
				this.loadimageDataWinRef.setMessage(txt);
				this.loadImageObjectTimer = new LzDelegate( this, "startImgaesyncCheck" );
				LzTimer.addTimer( this.loadImageObjectTimer, this.syncImageCheckTime );
			}
		]]>
	</method>	

	<method name="sendSyncNotificationImage">
		this.imageLoadingCompleteMessage = new Array();
		this.imageLoadingCompleteMessage[0] = "whiteboard";
		this.imageLoadingCompleteMessage[1] = "imagesynccomplete";
		this.sendMessageWithClientImage.doCall();
	</method>	

	<!-- invoked by remote client once he has completely loaded the wml-file 
		remote client is waiting/still shows loading window untill all clients have 
		completely loaded the object/moderator sends "synccomplete" message -->
	<method name="sendCompleteImageLoadedRClient" args="client">
		<![CDATA[
			//detect self messageing
			if (client.streamid!=canvas.streamid){
				//remove client from sync list
				for (var i=0;i<this._loadingUsersImageList.length;i++){
					if (this._loadingUsersImageList[i].streamid==client.streamid){
						Debug.write("deleteing client from list: ",this._loadingUsersImageList[i].streamid);
						this._loadingUsersImageList.splice(i,1);
					}
				}
			}
		]]>
	</method>
	
	<!-- invoked remotely by Moderator
		all clients have succeed in loading the image
		loading win can be closed
		Alert: This notification will be send from Moderator and received by ALL clients INCLUDING
		the moderator, so the moderator needs no extra command *close* for loading bar cause he
		gets its own *sync* complete nofification
		 -->	
	<method name="sendCompleteImageSync" args="client">
		Debug.write("sendCompleteImageSync ",client);
		this.loadimageDataWinRef.close();
	</method>
	
</class>

</library>