<?xml version="1.0" encoding="UTF-8" ?>
<library>
    
<class name="SWFResourceView" extends="view" 
    clip="true">
    
    <attribute name="refObj" value="null" />
	<attribute name="alterModus" value="true" type="boolean" />
	
	<attribute name="baseurl" value="" type="string" />
	<attribute name="fileName" value="" type="string" />
	<attribute name="moduleName" value="" type="string" />
	<attribute name="parentPath" value="" type="string" />
	<attribute name="room" value="" type="string" />
	<attribute name="domain" value="" type="string" />    
    <attribute name="slideNumber" value="0" type="number" /> 
    
    <attribute name="currentzoomFactor" value="100" type="number" />
    
    <attribute name="typeOfObject" value="swf" type="string" />
    
    <view name="_swfView" play="false" stretches="both">
        <handler name="onframe" args="i">
            Debug.write("onframe",i);
        </handler>
        
        <handler name="onplay" args="i">
            Debug.write("onplay",i);
        </handler>
        
        <handler name="onstop" args="i">
            Debug.write("onstop",i);
        </handler>
        
        <handler name="onload">
            <![CDATA[
                Debug.write("onload: ",this);
                Debug.write("onload: ",this.stop);
                this.stop();
                this.setAttribute('play',false);             
                Debug.write("swf loaded");

                //only send syncCommand if alterModus is true (meaning that this is the Moderator)
                //otherwise just send a notification to moderator that this iamge has been loaded
                if (this.parent.alterModus){
                    this.parent.refObj.storeTempValsAndLoadSyncListSWF(this.parent);
                    this.parent.refObj.doShowObjectBounds(this.parent.name);
                } else {
                    this.parent.refObj.sendLoadNotificationSWF("swfloadcomplete");
                }
                this.parent.refObj.layers.push(this.parent);			
                
                this.oninit.sendEvent();
                this.parent.refObj.parent.parent.isloadedImage.sendEvent(this);
                
                //send notification to wml-loader
                //this is send later then in normal objects cause it needs to be send after the image
                //has been loaded completely
                if (this.parent.refObj.isWmlLoaderImage){
                    this.parent.refObj.isWmlLoaderImage=false;
                    if (this.parent.refObj.onwmlLoaderSend) this.parent.refObj.onwmlLoaderSend.sendEvent('swf');
                }
            ]]>
        </handler>
        <handler name="onerror" args="error">
            <![CDATA[
            Debug.write("onerror "+error);
                //only send syncCommand if alterModus is true (meaning that this is the Moderator)
                //otherwise just send a notification to moderator that this iamge has been loaded
                if (this.parent.alterModus){
                    this.parent.refObj.storeTempValsAndLoadSyncListSWF(this.parent);
                } else {
                    this.parent.refObj.sendLoadNotificationSWF("swfloaderror");
                }
                this.parent.refObj.layers.push(this.parent);			
                
                this.oninit.sendEvent();
                this.parent.refObj.parent.parent.isloadedImage.sendEvent(this.parent);
                
                //send notification to wml-loader
                //this is send later then in normal objects cause it needs to be send after the image
                //has been loaded completely
                if (this.parent.refObj.isWmlLoaderImage){
                    this.parent.refObj.isWmlLoaderImage=false;
                    if (this.parent.refObj.onwmlLoaderSend) this.parent.refObj.onwmlLoaderSend.sendEvent('swf');
                }
            ]]>
        </handler>
        <handler name="ontimeout" args="error">
            <![CDATA[
            Debug.write("ontimeout "+error);
                //only send syncCommand if alterModus is true (meaning that this is the Moderator)
                //otherwise just send a notification to moderator that this iamge has been loaded
                if (this.parent.alterModus){
                    this.parent.refObj.storeTempValsAndLoadSyncListSWF(this.parent);
                } else {
                    this.parent.refObj.sendLoadNotificationSWF("swfloadtimeout");
                }
                this.parent.refObj.layers.push(this.parent);			
                
                this.oninit.sendEvent();
                this.parent.refObj.parent.parent.isloadedImage.sendEvent(this.parent);
                
                //send notification to wml-loader
                //this is send later then in normal objects cause it needs to be send after the image
                //has been loaded completely
                if (this.parent.refObj.isWmlLoaderImage){
                    this.parent.refObj.isWmlLoaderImage=false;
                    if (this.parent.refObj.onwmlLoaderSend) this.parent.refObj.onwmlLoaderSend.sendEvent('swf');
                }
            ]]>
        </handler> 
    </view>    
        
</class>

<class name="basedrawobject" extends="basedraw">
    
    <!-- it uses some of the attribute's defined in basedrawimage -->
    
    <attribute name="zoomfactor" value="1.2" type="number" />
    
    <!-- Loads a SWFPresenation to the whiteboard -->
    <method name="loadSWFPresentation" args="url,fileName,moduleName,parentPath,room,domain,slideNumber">
        this.addPresentationToLayer(this,url,'swfpresentationobject'+this.getCounter(),0,0,0,0,true,url,fileName,moduleName,parentPath,room,domain,slideNumber);
    </method>
    
	<!--
		alterModus => this is added by the mod not remotely
	 -->
  	<method name="addPresentationToLayer" args="obj,urlName,nameing,posx,posy,width,height,alterModus,baseurl,fileName,moduleName,parentPath,room,domain,slideNumber">
        <![CDATA[
            Debug.write(obj,nameing,posx,posy,width,height,alterModus,baseurl,fileName,moduleName,parentPath,room,domain,slideNumber);
            //only show if it is not part of wml-file-object
            if (!this.isWmlLoaderImage) {
                this.loadimageDataWinRef = new loadwhiteboardwindow(canvas.main_content._content.inner,{refObj:this});
                this.loadimageDataWinRef.setMessage(canvas.getLabelName(this.imageLoadMessageId));
            }
            var downloadurl = 'http://'+canvas.rtmphostlocal+':'+canvas.red5httpport+'/xmlcrm/DownloadHandler?' +
                    'fileName=' + fileName +
                    '&moduleName=' + moduleName + 
                    '&parentPath=' + parentPath +
                    '&room='+room + 
                    '&domain='+domain + 
                    '&sid='+canvas.sessionId;
            var width= this.width;
            var height = this.height;
            Debug.write("width:height: ",width,height);
            if (alterModus){
                this.currentlayer = new SWFResourceView(obj,{refObj:this,name:nameing,x:posx,y:posy,alterModus:alterModus,baseurl:baseurl,fileName:fileName,moduleName:moduleName,parentPath:parentPath,room:room,domain:domain,slideNumber:slideNumber,width:width,height:height});
            } else {
                this.currentlayer = new SWFResourceView(obj,{refObj:this,name:nameing,x:posx,y:posy,alterModus:alterModus,baseurl:baseurl,fileName:fileName,moduleName:moduleName,parentPath:parentPath,room:room,domain:domain,slideNumber:slideNumber,width:width,height:height});
            }
            this.parent.parent.isloadingImage.sendEvent(this.currentlayer);
            Debug.write("downloadurl. ",downloadurl);
            this.currentlayer._swfView.setSource(downloadurl);
    
            Debug.write(this.currentlayer);
            //this.parent.parent.isloadingImage.sendEvent(this.currentlayer);
            //this.parent._loading.setAttribute('visible',true);
            //Add Layer to global Layer  	
            return this.currentlayer;
		]]>
  	</method>
    
  	<method name="addSWFToLayerHistory" args="actionObject,refObj,isWmlLoader">
		this.isWmlLoaderImage = isWmlLoader;
  		this.addPresentationToLayer(refObj,actionObject[actionObject.length-1],actionObject[1],actionObject[actionObject.length-5],actionObject[actionObject.length-4],actionObject[actionObject.length-3],actionObject[actionObject.length-2],false,actionObject[2],actionObject[3],actionObject[4],actionObject[5],actionObject[6],actionObject[7],actionObject[8]);
  	</method>
  	
  	<method name="registerNewSWF" args="urlname,posx,posy,width,height,baseurl,fileName,moduleName,parentPath,room,domain,slideNumber">
		var actionObject = new Array();
	    actionObject.push('swf');
	    actionObject.push(urlname);
		actionObject.push(baseurl);
		actionObject.push(fileName);
		actionObject.push(moduleName);
		actionObject.push(parentPath);
		actionObject.push(room);
		actionObject.push(domain);
        actionObject.push(slideNumber);
		actionObject.push(this.counter);
	    actionObject.push(posx);
	    actionObject.push(posy);
	    actionObject.push(width);
	    actionObject.push(height);
	    actionObject.push(this.currentlayer.name);
	    this.baseactionobjectList.push(actionObject);	
	    this.checkStepLayers();
	    this.onsharedMessage('draw',actionObject);	
  	</method>    
    
	
	<method name="storeTempValsAndLoadSyncListSWF" args="objRef">
		this.syncImageRefObj = objRef;
		this.getSWFClientListScope.doCall();
	</method>    
    
	<method name="sendLoadNotificationSWF" args="message" >
		this.imageLoadingCompleteMessage = new Array();
		this.imageLoadingCompleteMessage[0] = "whiteboard";
		this.imageLoadingCompleteMessage[1] = message; //"imageloadcomplete"
		this.sendMessageWithClientSWF.doCall();
	</method>
	
	<!-- sending messages/notifications of sync process -->
	<netremotecallhib name="sendMessageWithClientSWF" funcname="sendMessageWithClient" remotecontext="$once{ canvas.thishib }" >   
		<netparam name="vars"><method name="getValue">return parent.parent.imageLoadingCompleteMessage;</method></netparam>
		<handler name="ondata" args="value">
			<![CDATA[
			//The onResult-Handler will be called be the rtmpconnection
			Debug.write("getValue : ",value);
			
			]]>
		</handler>   
	</netremotecallhib>     
    
	<!-- get list of clients before loading image cause
		we have to show the sync process
		-->
    <netremotecallhib name="getSWFClientListScope" funcname="getClientListScope" remotecontext="$once{ canvas.thishib }" >          
        <handler name="ondata" args="value">
        	<![CDATA[
				//The onResult-Handler will be called by the rtmpconnection
				Debug.write("getSWFClientListScope Instance: ",value);
				parent._loadingUsersImageList = new Array();
				for (var eg in value){
					if (canvas.streamid != value[eg].streamid){
						Debug.write("parent._loadingUsersImageList value eg ",eg,value[eg]);
						parent._loadingUsersImageList.push(value[eg]);
					}
				}
				this.parent.imageSyncMessageText = canvas.getLabelName(this.parent.imageSyncMessageId);
				//now send notifications to connected clients
				this.parent.setAttribute('drawmodus','hand');
                
				this.parent.registerNewSWF(this.parent.syncImageRefObj.baseurl,this.parent.syncImageRefObj.x,
                        this.parent.syncImageRefObj.y,this.parent.syncImageRefObj._swfView.width,
                        this.parent.syncImageRefObj._swfView.height,this.parent.syncImageRefObj.baseurl,
                        this.parent.syncImageRefObj.fileName,this.parent.syncImageRefObj.moduleName,
                        this.parent.syncImageRefObj.parentPath,this.parent.syncImageRefObj.room,
                        this.parent.syncImageRefObj.domain,this.parent.syncImageRefObj.slideNumber);
                
				//set modus to hand so users can directly select that image
				this.parent.setModus('swf');	
				this.parent.startSWFsyncCheck();			
            ]]>
        </handler>   
    </netremotecallhib>
	
	<!-- after loading the objects check if all connected clients of that conference
		have loaded the file completely, check it every 1 seconds -->
	<method name="startSWFsyncCheck">
		<![CDATA[
			if (this._loadingUsersImageList.length==0){
				this.sendSyncNotificationSWF();
			} else {
				var txt = this.imageSyncMessageText+' '+this._loadingUsersImageList.length;
				this.loadimageDataWinRef.setMessage(txt);
				this.loadImageObjectTimer = new LzDelegate( this, "startImgaesyncCheck" );
				LzTimer.addTimer( this.loadImageObjectTimer, this.syncImageCheckTime );
			}
		]]>
	</method>	

	<method name="sendSyncNotificationSWF">
		this.imageLoadingCompleteMessage = new Array();
		this.imageLoadingCompleteMessage[0] = "whiteboard";
		this.imageLoadingCompleteMessage[1] = "swfsynccomplete";
		this.sendMessageWithClientSWF.doCall();
	</method>	

	<!-- invoked by remote client once he has completely loaded the wml-file 
		remote client is waiting/still shows loading window untill all clients have 
		completely loaded the object/moderator sends "synccomplete" message -->
	<method name="sendCompleteSWFLoadedRClient" args="client">
		<![CDATA[
			//detect self messageing
			if (client.streamid!=canvas.streamid){
				//remove client from sync list
				for (var i=0;i<this._loadingUsersImageList.length;i++){
					if (this._loadingUsersImageList[i].streamid==client.streamid){
						Debug.write("deleteing client from list: ",this._loadingUsersImageList[i].streamid);
						this._loadingUsersImageList.splice(i,1);
					}
				}
			}
		]]>
	</method>
	
	<!-- invoked remotely by Moderator
		all clients have succeed in loading the image
		loading win can be closed
		Alert: This notification will be send from Moderator and received by ALL clients INCLUDING
		the moderator, so the moderator needs no extra command *close* for loading bar cause he
		gets its own *sync* complete nofification
		 -->	
	<method name="sendCompleteSWFSync" args="client">
		Debug.write("sendCompleteSWFSync ",client);
		this.loadimageDataWinRef.close();
	</method>  
    
    
    <!-- Document actions
        this.ObjectByName is set by the method doShowObjectBounds of basedraw and holds a reference to
        the currently selected object on the whiteboard
     -->
    <method name="doDocumentAction" args="action">
        <![CDATA[
            if (this.ObjectByName.typeOfObject=="swf") {
                if (action=="doc_first"){
                    this.ObjectByName._swfView.setAttribute('frame',1);
                } else if (action=="doc_pre"){
                    if (this.ObjectByName._swfView.frame>1){
                        this.ObjectByName._swfView.setAttribute('frame',(this.ObjectByName._swfView.frame-1));
                    }
                } else if (action=="doc_next"){
                    if (this.ObjectByName._swfView.frame<this.ObjectByName._swfView.totalframes){
                        this.ObjectByName._swfView.setAttribute('frame',(this.ObjectByName._swfView.frame+1));
                    }
                } else if (action=="doc_next"){
                    this.ObjectByName._swfView.setAttribute('frame',(this.ObjectByName._swfView.totalframes));
                } else if (action=="doc_zoom_minus"){
                    var newwidth = (this.ObjectByName._swfView.width/this.zoomfactor);
                    var newheight = (this.ObjectByName._swfView.height/this.zoomfactor);
                    this.ObjectByName._swfView.setAttribute('width',newwidth);
                    this.ObjectByName._swfView.setAttribute('height',newheight);
                    this.boundingref.doSetInnerObjectsBounds(newwidth,newheight);
                    this.ObjectByName.currentzoomFactor=this.ObjectByName.currentzoomFactor/this.zoomfactor;
                } else if (action=="doc_zoom_plus"){
                    var newwidth = (this.ObjectByName._swfView.width*this.zoomfactor);
                    var newheight = (this.ObjectByName._swfView.height*this.zoomfactor);            
                    this.ObjectByName._swfView.setAttribute('width',newwidth);
                    this.ObjectByName._swfView.setAttribute('height',newheight);
                    this.boundingref.doSetInnerObjectsBounds(newwidth,newheight);
                    this.ObjectByName.currentzoomFactor=this.ObjectByName.currentzoomFactor*this.zoomfactor;
                }
                this.doUpdateDocumentToolBar();
            }
        ]]>
    </method>
    
    <method name="doUpdateDocumentToolBar">
        this.parent.parent._documentmenu._currentSlideNo.setText(this.ObjectByName._swfView.frame);
        this.parent.parent._documentmenu._totalSlideNo.setText(this.ObjectByName._swfView.totalframes);
        this.parent.parent._documentmenu._zoom.setText(this.ObjectByName.currentzoomFactor);
    </method>   

</class>

</library>