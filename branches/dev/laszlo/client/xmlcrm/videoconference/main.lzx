<?xml version="1.0" encoding="UTF-8" ?>
<canvas debug="false" width="100%" height="100%" >
    
<!-- these properties will be overwritten by config.xml
    
     -->  
    
<!-- URL/IP to use for the Server 192.168.178.28 
inno02.fh-pforzheim.de macbook 192.168.2.103
192.168.2.102 bxlug.homelinux.org 213.219.160.72
    if this value is empty it will try to connect to the 
    domain-name it has been loading from
    -->
<attribute name="rtmphostlocal" value="" type="string" />
 
<!--  
Port to use for the Server
To this port the default server lookup is done

You can find all this configuraiton in your red5-Config in: $RED5_HOME/conf/red5.properties
 -->
<attribute name="rmptport" value="1935" type="string" />

<!-- 
Port to use for the Server
To this port the fallback is done once the default rtmport failed
this should workaround 99% of all firewalls
 -->
<attribute name="rmptTunnelport" value="8088" type="string" />

<!-- 
Port to use for the Server
This port is used to connec to the http-servlet
of the red5-servlet
 -->
<attribute name="red5httpport" value="5080" type="string" />
	
<!--
	These colors are the main colors and style the hole application
 -->
<attribute name="basebgcolorizer" value="0xB0C4DE" type="string" />	
<attribute name="baseMousecolorizer" value="0xC4D5E6" type="string" />	
<attribute name="baseMouseOvercolorizer" value="0xC4D5E6" type="string" />  	
	
<!-- 
	Version number of this distro
 -->
<attribute name="currentappversion" value="Version 0.5 Beta5" type="string" />

<silverstyle name="defaultstyle" isdefault="true" basecolor="${ canvas.basebgcolorizer }"
	canvascolor="white" />
	
<splash>
	<view center="true" ratio="1" resource="splash.swf"/>
</splash>

<include href="incubator/lzcombobox.lzx" />
<include href="incubator/shadowbox.lzx" /> 

<resource name="loudness" src="resources/loudness.swf" />

<include href="oslmon/" /> 
<include href="resources/" />
<include href="conference/" /> 
<include href="xmlcrm/" /> 


<!-- main colors:
264269
 -->
  


<attribute name="chathistory" value="null" />
<attribute name="userHistory" value="null" />
<attribute name="browserTabHistory" value="null" />

<resource name="configure_vidrsc" src="resources/configure.png" />

<resource name="mainbackroundmenu_rsc" src="resources/mainbackroundmenu.png" />

<!-- Value's will be overwritten by config.xml -->
<!-- Name of the Application -->
<attribute name="currentappname" value="OpenMeetings" type="string" />    
<attribute name="currentappnameurl" value="OpenMeetings" type="string" />    
<attribute name="currentappnamebugurl" value="OpenMeetings" type="string" />  

<!-- Video Settings -->
<attribute name="loadnessAcitviation" value="10" type="number" /> 
        
<!-- URL/IP to use for the Server -->
<attribute name="rmpthost" value="" type="string" />

<!-- Username/Nickname -->
<attribute name="currentuser" value="" type="string" />

<!-- Roomname internaly Scope -->
<attribute name="currentcourse" value="" type="string" />

<!-- Roomname/Coursename -->
<attribute name="currentcourseName" value="" type="string" />

<!-- 
    The Reference for a Streaming Object
    This should be removed later when the OpenLaszlo API handles
    the broadcast better
    -swagner
 -->
<attribute name="_nc" value="null" />
	
<attribute name="vaquality" value="best" type="string" />
	
<attribute name="moderatorStreamID" value="" type="string" />
<attribute name="moderatorationObject" value="" type="string" />
<attribute name="moderatorName" type="string" setter="this.setModeratorName(moderatorName)" />

<attribute name="ismoderator" value="false" type="boolean" />

<attribute name="loadingmessage" value="" type="string" />
<!-- 
	The state of the Application
	At the beginning you should choose how many users are allowed to
	login simultaniously
 -->
<attribute name="islogedin" value="false" type="boolean" />
   
<attribute name="htmlframeisloaded" value="false" type="boolean" />
<attribute name="createIFrameDone_attr" value="false" type="boolean" />


<attribute name="uploadmoduleppt" value="videoconf1ppt" type="string" />
<attribute name="uploadmoduleimg" value="videoconf1" type="string" />
<attribute name="foldersequence" value="null" />
<attribute name="uploadmoduleimgfolder" value="" type="string" />
<!-- 
	Can be either 2 or 4
	But theoretically there is no limit
 -->
<attribute name="numberofallowedpartners" value="0" type="number" />

<!-- Number of currently connected Users -->
<attribute name="numberofpartners" value="0" type="number" />

<!-- unique ID of this Stream -->
<attribute name="streamid" value="0" type="string" />

<!-- id of the current Mod in this room -->
<attribute name="currentmodid" value="0" type="string" />

<attribute name="currentlanguage" value="english" type="string" />

<attribute name="objWhiteboard" value="null" />
<attribute name="objMessage" value="null" />
<attribute name="VarsModeratorGeneral" value="null" />

<attribute name="isConference" value="false" type="boolean" />

<attribute name="statesInitValues" value="null" />
<attribute name="salutationsInitValues" value="null" />
<attribute name="roomTypesInitValues" value="null" />

<!-- Username of current user -->
<attribute name="currentusename" value="defaultname" type="string" />
<attribute name="user_id" value="0" type="string" />
<attribute name="firstName" value="" type="string" />
<attribute name="lastName" value="" type="string" />
<attribute name="mail" value="" type="string" />
<attribute name="lastLogin" value="" type="string" />
<attribute name="official_code" value="" type="string" />
<attribute name="picture_uri" value="" type="string" />
<attribute name="language" value="" type="string" />

<!-- User porperties -->
<attribute name="currentusercolor" value="0" type="number" />
<attribute name="currentuserpos" value="0" type="number" />
	
<attribute name="currentModApply" value="null" />	

<attribute name="sessionObject" value="null" />
<attribute name="sessionId" value="" type="string" />
	
<!-- attributes for direct room access -->
<attribute name="initroomid" value="" type="string" />
<attribute name="initroomtype" value="" type="string" />
<attribute name="initdomainid" value="" type="string" />
<attribute name="initlangid" value="1" type="number" />
<attribute name="isinitRoomDirect" value="false" type="boolean" />
	
<attribute name="isResetUsername" value="false" type="boolean" />
<attribute name="resetHash" value="" type="string" />
    
<attribute name="naviHeight" value="110" type="number" />    
<attribute name="naviHeightDelta" value="110" type="number" />    

<!-- 
Holds a refernce to the current VideoCOntainer Object
containing the VideoViews
 -->
<attribute name="_videocontainer" value="null" />
    
<attribute name="isrtl" value="false" type="boolean" />    
    
<handler name="oninit">
	//this.setAttribute('framerate',20);
    var cmenu = new LzContextMenu();
    canvas.setDefaultContextMenu(cmenu);
    cmenu.hideBuiltInItems();

    // Add Custom Items:

    //var item1 = cmenu.makeMenuItem('MedCast', new LzDelegate(this,"openMeetingsMenuItemHandler"));
    //cmenu.addItem(item1);

    Debug.write("oninit: ",this);
</handler>
    
<method name="openMeetingsMenuItemHandler">
    LzBrowser.loadURL("http://code.google.com/p/openmeetings/", "Openmeetings Homepage");  
</method>    
    
    
<dataset type="http" name="myConfigSet" src="config.xml" request="true"
    ondata="canvas.myinit()" />
			
<method name="myinit">
	<![CDATA[
        
    this.setAttribute('rtmphostlocal',canvas.myConfigSet.getPointer().xpathQuery('config/rtmphostlocal/text()'));   
    this.setAttribute('rmptport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rmptport/text()')));  
    this.setAttribute('rmptTunnelport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rmptTunnelport/text()')));  
    this.setAttribute('red5httpport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/red5httpport/text()')));  
    this.setAttribute('basebgcolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/basebgcolorizer/text()'));  
    this.setAttribute('baseMousecolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/baseMousecolorizer/text()'));  
    this.setAttribute('baseMouseOvercolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/baseMouseOvercolorizer/text()'));  
    this.setAttribute('currentappversion',canvas.myConfigSet.getPointer().xpathQuery('config/currentappversion/text()'));  
    this.setAttribute('currentappname',canvas.myConfigSet.getPointer().xpathQuery('config/currentappname/text()'));  
    this.setAttribute('currentappnameurl',canvas.myConfigSet.getPointer().xpathQuery('config/currentappnameurl/text()'));  
    this.setAttribute('currentappnamebugurl',canvas.myConfigSet.getPointer().xpathQuery('config/currentappnamebugurl/text()'));
    this.setAttribute('loadnessAcitviation',canvas.myConfigSet.getPointer().xpathQuery('config/loadnessAcitviation/text()'));

    mainBaseText.setText(canvas.currentappname);
    mainBaseText.setShadow();
    mainBaseTextLabel.setAttribute('text',canvas.currentappnameurl);  
        
	this.chathistory=new Array();
	
	var doubleSlash = _url.indexOf("//");
    var isNotPort80 = _url.indexOf(":", doubleSlash+2);
    //Debug.write("isNotPort80: ",isNotPort80);
    if (isNotPort80!=-1){
        //Debug.write("isNotPort80: ",doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2);
        var server = _url.substr(doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2); 
    } else {
        var server = _url.substr(doubleSlash+2, _url.indexOf("/", doubleSlash+2)-doubleSlash-2); 
    }
	
	//Debug.write("this zielnr: ",this,server);
	
	this.setAttribute('rmpthost',server);
        
    if (this.rtmphostlocal.length==0){
        this.setAttribute('rtmphostlocal',server);
    }
	
	//Check for Invitation
	var domain = LzBrowser.getInitArg('domain');
	var room = LzBrowser.getInitArg('room');
	var roomtype = LzBrowser.getInitArg('roomtype');
	var emailGuest = LzBrowser.getInitArg('email');
		
	//Debug.write("domain: ",domain);

	if (domain!=undefined && room!=undefined && roomtype!=undefined && emailGuest != undefined){
		canvas.initroomid = room;
		canvas.initroomtype = roomtype;
		canvas.initdomainid = domain;
		canvas.isinitRoomDirect = true;
		canvas.firstName = emailGuest;
		canvas.mail = emailGuest;

	}
		
	//check for reset password
	var hash = LzBrowser.getInitArg('hash');
		
	if (hash!=undefined){
		canvas.isResetUsername = true;
		canvas.resetHash = hash;		
	}
	
	//Debug.write("rtmphostlocal,rmpthost: ",canvas.rtmphostlocal,canvas.rmpthost);	

    var src = 'rtmp://'+canvas.rtmphostlocal+':'+canvas.rmptport+'/xmlcrm/hibernate';
    canvas.thishib.setAttribute('src',src);
    canvas.thishib.loaderVar = new autoloader(canvas);
    canvas.thishib.loaderVar.src.setText(src);
    canvas.thishib.connect();
	]]>
</method>

<method name="getLabelName" args="id">
	return getLabelNameXMLCRM(id);
</method>

<!-- 
    Into this view alle Windows will be loaded
 -->
<view name="main_content" y="${ canvas.naviHeightDelta }" width="${canvas.width}" 
    height="${canvas.height-canvas.naviHeightDelta}" >
    <view x="0" name="_content" layout="axis:y;spacing:2">
        <view name="inner" />
        
        <method name="clearAll">
            Debug.write("clearAll this.inner: ",this.inner,this.inner.subviews.length);
            for (var eg in this.inner.subviews){
                Debug.write("clearAll this.inner.subviews: ",this.inner.subviews[eg]);
                return this.inner.subviews[eg].close();                
            }
        </method>
    </view>
    <vscrollbar />
</view>  
  
<!-- 
	Navigation
 -->

<view name="_mainbgcontentNavi" y="0" x="0" bgcolor="${ canvas.basebgcolorizer }" clip="true"
    width="100%" height="$once{ canvas.naviHeight }" >
    <text id="mainBaseText" x="10" y="10"
        fgcolor="white" fontsize="20" fontstyle="bold">
        <method name="setShadow" >
            <![CDATA[
            if (this.isinited){
                this.normalMC = this.getMCRef();
                   this.displacementMap = new flash.filters.DropShadowFilter();
                this.normalMC.filters = [this.displacementMap];
            }
            ]]>              
        </method> 
        <handler name="onclick">
            LzBrowser.loadURL(canvas.currentappnameurl,"_blank");
        </handler>  
        <labeltooltip id="mainBaseTextLabel" />      
    </text>
    <handler name="oninit">
        var cmenu = new LzContextMenu();
        this.setContextMenu(cmenu);
        cmenu.hideBuiltInItems();
    </handler>     
</view>

<view name="_conferencemenu" y="0" x="0" height="20" width="100%" 
    bgcolor="${ canvas.basebgcolorizer }" visibility="hidden" /> 
    
<view name="_loadingAll" visible="false" opacity="0.5" 
    width="${ canvas.width }" height="${ canvas.height }" 
    bgcolor="0xFFFFFF" clickable="true" >
    <text align="right" y="56" fontsize="14" fgcolor="red">Loading...</text>
</view>
    
    
</canvas>