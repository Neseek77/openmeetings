<?xml version="1.0" encoding="UTF-8" ?>
<library>
    
<class name="participentList" extends="view"  width="$once{ parent.width }" height="${ parent.height-22 }" 
       bgcolor="$once{ canvas.basebgcolorizer }" y="22">
    <!-- clip="true" -->
    
    <attribute name="sortType" value="alphabetical" type="string" />    
    
    <view width="$once{ parent.width-2 }" height="${ parent.height-2 }" 
        x="1" y="1" bgcolor="white" />

    <method name="addItem" args="object">
        <![CDATA[
            if ($debug) Debug.write("participentList addItem: ",object,object.publicSID);
            
            for (var i=0;i<this._table.innerList.subviews.length;i++) {
                if (this._table.innerList.subviews[i].refObj.publicSID == object.publicSID) {
                    //if ($debug) Debug.warn("Already on List, do not add twice");
                    return;
                }
            }
            
            var lastname = object.lastname;
            
            if ($debug) Debug.write("object.isSuperModerator ",object.isSuperModerator);
            
            if (object.isSuperModerator) {
                lastname += " *";
            }
            
            new lz.participentListItem(this._table.innerList,{
                    user_id:object.user_id,
                    isSuperModerator:object.isSuperModerator,
                    firstname:object.firstname,
                    lastname:lastname,
                    width:this.width-17,
                    refObj:object,
                    connectedSince:object.connectedSince,
                    isMod:object.isMod,
                    streamid:object.streamid,
                    username:object.username,
                    formatedDate:object.formatedDate
                });
            
            this.sortUserList();
        ]]>
    </method>
    
    <method name="sortUserList">
        <![CDATA[ 
        
            if (this.sortType == "alphabetical") {
                function sortByName(a,b) {
                   
                    if(a.firstname.toLowerCase() < b.firstname.toLowerCase()) return -1;
                    else if(a.firstname.toLowerCase() > b.firstname.toLowerCase()) return 1;
                    else return 0;
                
                }
            
                this._table.innerList.subviews.sort(sortByStreamId);
                this._table.innerList._layout.subviews.sort(sortByStreamId);
            } else {
                function sortByStreamId(a,b) {
                   
                    if(Number(a.streamid) == Number(b.streamid)) return 0;
                    else if(Number(a.streamid) > Number(b.streamid)) return 1;
                    else return -1;
                
                }
            
                this._table.innerList.subviews.sort(sortByStreamId);
                this._table.innerList._layout.subviews.sort(sortByStreamId);
            }
            
            this._table.innerList._layout.update();  
        ]]>
    </method>    
    
    <method name="clearList">
        this._table.destroy();
        new lz.participentsTable(this,{name:'_table'});
    </method>
    
    <!--- get a Objects List Item
        @param string publicSID publicSID
     -->
    <method name="getVideoObjectByPublicSID" args="publicSID">
        <![CDATA[
            //if ($debug) Debug.write("getVideoObjectByPublicSid SEARCH: ",publicSID);
            
            //for (var i=0;i<this._videoviewcontent.subviews.length;i++){
            //  if ($debug) Debug.write("getVideoObjectByBroadCastId6 broadcastId: ",this._videoviewcontent.subviews[i].broadcastId);
            //  if ($debug) Debug.write("getVideoObjectByBroadCastId7 streamid,user_id: ",this._videoviewcontent.subviews[i].clientVars.streamid,this._videoviewcontent.subviews[i].clientVars.user_id);
            //}
            
            for (var i=0;i<this._table.innerList.subviews.length;i++){
                //if ($debug) Debug.write("getVideoObjectByBroadCastId2 broadcastId VIEW: ",this._videoviewcontent.subviews[i].broadcastId);
                //if ($debug) Debug.write("getVideoObjectByBroadCastId3 broadcastId SEARCH: ",broadcastId);
                //if ($debug) Debug.write("getVideoObjectByBroadCastId4 obj: ",this._videoviewcontent.subviews[i]);
                //if ($debug) Debug.write("getVideoObjectByBroadCastId5 streamid,user_id: ",this._videoviewcontent.subviews[i].clientVars.streamid,this._videoviewcontent.subviews[i].clientVars.user_id);
                if (this._table.innerList.subviews[i].refObj.publicSID==publicSID){
                    return this._table.innerList.subviews[i];
                }
            }
            
            return null;
            
        ]]>
    </method>
    
    <participentsTable name="_table" y="20" /> 

    <view name="_miniIcons" x="132" y="0" height="18">
        
        <view width="1" height="${ parent.parent.height }" x="0"
            bgcolor="$once{ canvas.basebgcolorizer }" />
        <view name="_icon_mod" x="2" y="3" resource="participents_isMod_rsc" onclick="" showhandcursor="false">
            <labelTooltip labelid="608" />
        </view>
        
        <view width="1" height="${ parent.parent.height }" x="20"
            bgcolor="$once{ canvas.basebgcolorizer }" />
        <view name="_icon_draw" x="22" y="3" resource="participents_isDrawing_rsc" onclick="" showhandcursor="false">
            <labelTooltip labelid="609" />
        </view>
        
        <view width="1" height="${ parent.parent.height }" x="40"
            bgcolor="$once{ canvas.basebgcolorizer }" />
        <view name="_icon_share" x="42" y="3" resource="screen_allow_rsc" onclick="" showhandcursor="false">
            <labelTooltip labelid="1073" />
        </view>
        
        <view width="1" height="${ parent.parent.height }" x="60"
            bgcolor="$once{ canvas.basebgcolorizer }" />
        <view name="_icon_remote" x="62" y="3" resource="remote_allow_rsc" onclick="" showhandcursor="false">
            <labelTooltip labelid="1084" />
        </view>
        
        <view width="1" height="${ parent.parent.height }" x="80"
            bgcolor="$once{ canvas.basebgcolorizer }" />
        <view name="_icon_sync" x="82" y="3" resource="av_allow_rsc" onclick="" showhandcursor="false">
            <labelTooltip labelid="610" />
        </view>
        
        <view width="1" height="${ parent.parent.height }" x="122"
            bgcolor="$once{ canvas.basebgcolorizer }" />
    </view>
    <view name="headerDivisionLine" width="${ parent.width }" 
          bgcolor="$once{ canvas.basebgcolorizer }" height="1" y="20" />
    
</class>

<class name="innerlistViewParticipentsTable" extends="view" 
    width="258" bgcolor="$once{ canvas.basebgcolorizer }" >
	<simplelayout name="_layout" axis="y" spacing="0" />
</class>
    
<class name="participentsTable" extends="view" height="${ parent.height-20 }" 
    bgcolor="0xFFFFFF" x="2" y="6" clip="true" width="$once{ parent.width-4 }" >
        <innerlistViewParticipentsTable name="innerList" />
    <vscrollbar />
</class>

<class name="miniIcons" extends="view" stretches="both">
    <handler name="onmouseover">
    	if (this.showhandcursor) {
        	this.setAttribute("x",this.x-1);
        	this.setAttribute("y",this.y-1);
        	this.setAttribute("height",this.height+2);
        	this.setAttribute("width",this.width+2);
    	}
        parent.parent.onmouseover.sendEvent();
    </handler>
    <handler name="onmouseout">
    	if (this.showhandcursor) {
        	this.setAttribute("x",this.x+1);
            this.setAttribute("y",this.y+1);
            this.setAttribute("height",this.height-2);
            this.setAttribute("width",this.width-2);
    	}
        parent.parent.onmouseout.sendEvent();
    </handler>
</class>
    
<!-- 
    The Width of each item is set in the participentList-Class
 -->
<class name="participentListItem" extends="view" bgcolor="0xFFFFFF" height="40" 
       showhandcursor="false">
    
    <attribute name="connectedSince" value="" type="string" />
    <attribute name="isMod" value="" type="string" />
    <attribute name="streamid" value="" type="string" />
    <attribute name="username" value="" type="string" />
    <attribute name="userroom" value="" type="string" />
    <attribute name="formatedDate" value="" type="string" />
    <attribute name="firstname" value="" type="string" />
    <attribute name="lastname" value="" type="string" />
    <attribute name="user_id" value="0" type="number" />
    <attribute name="isSuperModerator" value="false" type="boolean"/>
    <attribute name="refObj" value="null" />
    
    <!--
    var downloadurl = 'http://'+canvas.rtmphostlocal+':'+canvas.red5httpport
                    +canvas.httpRootKey+'DownloadHandler?fileName=CHAT'
                    +'&moduleName=chat&parentPath=&room_id='
                    +'&remoteUserid='+this.user_id
                    +'&sid='+canvas.sessionId;
     -->
     
    <handler name="oninit">
        <![CDATA[
            //this._userpic.setAttribute('src',downloadurl); 
            //This is a workaround cause in LPS-4.2.x immediatelly loading does not work
            lz.Timer.addTimer( new LzDelegate( this, "fadeText" ), 1000 );
                    
            if (canvas.publicSID == this.refObj.publicSID) {
                this._firstName.setAttribute("fontstyle","bold");
                this._lastName.setAttribute("fontstyle","bold");
                
                this._miniIcons._mute.setAttribute("visibility","hidden");
                
            }
            
            this.updateIcons();
        ]]>
    </handler>
    
    <method name="fadeText" args="ignore=null"> 
        <![CDATA[
        
        	if ($debug) Debug.write("fadeText :1: ",this.refObj);
        	if ($debug) Debug.write("fadeText :2: ",this.refObj.picture_uri);
        
        	if (this.refObj.picture_uri.startsWith("http")) {
        		var downloadurl = this.refObj.picture_uri;
            //Do Load the Custom Moodle Profilee Picture
        	} else if (this.refObj.externalUserId >= 1 && this.refObj.externalUserType == "moodle") {
                
                if (this.refObj.externalUserId == 1) {
                    //Means it is a guest
                    var downloadurl = canvas.moodleWwwRoot+"/pix/u/f2.png";
                } else {
                    var downloadurl = canvas.moodleWwwRoot+"/user/pix.php/"+ this.refObj.externalUserId +"/f2.jpg";
                }
                
            } else {
        
                var downloadurl = 'http://'+canvas.rtmphostlocal+':'+canvas.red5httpport
                        +canvas.httpRootKey+'DownloadHandler?fileName=CHAT'
                        +'&moduleName=chat&parentPath=&room_id='
                        +'&remoteUserid='+this.user_id
                        +'&sid='+canvas.sessionId;
                        
            }
            
            if ($debug) Debug.warn("downloadurl :3: ",downloadurl);
            
            this._userpic.setAttribute('src',downloadurl); 
            
        ]]>          
    </method>
    
    <!--
        if (canvas.moderatorStreamID == this.refObj.streamid) {
            this.isMod = true;
        } else {
            this.isMod = false;
        }
     -->
    <handler name="onismoderator" reference="canvas" args="m">
        if ($debug) Debug.write("###### ismoderator ",m);
        <![CDATA[
            this.isMod = canvas.getIsModeratorByPublicSID(this.refObj.publicSID);
            this.updateIcons();
        ]]>
    </handler>
    
    <handler name="ondrawAllowStatus" reference="canvas" args="drawObject">
        <![CDATA[
            if (this.refObj.publicSID == drawObject.publicSID) {
                this.refObj.canDraw = drawObject.canDraw;
                this.refObj.canShare = drawObject.canShare;
                this.refObj.canRemote = drawObject.canRemote;
                this.updateIcons();
            }
        ]]>
    </handler>
    
    <!--
        Set actions to update the User-Rights and Information what he can do
     -->
    <method name="updateIcons">
        <![CDATA[
        
            if ($debug) Debug.write("updateByMod,",this.isMod,canvas.streamid);
        
            //If this is one Mod he can also draw on the Whitboard
            if (this.isMod) {
                
                
                this._miniIcons._isMod.setAttribute("visibility","visible");
                this._miniIcons._isModAddbutton.setAttribute("visibility","hidden");
                this._miniIcons._canDraw.setAttribute("visibility","visible");
                //the moderator can never remove the right to draw on the whiteboard for himself
                this._miniIcons._canDraw.setAttribute("showhandcursor",false);
                this._miniIcons._canDraw._text.setAttribute("text","");
                this._miniIcons._canDrawModerator.setAttribute("visibility","hidden");
                
                this._miniIcons._allowShare.setAttribute("visibility","visible");
                this._miniIcons._allowShare.setAttribute("showhandcursor",false);
                this._miniIcons._allowShare._text.setAttribute("text","");
                this._miniIcons._denyShare.setAttribute("visibility","hidden");
                
                this._miniIcons._allowRemote.setAttribute("visibility","visible");
                this._miniIcons._allowRemote.setAttribute("showhandcursor",false);
                this._miniIcons._allowRemote._text.setAttribute("text","");
                this._miniIcons._denyRemote.setAttribute("visibility","hidden");
                
                if (canvas.ismoderator) {
                	this._x._kickUser.setAttribute("visibility","visible");
                    if (canvas.ismoderator && canvas.publicSID != this.refObj.publicSID) {
                        this._miniIcons._isMod.setAttribute("showhandcursor",true);
                        this._miniIcons._isMod._text.setAttribute("text",canvas.getLabelName(675));
                    } else {
                        this._miniIcons._isMod._text.setAttribute("text","");
                        this._miniIcons._isMod.setAttribute("showhandcursor",false);
                    }
                } else {
                	this._x._kickUser.setAttribute("visibility","hidden");
                    this._miniIcons._isMod._text.setAttribute("text","");
                    this._miniIcons._isMod.setAttribute("showhandcursor",false);
                }
                
            } else {
                this._miniIcons._isMod.setAttribute("visibility","hidden");
                    
                //if this User is the Moderator he can grant access to whiteboard to anybody
                if (canvas.ismoderator) {
                    
                	this._x._kickUser.setAttribute("visibility","visible");
                    this._miniIcons._isModAddbutton.setAttribute("visibility","visible");
                    
                    if (this.refObj.canDraw) {
                        
                        //Only in THIS case you can remove the Draw-to-whiteboard right 
                        this._miniIcons._canDraw.setAttribute("visibility","visible");
                        this._miniIcons._canDraw.setAttribute("showhandcursor",true);
                        this._miniIcons._canDraw._text.setAttribute("text",canvas.getLabelName(612));
                        
                        this._miniIcons._canDrawModerator.setAttribute("visibility","hidden");
                    } else {
                        this._miniIcons._canDraw.setAttribute("visibility","hidden");
                        this._miniIcons._canDraw.setAttribute("showhandcursor",false);
                        this._miniIcons._canDraw._text.setAttribute("text","");
                        this._miniIcons._canDrawModerator.setAttribute("visibility","visible");
                        
                    }
                    
                    if (this.refObj.canShare) {
                    	this._miniIcons._allowShare.setAttribute("visibility","visible");
                        this._miniIcons._allowShare.setAttribute("showhandcursor",true);
                        this._miniIcons._allowShare._text.setAttribute("text",canvas.getLabelName(1069));
                        this._miniIcons._denyShare.setAttribute("visibility","hidden");
                    } else {
                    	this._miniIcons._allowShare.setAttribute("visibility","hidden");
                        this._miniIcons._allowShare.setAttribute("showhandcursor",false);
                        this._miniIcons._allowShare._text.setAttribute("text",canvas.getLabelName(1068));
                        this._miniIcons._denyShare.setAttribute("visibility","visible");
                    }
                    
                    if (this.refObj.canRemote) {
                    	this._miniIcons._allowRemote.setAttribute("visibility","visible");
                        this._miniIcons._allowRemote.setAttribute("showhandcursor",true);
                        this._miniIcons._allowRemote._text.setAttribute("text",canvas.getLabelName(1083));
                        this._miniIcons._denyRemote.setAttribute("visibility","hidden");
                    } else {
                    	this._miniIcons._allowRemote.setAttribute("visibility","hidden");
                        this._miniIcons._allowRemote.setAttribute("showhandcursor",false);
                        this._miniIcons._allowRemote._text.setAttribute("text",canvas.getLabelName(1079));
                        this._miniIcons._denyRemote.setAttribute("visibility","visible");
                    }
                    
                } else {
                    
                	this._x._kickUser.setAttribute("visibility","hidden");
                    this._miniIcons._isModAddbutton.setAttribute("visibility","hidden");
                    
                    if (this.refObj.canDraw) {
                        this._miniIcons._canDraw.setAttribute("visibility","visible");
                    } else {
                        this._miniIcons._canDraw.setAttribute("visibility","hidden");
                    }
                    
                    if (this.refObj.canShare) {
                        this._miniIcons._allowShare.setAttribute("visibility","visible");
                    } else {
                        this._miniIcons._allowShare.setAttribute("visibility","hidden");
                    }
                    
                    if (this.refObj.canRemote) {
                        this._miniIcons._allowRemote.setAttribute("visibility","visible");
                    } else {
                        this._miniIcons._allowRemote.setAttribute("visibility","hidden");
                    }
                    
                    //No Update action available
                    this._miniIcons._canDrawModerator.setAttribute("visibility","hidden");
                    this._miniIcons._denyShare.setAttribute("visibility","hidden");
                    this._miniIcons._denyRemote.setAttribute("visibility","hidden");
                    this._miniIcons._canDraw.setAttribute("showhandcursor",false);
                    this._miniIcons._canDraw._text.setAttribute("text","");
                    this._miniIcons._allowRemote._text.setAttribute("text","");
                    this._miniIcons._allowShare._text.setAttribute("text","");
                    
                }
                    
            }
            
            //this Icon is only available in case its the current User 
            if (canvas.publicSID == this.refObj.publicSID) {
                //if ($debug) Debug.write("IS SELF !!!!!!");
                this._miniIcons._restartDevice.setAttribute("visibility","visible");
            } else {
                this._miniIcons._restartDevice.setAttribute("visibility","hidden");
            }
        ]]>
    </method>
    
    <!--
    public Boolean setCanDraw(String SID, String publicSID, boolean canDraw)
     -->
     
    <netRemoteCallHib name="setCanDraw" funcname="whiteboardservice.setCanDraw"
                       remotecontext="$once{ canvas.thishib }">
        <netparam><method name="getValue"> return canvas.sessionId;</method></netparam>
        <netparam><method name="getValue">return parent.parent.refObj.publicSID;</method></netparam>
        <netparam><method name="getValue">return !parent.parent.refObj.canDraw;</method></netparam>
        <handler name="ondata" args="value">
            <![CDATA[
            //The onResult-Handler will be called be the rtmpconnection
            //Debug.write("sendVarsModeratorGeneral : ",value);
            
            ]]>
        </handler>   
    </netRemoteCallHib>  
            
    <netRemoteCallHib name="setCanShare" funcname="whiteboardservice.setCanShare"
                       remotecontext="$once{ canvas.thishib }">
        <netparam><method name="getValue"> return canvas.sessionId;</method></netparam>
        <netparam><method name="getValue">return parent.parent.refObj.publicSID;</method></netparam>
        <netparam><method name="getValue">return !parent.parent.refObj.canShare;</method></netparam>
        <handler name="ondata" args="value">
            <![CDATA[
            //The onResult-Handler will be called be the rtmpconnection
            //Debug.write("sendVarsModeratorGeneral : ",value);
            
            ]]>
        </handler>   
    </netRemoteCallHib> 
    
    <netRemoteCallHib name="setCanRemote" funcname="whiteboardservice.setCanRemote"
                   remotecontext="$once{ canvas.thishib }">
        <attribute name="publicSID" value="" type="string" />
        <attribute name="canRemote" value="true" type="boolean" />
        <netparam><method name="getValue">return canvas.sessionId;</method></netparam>
        <netparam><method name="getValue">return parent.parent.refObj.publicSID;</method></netparam>
        <netparam><method name="getValue">return !parent.parent.refObj.canRemote;</method></netparam>
        <handler name="ondata" args="value">
            <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                if ($debug) Debug.write("setCanRemote : ",value);
            ]]>
        </handler>   
    </netRemoteCallHib>     
            
    <handler name="onmouseover">
        this.setAttribute('bgcolor',canvas.baseMousecolorizer);
    </handler>
    
    <handler name="onmouseout">
        this.setAttribute('bgcolor',0xFFFFFF);
    </handler>
    
    <image name="_userpic" stretches="both">
        <handler name="onload">
            <![CDATA[
                if (this.height > 38) {
                    //If bigger then containter then scale it
                    var width = this.width/(this.height/38);
                    this.setAttribute('height',38);
                    this.setAttribute('width',width);
                }
            ]]>
        </handler>
    </image>
    
    <labelText name="_firstName" fontsize="10" x="40" text="$once{ parent.firstname }" />
    <labelText name="_lastName" fontsize="10" x="40" y="20" text="$once{ parent.lastname }" />
    
    <view name="_x" x="132" y="2">
	    <miniIcons name="_kickUser" width="16" height="16" x="100"
	               resource="kick_user_rsc" showhandcursor="true">
	        <handler name="onclick">
	        	
	        	if (parent.parent.refObj.publicSID == canvas.publicSID) {
	                new lz.labelerrorPopup(canvas.main_content._content.inner,{
	                            errorlabelid:1214
	                        });
	                return;
	            }
	                
	        	if (parent.isSuperModerator) {
	                new lz.labelerrorPopup(canvas.main_content._content.inner,{errorlabelid:1217});
	                return;
	            }
	        	
	            if ($debug) Debug.write("USER Kick: ",parent.parent.refObj.publicSID);
	            new lz.confirmationSingle(canvas.main_content._content.inner,{
	                                           labelid:1216,labeliderror:1215,
	                                           refObj:this,showCheckBox:false});
	            
	        </handler>
	        
	        <method name="sendConfirmation" args="yesno" >
	            this.kickUserByPublicSID.publicSID = parent.parent.refObj.publicSID;
	            this.kickUserByPublicSID.doCall();
	        </method>
	        
	        <netRemoteCallHib name="kickUserByPublicSID" funcname="userservice.kickUserByPublicSID" 
	                          remotecontext="$once{ canvas.thishib }" >    
	            <attribute name="publicSID" value="" type="string" />  
	            <netparam><method name="getValue"> return canvas.sessionId; </method></netparam>
	            <netparam><method name="getValue"> return parent.publicSID; </method></netparam>
	            <handler name="ondata" args="value">
	                if ($debug) Debug.write("kickUserByPublicSID: ",value);
	                //this.parent.destroy();
	            </handler>
	        </netRemoteCallHib> 
	        
	        <labelTooltip labelid="1213" />
	    </miniIcons>   
    </view>
    
    <view name="_miniIcons" x="133" y="22" height="18">
        
        <miniIcons name="_isMod" x="0" width="16" resource="participents_isactive" 
                   height="16" showhandcursor="false">
            <handler name="onclick">
                <![CDATA[
                
                    if (parent.parent.isSuperModerator) {
                        new lz.labelerrorPopup(canvas.main_content._content.inner,{errorlabelid:838});
                        return;
                    }
                
                    //if the label is set and this is a Moderator then this user should
                    //allow the click event => the click event will trigger
                    //this user away from beeing able to draw on the whiteboard
                    if (canvas.ismoderator && this._text.text.length != 0) {
                        //Do it 
                        if ($debug) Debug.write("Do Remove It");
                        hib.removeModerator.publicSIDOfNewModerator = parent.parent.refObj.publicSID;
                        hib.removeModerator.doCall();
                        //parent.parent.setCanDraw.doCall();
                    }
                ]]>
            </handler>
            <labelTooltip name="_text" text="" />
        </miniIcons>
        
        <miniIcons name="_isModAddbutton" opacity="0.5" x="0" width="16" resource="participents_isactive" 
                   height="16" showhandcursor="true">
            <handler name="onclick">
                <![CDATA[
                    //if the label is set and this is a Moderator then this user should
                    //allow the click event => the click event will trigger
                    //this user away from beeing able to draw on the whiteboard
                    if (canvas.ismoderator && this._text.text.length != 0) {
                        //Do it 
                        if ($debug) Debug.write("Do Add It");
                        hib.addModerator.publicSIDOfNewModerator = parent.parent.refObj.publicSID;
                        hib.addModerator.doCall();
                        //parent.parent.setCanDraw.doCall();
                    }
                ]]>
            </handler>
            <labelTooltip name="_text" labelid="676" />
        </miniIcons>
            
        <miniIcons name="_canDraw" x="20" width="16" resource="participents_isactive" 
                   height="16" showhandcursor="false" >
            <handler name="onclick">
                <![CDATA[
                    //if the label is set and this is a Moderator then this user should
                    //allow the click event => the click event will trigger
                    //this user away from beeing able to draw on the whiteboard
                    if (canvas.ismoderator && this._text.text.length != 0) {
                        //Do it 
                        if ($debug) Debug.write("Do add draw to it");
                        parent.parent.setCanDraw.doCall();
                    }
                ]]>
            </handler>
            <labelTooltip name="_text" text="" />
        </miniIcons>
        
        <miniIcons name="_canDrawModerator" x="20" width="16" opacity="0.5"
                   resource="participents_isactive" height="16" showhandcursor="true">
            <handler name="onclick">
                //Do it 
                if ($debug) Debug.write("Do it");
                parent.parent.setCanDraw.doCall();
            </handler>
            <labelTooltip labelid="611" />
        </miniIcons>
        
        <miniIcons name="_allowShare" x="40" width="16" resource="participents_isactive" 
                   height="16" showhandcursor="false" >
            <handler name="onclick">
                <![CDATA[
                    //if the label is set and this is a Moderator then this user should
                    //allow the click event => the click event will trigger
                    //this user away from beeing able to draw on the whiteboard
                    if (canvas.ismoderator && this._text.text.length != 0) {
                        //Do it 
                        if ($debug) Debug.write("Do add draw to it");
                        parent.parent.setCanShare.doCall();
                    }
                ]]>
            </handler>
            <labelTooltip name="_text" text="" labelid="1068" />
        </miniIcons>
        
        <miniIcons name="_denyShare" x="40" width="16" opacity="0.5"
                   resource="participents_isactive" height="16" showhandcursor="true">
            <handler name="onclick">
                //Do it 
                if ($debug) Debug.write("Do it");
                parent.parent.setCanShare.doCall();
            </handler>
            <labelTooltip labelid="1067" />
        </miniIcons>
        
        
        <miniIcons name="_allowRemote" x="60" width="16" resource="participents_isactive" 
                   height="16" showhandcursor="false" >
            <handler name="onclick">
                <![CDATA[
                    //if the label is set and this is a Moderator then this user should
                    //allow the click event => the click event will trigger
                    //this user away from beeing able to draw on the whiteboard
                    if (canvas.ismoderator && this._text.text.length != 0) {
                        //Do it 
                        if ($debug) Debug.write("Do add draw to it");
                        parent.parent.setCanRemote.doCall();
                    }
                ]]>
            </handler>
            <labelTooltip name="_text" text="" labelid="1079" />
        </miniIcons>
        
        <miniIcons name="_denyRemote" x="60" width="16" opacity="0.5"
                   resource="participents_isactive" height="16" showhandcursor="true">
            <handler name="onclick">
                //Do it 
                if ($debug) Debug.write("Do it");
                parent.parent.setCanRemote.doCall();
            </handler>
            <labelTooltip labelid="1078" />
        </miniIcons>
        
        
        <miniIcons name="_restartDevice" x="80" width="16" height="16" resource="resyncuser_rsc" showhandcursor="true">
            <handler name="onclick">
                if ($debug) Debug.write("parent.parent.refObj.publicSID: ",parent.parent.refObj.publicSID);
                var myvideocontainer = canvas._videocontainer.getNewVideoObject(parent.parent.refObj.publicSID);
                myvideocontainer.resetValues();
                new lz.editRecordStream(canvas.main_content._content.inner,{isSyncUpdate:true});
            </handler>
            <labelTooltip labelid="610" />
        </miniIcons>
        
        <view name="_loudness" x="100" >
            <view x="0" y="0" name="loudness" resource="speaking" opacity="0.2"
                  onmouseover="" onmouseout="" >        
                <labelTooltip inittwice="true" labelid="372" />
            </view>
        </view>    
        
        <miniIcons name="_mute" x="80" width="16" height="16" resource="mute_btn_rsc" showhandcursor="true" >
            <handler name="onclick">
                var obj = canvas._videocontainer.getVideoObjectByPublicSID(parent.parent.refObj.publicSID);
                if (obj != null) {
                	obj._toolbar._mute.onclick.sendEvent();
                	this.setAttribute("frame",obj._toolbar._mute.frame);
                	this._tip.setAttribute("frame",obj._toolbar._mute._tip.labelid);
                }
            </handler>
            <labelTooltip name="_tip" labelid="373" />
        </miniIcons>  
        
    </view>
    
    <view name="divisionLine" width="$once{ parent.width }" 
          bgcolor="$once{ canvas.basebgcolorizer }" height="1" y="39" />
    
</class>

 
<class name="participents" extends="baseRoomInnerList" 
       height="$once{ parent.height-34 }">

    <!--- holds a references to the videoview which is broadcasting -->
    <attribute name="broadCastViewRef" value="null" />
    
    <!--
       This is a variable to make it backwards compatible to the old room layout
     -->
    <attribute name="userNewVideoContainer" value="false" type="boolean"/>
    
    <handler name="oninit">
        //set modus
        canvas.thishib.modus = "conference";
       
        //set reference, this reference will be cleared at *ontabcontenctleave* event
        canvas._videocontainer=this;
        
        // Reconnect User to its Room Id
        canvas.thishib.userScope = canvas.thishib.currentroomid;
        var src = hib.protocollName+'://'+canvas.rtmphostlocal+':'+hib.protocollPort+'/'+canvas.webAppRootKey+'/'+hib.userScope;
        
        if( $debug ) Debug.write("videoContainer: canvas.thishib: ",canvas.thishib.src,canvas.thishib);
        
        if (canvas.thishib.src != src) {
            canvas.thishib.setAttribute('src',src);
            
            canvas.thishib.reconnectionAction = true;
            canvas.thishib.reconnectObjRef = this;
            canvas.thishib.disconnect();
        } else {
            //The user is already in the correct Scope
            this.reconnectSuccess();
        }
    </handler>
                  
    <method name="reconnectSuccess">
        if ($debug) Debug.write("User Reloged In");
        //set default values and get already availible streams
        this.getRoomModeratorsByRoomId.doCall();
    </method>
    
    <netRemoteCallHib name="getRoomModeratorsByRoomId" funcname="conferenceservice.getRoomModeratorsByRoomId" 
                      remotecontext="$once{ canvas.thishib }" >  
        <netparam><method name="getValue">return canvas.sessionId;</method></netparam>    
        <netparam><method name="getValue">return hib.currentroomid;</method></netparam>
        <handler name="ondata" args="value">
            <![CDATA[
                if ($debug) Debug.write("getRoomModeratorsByRoomId: ",value);
                canvas.becomeSuperModerator = false;
                
                parent.setRoomValues.applyDefaultModeration = canvas.becomemoderator;
                canvas.becomeSuperModerator = canvas.becomemoderator;
                
                if (!canvas.becomeSuperModerator) {
    	            for (var i=0;i<value.length;i++) {
                        
                        if (value[i].user.user_id == canvas.user_id) {
                            parent.setRoomValues.applyDefaultModeration = true;
                            canvas.becomeSuperModerator = value[i].isSuperModerator;
                            if ($debug) Debug.info("Make this User to an Moderator");
                            break;
                        }
                        
                    }
                }
	            
                if ($debug) Debug.write("canvas.becomemoderator: ",canvas.becomemoderator);
                if ($debug) Debug.write("canvas.becomeSuperModerator: ",canvas.becomeSuperModerator);
                
                canvas.currentusercolor = parent._participents.getColorForUser();
                
                var organisation_id = 1;
            
                if ($debug) Debug.write(hib.userobject); 
                if ($debug) Debug.write(hib.currentdomainObj); 
                
                if (hib.currentdomainObj != null) {
                    organisation_id = hib.currentdomainObj.organisation_id
                }
                
                this.parent.setRoomValues.organisation_id = organisation_id;
                
                if ($debug) Debug.write("setRoomValues CALL: ");
                this.parent.setRoomValues.doCall();
            
            ]]>
        </handler>
    </netRemoteCallHib>     

    <netRemoteCallHib name="setRoomValues" funcname="setRoomValues" remotecontext="$once{ canvas.thishib }" >   
        <attribute name="applyDefaultModeration" value="false" type="boolean" />
        <attribute name="organisation_id" value="0" type="number" />
        <netparam><method name="getValue">return hib.currentroomid;</method></netparam>
        <netparam><method name="getValue">return parent.applyDefaultModeration;</method></netparam>
        <netparam><method name="getValue">return canvas.becomeSuperModerator;</method></netparam>
        <netparam><method name="getValue">return parent.organisation_id;</method></netparam>
        <netparam><method name="getValue">return canvas.currentusercolor;</method></netparam>
        <handler name="ondata" args="roomStatus">
            <![CDATA[
            //The onResult-Handler will be called be the rtmpconnection
            if ($debug) Debug.write("+++++++++++++++++");
            if ($debug) Debug.write("+++++++++++++++++ setRoomValues1: ",roomStatus);
            //if ($debug) Debug.write("setRoomValues2: ",hib.currentroomid);
            
            //if ($debug) Debug.write("+++++++++++++++++ getClientListScope : ",value);
            
            if (roomStatus.roomFull) {
                canvas.thishib.showFullMessage = true;
                canvas.thishib.disconnect();
            }
            
            if (roomStatus.browserStatus.browserInited) {
                var tObj = new Object();
                tObj[0] = "newBrowserURL";
                tObj[1] = roomStatus.browserStatus.currentURL;
                canvas.startBrowser(tObj);
            }
            
            var value = roomStatus.clientMap;
            
            for (var i in value){
                if ( value[i].streamid == canvas.streamid ) {
                    canvas.isAllowedToDraw = value[i].canDraw;
                }
                //if ($debug) Debug.write("getClientListScope value: ",value[i]);
                this.parent.addItem(value[i].connectedSince,value[i].isMod,value[i].streamid,value[i].username,
                              '',value[i].formatedDate,value[i].userpos,value[i].usercolor,value[i]);
            }
            //this content must be inited _after_ setting the default values
            canvas.thishib.getCurrentModeratorList.doCall(); 
            canvas.thishib.checkLzRecording.doCall();
            canvas._chatcontent.doInit();   
            ]]>
        </handler>  
    </netRemoteCallHib>

    <!-- invoked if another client logs into the room 
    after choosing devices -->     
    <method name="setAVSettingsToClient" args="rcl">
        if ($debug) Debug.write("setAVSettingsToClient ",rcl.publicSID,rcl);
        var obj = this.getVideoObjectByPublicSID(rcl.publicSID);
        if ($debug) Debug.write("setAVSettingsToClient: ",obj,rcl.avsettings);
        if (obj == null) {
            if ($debug) Debug.warn("Could Not Find Instance setAVSettingsToClient ",rcl.publicSID);
            return;
        }
        if (rcl.avsettings=="n"){
            obj.setAttribute("visibility","hidden");
            obj.setVideouserProfilePic(rcl);
        } else if (rcl.avsettings=="a"){
            obj.setVideouserProfilePic(rcl);
            obj.setAttribute("visibility","hidden");
        } else {
            obj.deleteVideoConfProfilePic();
            obj.setAttribute("visibility","visible");
        }
        obj.clientVars = rcl;
        obj.updateAVSettingsSymbol(rcl);
    </method> 
    

    <!--- get a baseVideoObject by a Users publicSID
        @param string publicSID publicSID
     -->
    <method name="getVideoObjectByPublicSID" args="publicSID">
        <![CDATA[
            //if ($debug) Debug.write("getVideoObjectByPublicSid SEARCH: ",publicSID,parent.parent);
            
            //for (var i=0;i<this._videoviewcontent.subviews.length;i++){
            //  if ($debug) Debug.write("getVideoObjectByBroadCastId6 broadcastId: ",this._videoviewcontent.subviews[i].broadcastId);
            //  if ($debug) Debug.write("getVideoObjectByBroadCastId7 streamid,user_id: ",this._videoviewcontent.subviews[i].clientVars.streamid,this._videoviewcontent.subviews[i].clientVars.user_id);
            //}
            var videoContainer = this._videoviewcontent;
            if (this.userNewVideoContainer) {
                videoContainer = parent.parent._videoviewcontent;
            }
            
            for (var i=0;i<videoContainer.subviews.length;i++){
                //if ($debug) Debug.write("getVideoObjectByBroadCastId2 broadcastId VIEW: ",this._videoviewcontent.subviews[i].broadcastId);
                //if ($debug) Debug.write("getVideoObjectByBroadCastId3 broadcastId SEARCH: ",broadcastId);
                //if ($debug) Debug.write("getVideoObjectByBroadCastId4 obj: ",this._videoviewcontent.subviews[i]);
                //if ($debug) Debug.write("getVideoObjectByBroadCastId5 streamid,user_id: ",this._videoviewcontent.subviews[i].clientVars.streamid,this._videoviewcontent.subviews[i].clientVars.user_id);
                if (videoContainer.subviews[i].publicSID==publicSID){
                    return videoContainer.subviews[i];
                }
            }
            
            if ($debug) Debug.warn(" - getVideoObjectByPublicSID - DID NOT FIND THE USER BY ",publicSID);
            
            return null;
            
        ]]>
    </method>           

    <method name="addItem" args="connectedSince,isMod,streamid,username,userroom,formatedDate,position,color,object">
        <![CDATA[
            if ($debug) Debug.write("initializeStreams addItem: ",connectedSince,object);
            
            //Do init only in case this stream is NOT the same as we are
            if (streamid!=canvas.streamid){
            	
            	//if ($debug) Debug.write("???????? object.isBroadcasting :: ",object.isBroadcasting);
            	
                var myvideocontainer = this.getNewVideoObjectByPos(object.publicSID);
                myvideocontainer.clientVars = object;
                myvideocontainer.setAttribute('chatpartnername',object.firstname+' '+object.lastname);
                if ($debug) Debug.write("object.avsettings: ",object.avsettings);
                if (object.avsettings=="n"){
                    myvideocontainer.setVideouserProfilePic(object);
                    myvideocontainer.setAttribute("visibility","hidden");
                } else if (object.avsettings=="a"){
                    myvideocontainer.setVideouserProfilePic(object);
                    if ($debug) Debug.warn("start play");
                    myvideocontainer._chatvideoinner._videostream.playStream(object.broadCastID,-1);
                    myvideocontainer.setAttribute("visibility","hidden");
                } else {
                    myvideocontainer._chatvideoinner._videostream.playStream(object.broadCastID,-1);    
                    myvideocontainer.setAttribute("visibility","visible");
                    if ($debug) Debug.warn("start play");
                }
                myvideocontainer.updateAVSettingsSymbol(object);
                
                //do add others
                this._participents.addItem(object);
                
                return myvideocontainer;
            } else {
                
                //do add self too
                this._participents.addItem(object);
                
            }
           
        ]]>
    </method>
    
    <method name="addClientItem" args="connectedSince,isMod,streamid,username,room_id,formatedDate,position,color,object">
        <![CDATA[
        if ($debug) Debug.write("### initializeStreams addClientItem: ",connectedSince,isMod,streamid,username,room_id,formatedDate);
        
            if (canvas.publicSID != object.publicSID){
                
                
                var myvideocontainer = this.getNewVideoObjectByPos(object.publicSID);
                myvideocontainer.clientVars = object;
                myvideocontainer.setAttribute('chatpartnername',object.firstname+' '+object.lastname);
                if ($debug) Debug.write("addClientItem avsettings: ",object.avsettings);
                if (object.avsettings=="n" || object.avsettings=="a"){
                    myvideocontainer.setVideouserProfilePic(object);
                }
                myvideocontainer.updateAVSettingsSymbol(object);
                
            }

            //Do Add it anyway
            this._participents.addItem(object);
        ]]>
    </method>
        
    <!--
        invoked whenever a User starts to Stream Video in this Room, 
        interviewPodId has only a meaning in the Room Type Interview
     -->        
    <method name="startStream" args="publicSID,broadcastId,firstname,lastname,interviewPodId">
        <![CDATA[
            //if ($debug) Debug.write("startStream broadcastId: ",broadcastId);
            var obj = this.getVideoObjectByPublicSID(publicSID);
            //if ($debug) Debug.write("startStream obj: ",obj);
            if (obj != null ){
                obj._chatvideoinner._videostream.playStream(broadcastId,-1);
                obj.setAttribute('chatpartnername',firstname+' '+lastname);
            }
        ]]>
    </method>

    
    <!-- 
        This method returns an object of type videoObjectBroadcast
        you can only publish you a/v with this object
        @param string broadcastId broadcastId
     -->
    <method name="getNewVideoObject" args="publicSID">
        <![CDATA[
            var obj = this.getVideoObjectByPublicSID(publicSID);
            if (obj!=null){
                this.broadCastViewRef = obj;
            } else {
                
                var videoContainer = this._videoviewcontent;
                if (this.userNewVideoContainer) {
                    videoContainer = parent.parent._videoviewcontent;
                }
                
                if ($debug) Debug.warn("videoContainer ",videoContainer);
                
                //Get a Free VideoView Slot
                var newx = videoContainer.subviews.length*140;
                var newy = 0;
                if ((newx+100)>=canvas.width) {
                    newx = 20;
                    newy += 140;
                }
                
                this.broadCastViewRef = new lz.videoObjectBroadcast(videoContainer,{
                        publicSID:publicSID,
                        x:newx,y:newy,
                        hidebyAudioOnly:true
                    });
                canvas.currentusercolor = this.getColorForUser();
                this.broadCastViewRef._chatvideoinner.r.destroy();
                canvas.thishib.setAudienceModus.doCall();
                this.broadCastViewRef.setAttribute('chatpartnername',hib.userobject.firstname+' '+hib.userobject.lastname);
            }
            return this.broadCastViewRef;
        ]]>
    </method>
    
    <!---
        returns a new object of type videoObjectPlayBroadcast
        you can only play a stream not publish you a/v with this object
        @param string broadcastId broadcastId
     -->
    <method name="getNewVideoObjectByPos" args="publicSID">
        <![CDATA[
            var obj = this.getVideoObjectByPublicSID(publicSID);
            if (obj!=null){
                return obj;
            }
            var videoContainer = this._videoviewcontent;
            if (this.userNewVideoContainer) {
                videoContainer = parent.parent._videoviewcontent;
            }
            
            //Get a Free VideoView Slot
            var newx = videoContainer.subviews.length*140;
            var newy = 0;
            if ((newx+100)>=canvas.width) {
                newx = 20;
                newy += 140;
            }
            
            return new lz.videoObjectPlayBroadcast(videoContainer,{
                    publicSID:publicSID,
                    x:newx,y:newy
                });
        ]]>
    </method>
    
    <!--- 
        invoked remotely by Red5-notification 
        shows a green light if somebody is speaking
        @param string broadcastId broadcastId
        @param boolean bool show light on/off
    -->
    <method name="setSpeakingByPos" args="publicSID,bool">
        <![CDATA[
            var obj = this.getVideoObjectByPublicSID(publicSID);
            var objList = this._participents.getVideoObjectByPublicSID(publicSID);
            if (bool){
                obj._loudness.loudness.setAttribute('opacity',1);
                objList._miniIcons._loudness.loudness.setAttribute('opacity',1);
            } else {
                obj._loudness.loudness.setAttribute('opacity',0.2);
                objList._miniIcons._loudness.loudness.setAttribute('opacity',0.2);
            }
        ]]>
    </method>   
    
    <!--- 
        stops the streaming but does not destroy the view
        @param int broadcastId broadcastId
     -->
    <method name="closeStreamClient" args="publicSID">
        <![CDATA[
            if ($debug) Debug.write("closeStreamclient: ",publicSID);
            var obj = this.getVideoObjectByPublicSID(publicSID);
            if ($debug) Debug.write("closeStreamclient obj: ",obj);
            if (obj != null){
                obj.resetValues();
            }
        ]]>
    </method>
    
    <!--- 
        stops the streaming but and destroys the view
        @param int broadcastId broadcastId
     -->
    <method name="disconnectclient" args="publicSID">
        <![CDATA[
            if ($debug) Debug.write("disconnectclient: ",publicSID);
            
            var obj = this.getVideoObjectByPublicSID(publicSID);
            var objList = this._participents.getVideoObjectByPublicSID(publicSID);
            
            //if ($debug) Debug.write("disconnectclient obj: ",obj);
            if (obj == null) {
            	if ($debug) Debug.warn("Could Not find CLient To disconnect",publicSID);
            }
            
            if (obj != null){
                obj.resetValues();
                obj.destroy();
            }
            if (objList != null){
                objList.resetValues();
                objList.destroy();
            }
            return null;
        ]]>
    </method>   
    
    <method name="resetAllValues">
        var videoContainer = this._videoviewcontent;
        if (this.userNewVideoContainer) {
            videoContainer = parent.parent._videoviewcontent;
        }
        for (var eg in videoContainer.subviews){
            videoContainer.subviews[eg].resetValues();
        }
    </method>
    
    <moderationMiniIconsEventUserList name="_applyAndStatusIcons" showAvIcons="false" x="2" y="2" >
        <handler name="onismoderator" reference="canvas" args="m">
            this.updateIcons();
        </handler>
        <handler name="ondrawAllowStatus" reference="canvas" args="drawObject">
            this.updateIcons();
        </handler>
        <handler name="onlastBroadCastingUser" reference="canvas" args="userObject">
            this.updateIcons();
        </handler>
    </moderationMiniIconsEventUserList>
    
    <participentList name="_participents" />
    
    <view name="_videoviewcontent">
          
    </view>
    
</class>

</library>