<?xml version="1.0" encoding="UTF-8" ?>
<library>

<!---
        Container view including all audio/video - views for a Meeting
 -->
 
<class name="videocontainer" extends="view" width="288" height="$once{ parent.height-22 }" >

	<!--- holds a references to the videoview which is broadcasting -->
	<attribute name="broadCastViewRef" value="null" />
	<!--- current broadcastId -->
	<attribute name="broadcastId" value="0" type="string" />
	
	<!--- colors for each user -->
	<attribute name="colorArray" value="null" />
	
	<handler name="oninit">
		//set modus
		canvas.thishib.modus = "conference";
		//color array
		this.colorArray = [0x4174B1,0x00CC00,0xFFCC33,0xFF6633,0x4174B1,0x00CC00,0xFFCC33,0xFF6633];
		//set reference, this reference will be cleared at *ontabcontenctleave* event
		canvas._videocontainer=this;
		//set default values and get already availible streams
		this.setRoomValues.doCall();
	</handler>

  	<netremotecallhib name="setRoomValues" funcname="setRoomValues" remotecontext="$once{ canvas.thishib }" >   
    	<netparam><method name="getValue">return hib.connectedroom;</method></netparam>	 
    	<netparam><method name="getValue">return hib.currentroomid;</method></netparam>
    	<netparam><method name="getValue">return hib.conferencedomain;</method></netparam>  	
		<handler name="ondata" args="value">
			//The onResult-Handler will be called be the rtmpconnection
			if ($debug) Debug.write("setRoomValues: ",value,hib.connectedroom);
            if ($debug) Debug.write("+++++++++++++++++ getClientListScope : ",value);
            for (var i in value){
            	if ($debug) Debug.write("getClientListScope value: ",value[i]);
            	if (value[i].username!=null){
            		this.parent.addItem(value[i].connectedSince,value[i].isMod,value[i].streamid,value[i].username,value[i].userroom,value[i].formatedDate,value[i].userpos,value[i].usercolor,value[i]);
            	}
            }
            //this content must be inited _after_ setting the default values
            canvas.thishib.getCurrentModerator.doCall(); 
            canvas._mymod.checkForRecording.doCall();
            canvas._chartcontent.doInit();				
		</handler>	
  	</netremotecallhib>

	<!-- invoked if another client logs into the room 
	after choosing devices -->     
    <method name="setAVSettingsToClient" args="rcl">
    	if ($debug) Debug.write("setAVSettingsToClient ",rcl.broadCastID,rcl);
    	var obj = this.getVideoObjectByBroadCastId(rcl.broadCastID);
    	if ($debug) Debug.write("setAVSettingsToClient: ",obj,rcl.avsettings);
		if (rcl.avsettings=="n"){
			obj.setVideouserProfilePic(rcl);
		} else if (rcl.avsettings=="a"){
			obj.setVideouserProfilePic(rcl);
		}
		obj.clientVars = rcl;
    	obj.updateAVSettingsSymbol(rcl);
    </method> 
    
    <!--- get a basevideoobject by its broadcastId
    	@param string broadcastId broadcastId, can be also a number
     --> 
    <method name="getVideoObjectByBroadCastId" args="broadcastId">
    	<![CDATA[
    		//if ($debug) Debug.write("getVideoObjectByBroadCastId1 SEARCH: ",broadcastId);
    		
    		//for (var i=0;i<this._videoviewcontent.subviews.length;i++){
    		//	if ($debug) Debug.write("getVideoObjectByBroadCastId6 broadcastId: ",this._videoviewcontent.subviews[i].broadcastId);
    		//	if ($debug) Debug.write("getVideoObjectByBroadCastId7 streamid,user_id: ",this._videoviewcontent.subviews[i].clientVars.streamid,this._videoviewcontent.subviews[i].clientVars.user_id);
    		//}
    		
    		for (var i=0;i<this._videoviewcontent.subviews.length;i++){
    			//if ($debug) Debug.write("getVideoObjectByBroadCastId2 broadcastId VIEW: ",this._videoviewcontent.subviews[i].broadcastId);
    			//if ($debug) Debug.write("getVideoObjectByBroadCastId3 broadcastId SEARCH: ",broadcastId);
    			//if ($debug) Debug.write("getVideoObjectByBroadCastId4 obj: ",this._videoviewcontent.subviews[i]);
    			//if ($debug) Debug.write("getVideoObjectByBroadCastId5 streamid,user_id: ",this._videoviewcontent.subviews[i].clientVars.streamid,this._videoviewcontent.subviews[i].clientVars.user_id);
    			if (this._videoviewcontent.subviews[i].broadcastId==String(broadcastId)){
    				return this._videoviewcontent.subviews[i];
    			}
    		}
    		
    	]]>
    </method>   	

	<method name="addItem" args="connectedSince,isMod,streamid,username,userroom,formatedDate,position,color,object">
		<![CDATA[
		if ($debug) Debug.write("initializeStreams addItem: ",connectedSince,isMod,streamid,username,userroom,formatedDate);
		if (streamid!=canvas.streamid){
            var myvideocontainer = this.getNewVideoObjectByPos(object.broadCastID);
	  		myvideocontainer.parent.parent.clientVars = object;
	  		myvideocontainer.parent.parent.setAttribute('chatpartnername',object.firstname+' '+object.lastname);
	  		if ($debug) Debug.write("object.avsettings: ",object.avsettings);
	  		if (object.avsettings=="n"){
    			myvideocontainer.parent.parent.setVideouserProfilePic(object);
    		} else if (object.avsettings=="a"){
    			myvideocontainer.parent.parent.setVideouserProfilePic(object);
    			if ($debug) Debug.warn("start play");
    			myvideocontainer.subscribeStream(object.broadCastID,-1);	
    		} else {
    			myvideocontainer.subscribeStream(object.broadCastID,-1);
    			if ($debug) Debug.warn("start play");
    		}
    		myvideocontainer.parent.parent.updateAVSettingsSymbol(object);
	  		return myvideocontainer;
		}
		]]>
	</method>
	
	
	<method name="addClientItem" args="connectedSince,isMod,streamid,username,userroom,formatedDate,position,color,object">
		<![CDATA[
		if ($debug) Debug.write("initializeStreams addClientItem: ",connectedSince,isMod,streamid,username,userroom,formatedDate);
		if (streamid!=canvas.streamid){
            var myvideocontainer = this.getNewVideoObjectByPos(object.broadCastID);
	  		myvideocontainer.parent.parent.clientVars = object;
	  		myvideocontainer.parent.parent.setAttribute('chatpartnername',object.firstname+' '+object.lastname);
	  		if ($debug) Debug.write("addClientItem avsettings: ",object.avsettings);
    		if (object.avsettings=="n" || object.avsettings=="a"){
    			myvideocontainer.parent.parent.setVideouserProfilePic(object);
    		}
    		myvideocontainer.parent.parent.updateAVSettingsSymbol(object);
		}
		]]>
	</method>
		
	<method name="startStream" args="broadcastId">
		<![CDATA[
			//if ($debug) Debug.write("startStream broadcastId: ",broadcastId);
			var obj = this.getVideoObjectByBroadCastId(broadcastId);
			//if ($debug) Debug.write("startStream obj: ",obj);
			if (obj != null ){
				obj._chatvideoinner._videoview.subscribeStream(broadcastId,-1);
			}
		]]>
	</method>

	
	<!-- 
		This method returns an object of type videoobjectbroadcast
		you can only publish you a/v with this object
		@param string broadcastId broadcastId
	 -->
	<method name="getNewVideoObject" args="broadcastId">
		<![CDATA[
			this.broadcastId = broadcastId;
			//Get a Free VideoView Slot
			this.broadCastViewRef = new videoobjectbroadcast(this._videoviewcontent,{broadcastId:this.broadcastId});
			canvas.currentusercolor = this.colorArray[this.subviews.length];
			canvas.currentuserpos = this.broadcastId;
			this.broadCastViewRef._chatvideoinner.r.destroy();
			this.broadCastViewRef._chatvideoinner._videoview.setAttribute('visible',true);
			canvas.thishib.setAudienceModus.doCall();
			this.broadCastViewRef.setAttribute('chatpartnername',hib.userobject.firstname+' '+hib.userobject.lastname);
			return this.broadCastViewRef.getVideoReference();
		]]>
	</method>
	
	<!---
		returns a new object of type videoobjectplayBroadcast
		you can only play a stream not publish you a/v with this object
		@param string broadcastId broadcastId
	 -->
	<method name="getNewVideoObjectByPos" args="broadcastId">
		<![CDATA[
			var vv = new videoobjectplayBroadcast(this._videoviewcontent,{broadcastId:broadcastId});
			vv._chatvideoinner._videoview.setAttribute('visible',true);
			return vv.getVideoReference();
		]]>
	</method>
	
	<!--- 
		invoked remotely by Red5-notification 
		shows a green light if somebody is speaking
		@param string broadcastId broadcastId
		@param boolean bool show light on/off
	-->
	<method name="setSpeakingByPos" args="broadcastId,bool">
		<![CDATA[
			var obj = this.getVideoObjectByBroadCastId(broadcastId);
			if (bool){
				obj._loudness.loudness.setAttribute('opacity',1);
			} else {
				obj._loudness.loudness.setAttribute('opacity',0.2);
			}
		]]>
	</method>	
	
	<!--- 
		stops the streaming but does not destroy the view
		@param int broadcastId broadcastId
	 -->
	<method name="closeStreamClient" args="broadcastId">
		<![CDATA[
			if ($debug) Debug.write("closeStreamclient: ",broadcastId);
			var obj = this.getVideoObjectByBroadCastId(broadcastId);
			if ($debug) Debug.write("closeStreamclient obj: ",obj);
			if (obj != null){
				obj.resetValues();
				obj._chatvideoinner._videoview.setAttribute('visible',false);
			}
		]]>
	</method>
	
	<!--- 
		stops the streaming but and destroys the view
		@param int broadcastId broadcastId
	 -->
	<method name="disconnectclient" args="broadcastId">
		<![CDATA[
			if ($debug) Debug.write("disconnectclient: ",broadcastId);
			var obj = this.getVideoObjectByBroadCastId(broadcastId);
			if ($debug) Debug.write("disconnectclient obj: ",obj);
			if (obj != null){
				obj.resetValues();
				obj.destroy();
			}
			return null;
		]]>
	</method>	
	
	<view width="$once{ parent.width-18 }" name="_videoviewcontent">
		<wrappinglayout axis="x" spacing="2" />
	</view>
	<vscrollbar />
	
</class>

</library>