<?xml version="1.0" encoding="UTF-8" ?>
<library>

<resource name="cl_navibar_rsc" src="resources/cr_navibar.swf" />
<resource name="cl_navibarbtn_rsc" src="resources/cr_navibarbtn.swf" />
<resource name="cr_navibar_rsc" src="resources/cl_navibar.swf" />
<resource name="cr_navibarbtn_rsc" src="resources/cl_navibarbtn.swf" />
<resource name="navibar_rsc" src="resources/navibar.swf" />
<resource name="mainnavi_rsc" src="resources/navibarbtn.swf" />

<class name="subitemsListContainter" extends="view" visibility="hidden"
    layout="axis:x;spacing:0" />

<class name="textBoxSubBlank" extends="text" text="$once{ parent.text }"
    fgcolor="0xFFFFFF"
        fontsize="14" y="6" x="10" />

<class name="subitemsListItem" extends="view"
    width="${ this._ctext.width+20 }" >

    <attribute name="action" value="" type="string" />

    <attribute name="isopen" value="false" type="boolean" />
    <attribute name="isleaf" value="false" type="boolean" />
    <attribute name="list" value="null" />
    <attribute name="textvalue" value="null" />
    <attribute name="selected" value="false" type="boolean" />

    <handler name="onmouseover">
        if (!this.selected){
            this._ctext.destroy();
            new textBoxSubBlank(this,{name:'_ctext','fgcolor':'0x000000'});
        }
    </handler>
    <handler name="onmouseout">
        if (!this.selected){
            this._ctext.destroy();
            new textBoxSubBlank(this,{name:'_ctext'});
        }
    </handler>

    <method name="resetItem">
        this.selected = false;
        this._ctext.destroy();
        new textBoxSubBlank(this,{name:'_ctext'});
    </method>

    <view width="1" height="10" y="13" bgcolor="0xFFFFFF" x="${ parent.width-1 }" />
    <textBoxSubBlank name="_ctext" />

    <handler name="onclick">
        this._ctext.destroy();
        new textBoxSubBlank(this,{'fgcolor':'0xFF3300'});
        if (this.isleaf) loadContent(this,null,null);
        this.selected=true;
        parent.parent.parent.setSubItem(this);
    </handler>
</class>

<class name="mainMenuMeetingsItem" extends="view" height="30"
    width="${ this._ctext.width+20 }" >

    <attribute name="action" value="" type="string" />

    <attribute name="_menuRef" value="null" />
    <attribute name="isopen" value="false" type="boolean" />
    <attribute name="isleaf" value="false" type="boolean" />
    <attribute name="list" value="null" />
    <attribute name="textvalue" value="null" />
    <attribute name="selected" value="false" type="boolean" />

    <handler name="onmouseover">
        if (!this.selected){
            this.bgc.setAttribute('visibility','visible');
        }
    </handler>
    <handler name="onmouseout">
        if (!this.selected){
            this.bgc.setAttribute('visibility','hidden');
        }
    </handler>

    <view width="${ parent.width }" resource="mainnavi_rsc"
        stretches="width" visibility="hidden" name="bgc"/>
    <view width="1" height="10" y="13" bgcolor="0x666666" x="${ parent.width-1 }" />
    <text text="$once{ parent.text }" name="_ctext"
        fontsize="14" y="6" x="10" />


    <handler name="oninit">
        <![CDATA[
            Debug.write(this.list,list.length);
            if (list!=null && list.length!=0){
                this._menuRef = new subitemsListContainter(this.parent.parent.subitemlist)
                for (var i=0;i<this.list.length;i++) {
                    new subitemsListItem(this._menuRef,{textvalue:this.list[i].name,list:this.list[i].subnavi,text:this.list[i].label.value,isopen:this.list[i].isopen,isleaf:this.list[i].isleaf,action:this.list[i].action});
                }
            }
        ]]>
    </handler>

    <handler name="onclick">
        this.selected = true;
        this.parent.parent.sendOpenMenu(this._menuRef,this);
        this.bgc.setAttribute('visibility','visible');
        Debug.write("onclick",this);
        if (this.isleaf) loadContent(this,null,null);
        else this._menuRef.subviews[0].onclick.sendEvent();
    </handler>

</class>


<class name="mainNavi" extends="view" height="30" width="${ canvas.width }" y="50" >

    <attribute name="naviObject" value="null" />
    <attribute name="currentmenu" value="null" />
    <attribute name="currentMainmenu" value="null" />
    <attribute name="currentSubmenu" value="null" />

    <view width="${ parent.width }" resource="navibar_rsc" stretches="width" >
        <handler name="oninit">
            this.setShadow();
        </handler>
        <method name="setShadow" >
            <![CDATA[
            if (this.isinited){
                this.normalMC = this.getMCRef();
                   this.displacementMap = new flash.filters.DropShadowFilter();
                this.normalMC.filters = [this.displacementMap];
            }
            ]]>
        </method>
    </view>
    <view name="itemlist" layout="axis:x;spacing:0" id="mainmenuList">
        <method name="doAction" args="action">
            <![CDATA[
                for (var i=0;i<this.subviews.length;i++) {
                    if (this.subviews[i].action == action) {
                        this.subviews[i].onclick.sendEvent();
                        return true;
                    }
                }
            ]]>
        </method>
    </view>
    <view name="subitemlist" y="30" />

    <method name="sendOpenMenu" args="menuref,obj">
        <![CDATA[
            if (this.currentmenu!=null) {
                this.currentmenu.setAttribute('visibility','hidden');
            }
            if (this.currentMainmenu!=null && this.currentMainmenu!=obj) {
                Debug.write("New MainMenuItem",obj);
                this.currentMainmenu.bgc.setAttribute('visibility','hidden');
                this.currentMainmenu.selected = false;
            } else {
                obj.bgc.setAttribute('visibility','visible');
            }
            this.currentMainmenu = obj;
            this.currentmenu = menuref;
            this.currentmenu.setAttribute('visibility','visible');
        ]]>
    </method>

    <method name="setSubItem" args="obj">
        <![CDATA[
            if (this.currentSubmenu!=null && this.currentSubmenu!=obj) this.currentSubmenu.resetItem();
            this.currentSubmenu=obj;
        ]]>
    </method>

    <!---
      Initialize Menu
    -->
    <handler name="oninit">
      <![CDATA[
            var value = this.naviObject;
            for (var i=0;i<value.length;i++){
                var t1 = new mainMenuMeetingsItem(this.itemlist,{textvalue:value[i].name,list:value[i].mainnavi,isleaf:value[i].isleaf,text:value[i].label.value,action:value[i].action});
                if (i==0) t1.onclick.sendEvent();
                Debug.write("t1: ",t1);
            }
            Debug.write("this: ",this);
      ]]>
    </handler>

</class>


<class name="helpAndBugs" extends="view" x="${ parent.width-290 }" layout="axis:x">
    <view name="btn1" width="80">
        <view name="v1a" resource="cl_navibar_rsc" />
        <view name="v1b" x="10" width="$once{ parent.width-10 }"
            stretches="width" resource="navibar_rsc" />

        <view name="v2a" resource="cl_navibarbtn_rsc" visibility="hidden"/>
        <view name="v2b" x="10" width="$once{ parent.width-10 }" visibility="hidden"
            stretches="width" resource="mainnavi_rsc" />

        <handler name="onmouseover">
            this.v1a.setAttribute('visibility','hidden');
            this.v1b.setAttribute('visibility','hidden');
            this.v2a.setAttribute('visibility','visible');
            this.v2b.setAttribute('visibility','visible');
        </handler>
        <handler name="onmouseout">
            this.v1a.setAttribute('visibility','visible');
            this.v1b.setAttribute('visibility','visible');
            this.v2a.setAttribute('visibility','hidden');
            this.v2b.setAttribute('visibility','hidden');
        </handler>
        <labelText labelid="5" align="center" y="6" fontsize="14" />
        <handler name="onclick">
            quicklinkAct("userSettings");
        </handler>

    </view>
    <view name="btn3" width="80">

        <view name="v1b" width="$once{ parent.width }"
            stretches="width" resource="navibar_rsc" />

        <view name="v2b" width="$once{ parent.width }" visibility="hidden"
            stretches="width" resource="mainnavi_rsc" />

        <handler name="onmouseover">
            this.v1b.setAttribute('visibility','hidden');
            this.v2b.setAttribute('visibility','visible');
        </handler>
        <handler name="onmouseout">
            this.v1b.setAttribute('visibility','visible');
            this.v2b.setAttribute('visibility','hidden');
        </handler>
        <labelText labelid="310" align="center" y="6" fontsize="14" />
        <handler name="onclick">
            quicklinkAct('logout');
        </handler>

    </view>
    <view name="btn2" width="120">

        <view name="v1b" width="$once{ parent.width-10 }"
            stretches="width" resource="navibar_rsc" />
        <view name="v1a"  x="$once{ parent.width-10 }"
            resource="cr_navibar_rsc" />

        <view name="v2b" width="$once{ parent.width-10 }" visibility="hidden"
            stretches="width" resource="mainnavi_rsc" />
        <view name="v2a" x="$once{ parent.width-10 }"
            resource="cr_navibarbtn_rsc" visibility="hidden"/>

        <handler name="onmouseover">
            this.v1a.setAttribute('visibility','hidden');
            this.v1b.setAttribute('visibility','hidden');
            this.v2a.setAttribute('visibility','visible');
            this.v2b.setAttribute('visibility','visible');
        </handler>
        <handler name="onmouseout">
            this.v1a.setAttribute('visibility','visible');
            this.v1b.setAttribute('visibility','visible');
            this.v2a.setAttribute('visibility','hidden');
            this.v2b.setAttribute('visibility','hidden');
        </handler>
        <labelText labelid="284" x="10" y="6" fontsize="14" />
        <handler name="onclick">
            LzBrowser.loadURL(canvas.currentappnamebugurl,"_blank");
        </handler>

    </view>

    <handler name="oninit">
        this.setShadow();
    </handler>
    <method name="setShadow" >
        <![CDATA[
        if (this.isinited){
            this.normalMC = this.getMCRef();
               this.displacementMap = new flash.filters.DropShadowFilter();
            this.normalMC.filters = [this.displacementMap];
        }
        ]]>
    </method>

</class>

</library>
