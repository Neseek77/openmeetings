<?xml version="1.0" encoding="UTF-8" ?>
<library>

 
<class name="eventUserList" extends="view" width="$once{ parent.width }" 
	   height="${ parent.height-34 }">

	<!--- holds a references to the videoview which is broadcasting -->
	<attribute name="broadCastViewRef" value="null" />
	
	<!--
       This is a variable to make it backwards compatible to the old room layout
     -->
	<attribute name="userNewVideoContainer" value="false" type="boolean"/>
	
	<attribute name="listType" value="eventUserListTable" type="string" />
	
	<!--- colors for each user -->
	<attribute name="colorArray" value="null" />
	
	<attribute name="allowUserQuestions" value="true" type="boolean" />

    <attribute name="showsVideoInSeparateComponent" value="true" type="boolean" />
	
	<handler name="onallowUserQuestions" args="bool">
		if (bool != null) {
			if (!bool) {
				this._participents._applyAndStatusIcons.destroy();
			}
		}
	</handler>
	
	<handler name="oninit">
		//set modus
		canvas.thishib.modus = "audience";
		
		//set reference, this reference will be cleared at *ontabcontenctleave* event
		canvas._videocontainer=this;
		
        // Reconnect User to its Room Id
        canvas.thishib.userScope = canvas.thishib.currentroomid;
        var src = hib.protocollName+'://'+canvas.rtmphostlocal+':'+hib.protocollPort+'/'+canvas.webAppRootKey+'/'+hib.userScope;
        
        if( $debug ) Debug.write("videoContainer: canvas.thishib: ",canvas.thishib.src,canvas.thishib);
        
        if (canvas.thishib.src != src) {
            canvas.thishib.setAttribute('src',src);
            
            canvas.thishib.reconnectionAction = true;
            canvas.thishib.reconnectObjRef = this;
            canvas.thishib.disconnect();
        } else {
        	//The user is already in the correct Scope
        	this.reconnectSuccess();
        }
        _videoviewcontent.initVideoContainer(40, 396, 360);
	</handler>
                  
    <method name="reconnectSuccess">
        if ($debug) Debug.warn("User Reloged In ",canvas.becomemoderator);
        //set default values and get already availible streams
        this.getRoomModeratorsByRoomId.doCall();
    </method>
    
    <netRemoteCallHib name="getRoomModeratorsByRoomId" funcname="conferenceservice.getRoomModeratorsByRoomId" 
                      remotecontext="$once{ canvas.thishib }" >  
        <netparam><method name="getValue">return canvas.sessionId;</method></netparam>    
        <netparam><method name="getValue">return hib.currentroomid;</method></netparam>
        <handler name="ondata" args="value">
            <![CDATA[
	            if ($debug) Debug.write("getRoomModeratorsByRoomId: ",value);
	            canvas.becomeSuperModerator = false;
                
                parent.setRoomValues.applyDefaultModeration = canvas.becomemoderator;
                canvas.becomeSuperModerator = canvas.becomemoderator;
                
                if (!canvas.becomeSuperModerator) {
    	            for (var i=0;i<value.length;i++) {
                        
                        if (value[i].user.user_id == canvas.user_id) {
                            parent.setRoomValues.applyDefaultModeration = true;
                            canvas.becomeSuperModerator = value[i].isSuperModerator;
                            if ($debug) Debug.info("Make this User to an Moderator");
                            break;
                        }
                        
                    }
                }
	            
                if ($debug) Debug.write("canvas.becomemoderator: ",canvas.becomemoderator);
                if ($debug) Debug.write("canvas.becomeSuperModerator: ",canvas.becomeSuperModerator);
                
                canvas.currentusercolor = parent._participents.getColorForUser();
                
                var organisation_id = 1;
            
                if ($debug) Debug.write(hib.userobject); 
                if ($debug) Debug.write(hib.currentdomainObj); 
                
                if (hib.currentdomainObj != null) {
                    organisation_id = hib.currentdomainObj.organisation_id
                }
                
                this.parent.setRoomValues.organisation_id = organisation_id;
	            this.parent.setRoomValues.doCall();
            
            ]]>
        </handler>
    </netRemoteCallHib>     

  	<netRemoteCallHib name="setRoomValues" funcname="setRoomValues" remotecontext="$once{ canvas.thishib }" >   
    	<attribute name="applyDefaultModeration" value="false" type="boolean" />
    	<attribute name="organisation_id" value="0" type="number" />
        <netparam><method name="getValue">return hib.currentroomid;</method></netparam>
        <netparam><method name="getValue">return parent.applyDefaultModeration;</method></netparam>
        <netparam><method name="getValue">return canvas.becomeSuperModerator;</method></netparam>
        <netparam><method name="getValue">return parent.organisation_id;</method></netparam>
        <netparam><method name="getValue">return canvas.currentusercolor;</method></netparam>
        <handler name="ondata" args="roomStatus">
            <![CDATA[
            //The onResult-Handler will be called be the rtmpconnection
            if ($debug) Debug.write("setRoomValues1: ",roomStatus);
            //if ($debug) Debug.write("setRoomValues2: ",hib.currentroomid);
            
            //if ($debug) Debug.write("+++++++++++++++++ getClientListScope : ",value);
            
            if (roomStatus.roomFull) {
            	canvas.thishib.showFullMessage = true;
            	canvas.thishib.disconnect();
            }
            
            if (roomStatus.browserStatus.browserInited) {
                var tObj = new Object();
                tObj[0] = "newBrowserURL";
                tObj[1] = roomStatus.browserStatus.currentURL;
                canvas.startBrowser(tObj);
            }
            
            var value = roomStatus.clientMap;
			
            //if ($debug) Debug.write("+++++++++++++++++ getClientListScope : ",value);
            for (var i in value){
            	if ( value[i].streamid == canvas.streamid ) {
                    canvas.isAllowedToDraw = value[i].canDraw;
                }

            	//if ($debug) Debug.write("getClientListScope value: ",value[i]);
        		this.parent.addItem(value[i].connectedSince,value[i].isMod,value[i].streamid,value[i].username,
        		              '',value[i].formatedDate,value[i].userpos,value[i].usercolor,value[i]);
            }
            //this content must be inited _after_ setting the default values
            canvas.thishib.getCurrentModeratorList.doCall(); 
            //FIXME Issue-1076
            canvas.thishib.checkLzRecording.doCall();
            canvas._chatcontent.doInit();	
            ]]>
		</handler>	
  	</netRemoteCallHib>

	<!-- invoked if another client logs into the room 
	after choosing devices -->     
    <method name="setAVSettingsToClient" args="rcl">
    	this._videoviewcontent.setAVSettingsToClient(rcl);
    </method>

	<method name="addItem" args="connectedSince,isMod,streamid,username,userroom,formatedDate,position,color,object">
		<![CDATA[
			if ($debug) Debug.write("initializeStreams addItem: ",connectedSince,isMod,streamid,username,formatedDate);
            
            //Do init only in case this stream is NOT the same as we are
			if (streamid!=canvas.streamid){
				
				//do add others
                this._participents.addItem(object);
                
                //if ($debug) Debug.write("???????? object.isBroadcasting :: ",object.isBroadcasting);
                
				if (object.isBroadcasting) {
					this._videoviewcontent.createVideo(object.publicSID, object.firstname+' '+object.lastname, object.broadCastID, object.avsettings, -1);
				} else {
					this._videoviewcontent.createVideoObject(object.publicSID, false, -1);
				}
		  		
			} else {
                
                //do add self too
                this._participents.addItem(object);
                
                return null;
            }
           
		]]>
	</method>
	
	<method name="addClientItem" args="connectedSince,isMod,streamid,username,room_id,formatedDate,position,color,object">
		<![CDATA[
		if ($debug) Debug.write("### initializeStreams addClientItem: ",connectedSince,isMod,streamid,username,room_id,formatedDate);
		
    		if (canvas.publicSID != object.publicSID){
    			
    			if (object.isBroadcasting) {
                    this._videoviewcontent.createVideoObject(object.publicSID, false, -1);
    			}
    			
    		}

    		//Do Add it anyway
    		this._participents.addItem(object);
		]]>
	</method>
		
    <!--
        invoked whenever a User starts to Stream Video in this Room, 
        interviewPodId has only a meaning in the Room Type Interview
     -->        
    <method name="startStream" args="publicSID,broadcastId,firstname,lastname,interviewPodId">
		this._videoviewcontent.startStream(publicSID,broadcastId,firstname,lastname,interviewPodId);
	</method>
	
	<method name="updateMuteStatusVideoView" args="roomClient">
        <![CDATA[
            var videoContainer = parent.parent._videoviewcontent;
            for (var i=0;i<videoContainer.subviews.length;i++){
                videoContainer.subviews[i].muteMicrophone(roomClient);
            }
        ]]>
    </method>
	
	<!---
		invoked remotely by Red5-notification
		shows a green light if somebody is speaking
		@param string broadcastId broadcastId
		@param boolean bool show light on/off
	-->
	<method name="setSpeakingByPos" args="publicSID,bool">
        this._videoviewcontent.setSpeakingByPos(publicSID, bool);
	</method>	
	
	<!--- 
		stops the streaming but does not destroy the view
		@param int broadcastId broadcastId
	 -->
	<method name="closeStreamClient" args="publicSID">
		this._videoviewcontent.closeStreamClient(publicSID);
	</method>
	
	<method name="removeVideoByUser" args="userObject">
		this._videoviewcontent.removeVideoByUser(userObject.publicSID);
	</method>
	
	<!--- 
		stops the streaming but and destroys the view
		@param int broadcastId broadcastId
	 -->
	<method name="disconnectclient" args="publicSID">
		<![CDATA[
			//if ($debug) Debug.write("disconnectclient: ",publicSID);
			
			this._videoviewcontent.disconnectclient(publicSID);

            var objList = this._participents.getVideoObjectByPublicSID(publicSID);

            if (objList != null){
                objList.resetValues();
                objList.destroy();
            }
			return null;
		]]>
	</method>	
	
	<method name="resetAllValues">
		this._videoviewcontent.resetAllValues();
	</method>
    
    <eventUserListInner name="_participents" listType="$once{ parent.listType }" />

    <commonVideoComponentAdapter name="_videoviewcontent"/>
	
</class>

</library>
