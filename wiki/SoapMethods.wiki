#summary Available SOAP-Services to login directly/embedding OpenMeetings
#labels Phase-Design,Phase-Implementation

_This Feature will be added in Version 0.5.1_

== Description ==

All Services here. You can see the recommended flow of embedding for example Rooms into your application at 
DirectLoginSoapGeneralFlow

== Availible Services ==

  * [http://code.google.com/p/openmeetings/wiki/SoapMethods#UserService UserService] - manage Users, Session and Errors
  Methods:
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getSession getSession] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#loginUser loginUser] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getErrorByCode getErrorByCode] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#setUserObject setUserObject] 
  
  * [http://code.google.com/p/openmeetings/wiki/SoapMethods#FileService FileService] - browse and edit Files of a Conference-Room
  Methods:
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getListOfFiles getListOfFiles] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#deleteFile deleteFile]
  
== Overview of Services == 
http://openmeetings.googlecode.com/svn/docs/OpenMeetingsSOAPGateway.png


=== !UserService ===

Service-Endpoint:
http://localhost:5080/openmeetings/services/UserService?wsdl
(http://$RED5_HOST:$RED5_HTTP_HOST/openmeetings/services/UserService?wsdl)


==== getSession ====

Method: _public Sessiondata getSession()_

Description: load this session id before doing anything else
Returns an Object of Type [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/hibernate/beans/basic/Sessiondata.java Sessiondata], this contains a sessionId, use that sessionId in all Methods

Params: no params


==== loginUser ====

Method: _public Long loginUser(String SID, String username, String userpass)_

Description: auth function, use the SID you get by [http://code.google.com/p/openmeetings/wiki/SoapMethods#getSession getSession], 
return positive means logged-in, if negative its an !ErrorCode, you have to invoke the Method
[http://code.google.com/p/openmeetings/wiki/SoapMethods#getErrorByCode getErrorByCode] to get the Text-Description of that !ErrorCode

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID from getSession ||
|| String || username || Username from !OpenMeetings, the user has to have Admin-rights ||
|| String || userpass || Userpass from !OpenMeetings ||


==== getErrorByCode ====

Method: _public !ErrorResult getErrorByCode(String SID, Long errorid, Long language_id)_

Description: loads an [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/data/beans/basic/ErrorResult.java Error-Object]. If a Method returns a negative Result, its an Error-id,
it needs a language_id to specify in which language you want to display/read the error-message.
English has the Language-ID one, for different one see the [http://openmeetings.googlecode.com/svn/trunk/webapp/webapp/openmeetings/languages/languages.xml list of languages]

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID from getSession ||
|| Long || errorid || the errorid (negative Value here!) ||
|| Long || language_id || The id of the language  ||


==== setUserObject ====

Method: _public Long setUserObject(String SID, String username, String firstname, String lastname, String profilePictureUrl, String email)_

Description: sets the !SessionObject for a certain SID, after setting this Session-Object you can use the 
SID + a RoomId to enter any Room.

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID from getSession ||
|| String || username || any username ||
|| String || firstname || any firstname ||
|| String || lastname || any lastname ||
|| String || profilePictureUrl || any profilePictureUrl ||
|| String || email || any email ||

--------

=== !FileService ===

Service-Endpoint:
http://localhost:5080/openmeetings/services/FileService?wsdl
(http://$RED5_HOST:$RED5_HTTP_HOST/openmeetings/services/FileService?wsdl)


==== getListOfFiles ====

Method: _public !LiberaryObject getListOfFiles(String SID, String moduleName,String parentFolder, Long room_id )_

Description: Returns a Library Object. The Library-Object contains a Folders and a Fileslist OR
it contains a !PresentationObject. A !PresentationObject is a List of thumbnails + the reference to the
converted SWF, PDF and the Original Document (The original Document is only included if it is not also a PDF)

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| String || moduleName || Modulename, the Value is 'videoconf1' ||
|| String ||parentFolder || Parent Folder, for the Root of every Room it is blank not '/' ||
|| Long || room_id || the room_id you would like to get the Files ||


==== deleteFile ====

Method: _public Boolean deleteFile(String SID, String fileName, String moduleName, String parentFolder, Long room_id)_

Description: Deletes a file or folder

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| String || fileName || The File or Folder you would like to delete ||
|| String || moduleName || Modulename, the Value is 'videoconf1' for a conference room ||
|| String || parentFolder || Parent Folder, for the Root of every Room it is blank not '/' ||
|| Long || room_id || the room_id of the file  ||

--------
