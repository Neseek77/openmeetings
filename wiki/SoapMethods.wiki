#summary Available SOAP-Services to login directly/embedding OpenMeetings
#labels Phase-Design,Phase-Implementation

<wiki:toc max_depth="4" />

== Description ==

All Services here. You can see the recommended flow of embedding for example Rooms and SIngle Sign on into your application at 
DirectLoginSoapGeneralFlow

See also for a complete Service Overview and Guide the Axis2-Service-Browser:
http://openmeetings.de:5080/openmeetings/axis2-web/
=> this ships with every !OpenMeetings installation so goto:
http://localhost:5080/openmeetings/axis2-web/


== Availible Services ==

  * [http://code.google.com/p/openmeetings/wiki/SoapMethods#UserService UserService] - manage Users, Session and Errors
  Methods:
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getSession getSession] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#loginUser loginUser] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getErrorByCode getErrorByCode] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#setUserObject setUserObject] deprecated use setUserObjectAndGenerateRoomHash
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#setUserObjectAndGenerateRoomHash setUserObjectAndGenerateRoomHash] 
  
  * [http://code.google.com/p/openmeetings/wiki/SoapMethods#FileService FileService] - browse and edit Files of a Conference-Room
  Methods:
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getListOfFiles getListOfFiles] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#deleteFile deleteFile]
    
  * [http://code.google.com/p/openmeetings/wiki/SoapMethods#RoomService RoomService] - manage Conference Rooms
  Methods:
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getRoomsPublic getRoomsPublic]  
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getRoomTypes getRoomTypes]  
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getRoomById getRoomById] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getRoomWithCurrentUsersById getRoomWithCurrentUsersById]  
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getRooms getRooms] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getRooms getRoomsWithCurrentUsers]  
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#addRoom addRoom] (deprecated use addRoomWithModeration)
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#updateRoom updateRoom] (deprecated use updateRoomWithModeration)
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#addRoomWithModeration addRoomWithModeration] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#updateRoomWithModeration updateRoomWithModeration] 
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#deleteRoom deleteRoom]
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#kickUser kickUser]
    * [http://code.google.com/p/openmeetings/wiki/SoapMethods#getRoomIdByExternalId getRoomIdByExternalId]
 

URL for direct Room access: (sid=6c280410c96e91ea05d25e0b28b10a87 MUST be replaced with a valid SID you create using the SOAP Gateway) http://$YOUR_RED5_HOST:$YOUR_RED5_HTTP_PORT/openmeetings/main.lzx.swf8.swf?roomid=1&sid=6c280410c96e91ea05d25e0b28b10a87&language=4 or http://$YOUR_RED5_HOST:$YOUR_RED5_HTTP_PORT/openmeetings/main.lzx.swf8.swf?roomid=1&sid=6c280410c96e91ea05d25e0b28b10a87 (see the missing language_id, in this case it will use the default_language_id from the configuration section)

-----

=== !UserService ===

Service-Endpoint:
http://localhost:5080/openmeetings/services/UserService?wsdl
(http://$RED5_HOST:$RED5_HTTP_HOST/openmeetings/services/UserService?wsdl)


==== getSession ====

Method: _public Sessiondata getSession()_

Description: load this session id before doing anything else
Returns an Object of Type [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/hibernate/beans/basic/Sessiondata.java Sessiondata], this contains a sessionId, use that sessionId in all Methods

Params: no params


==== loginUser ====

Method: _public Long loginUser(String SID, String username, String userpass)_

Description: auth function, use the SID you get by [http://code.google.com/p/openmeetings/wiki/SoapMethods#getSession getSession], 
return positive means logged-in, if negative its an !ErrorCode, you have to invoke the Method
[http://code.google.com/p/openmeetings/wiki/SoapMethods#getErrorByCode getErrorByCode] to get the Text-Description of that !ErrorCode

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID from getSession ||
|| String || username || Username from !OpenMeetings, the user has to have Admin-rights ||
|| String || userpass || Userpass from !OpenMeetings ||


==== getErrorByCode ====

Method: _public !ErrorResult getErrorByCode(String SID, Long errorid, Long language_id)_

Description: loads an [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/data/beans/basic/ErrorResult.java Error-Object]. If a Method returns a negative Result, its an Error-id,
it needs a language_id to specify in which language you want to display/read the error-message.
English has the Language-ID one, for different one see the [http://openmeetings.googlecode.com/svn/trunk/webapp/webapp/openmeetings/languages/languages.xml list of languages]

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID from getSession ||
|| Long || errorid || the errorid (negative Value here!) ||
|| Long || language_id || The id of the language  ||


==== setUserObject ====

Method: _public Long setUserObject(String SID, String username, String firstname, String lastname, String profilePictureUrl, String email)_

_deprecated use setUserObjectAndGenerateRoomHash_

Description: sets the !SessionObject for a certain SID, after setting this Session-Object you can use the 
SID + a !RoomId to enter any Room.

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID from getSession ||
|| String || username || any username ||
|| String || firstname || any firstname ||
|| String || lastname || any lastname ||
|| String || profilePictureUrl || any profilePictureUrl ||
|| String || email || any email ||


==== setUserObjectAndGenerateRoomHash ====

Method: _public Long setUserObjectAndGenerateRoomHash(String SID, String username, String firstname, String lastname,String profilePictureUrl, String email, Long externalUserId, String externalUserType, Long room_id, int becomeModeratorAsInt, int showAudioVideoTestAsInt)_

Description: sets the !SessionObject for a certain SID, after setting this Session-Object you can use the 
SID + a !RoomId to enter any Room. ... Session-Hashs are deleted 15 minutes after the creation if not used.

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID from getSession ||
|| String || username || any username ||
|| String || firstname || any firstname ||
|| String || lastname || any lastname ||
|| String || profilePictureUrl || any profilePictureUrl ||
|| String || email || any email ||
|| Number || externalUserId || if you have any external user Id you may set it here ||
|| String || externalUserType || you can specify your system-name here, for example "moodle" ||
|| Number || room_id || the room id the user should be logged in ||
|| Number || becomeModeratorAsInt || 0 means no Moderator, 1 means Moderator ||
|| Number || showAudioVideoTestAsInt || 0 means don't show Audio/Video Test, 1 means show Audio/Video Test Application before the user is logged into the room ||

==== setUserObjectAndGenerateRoomHashByURL ====

Method: _public Long setUserObjectAndGenerateRoomHashByURL(String SID, String username, String firstname, String lastname,String profilePictureUrl, String email, Long externalUserId, String externalUserType, Long room_id, int becomeModeratorAsInt, int showAudioVideoTestAsInt)_

Description: sets the !SessionObject for a certain SID, after setting this Session-Object you can use the 
SID + a !RoomId to enter any Room. 

++ the user can press f5 to reload the page / use the link several times, the SOAP Gateway does remember the IP of the user and the will only the first user that enters the room allow to re-enter. ... Session-Hashs are deleted 15 minutes after the creation if not used.

available since Issue 1016

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID from getSession ||
|| String || username || any username ||
|| String || firstname || any firstname ||
|| String || lastname || any lastname ||
|| String || profilePictureUrl || any profilePictureUrl ||
|| String || email || any email ||
|| Number || externalUserId || if you have any external user Id you may set it here ||
|| String || externalUserType || you can specify your system-name here, for example "moodle" ||
|| Number || room_id || the room id the user should be logged in ||
|| Number || becomeModeratorAsInt || 0 means no Moderator, 1 means Moderator ||
|| Number || showAudioVideoTestAsInt || 0 means don't show Audio/Video Test, 1 means show Audio/Video Test Application before the user is logged into the room ||

--------

=== !FileService ===

Service-Endpoint:
http://localhost:5080/openmeetings/services/FileService?wsdl
(http://$RED5_HOST:$RED5_HTTP_HOST/openmeetings/services/FileService?wsdl)


==== getListOfFiles ====

Method: _public !LiberaryObject getListOfFiles(String SID, String moduleName,String parentFolder, Long room_id )_

Description: Returns a Library Object. The Library-Object contains a Folders and a Fileslist OR
it contains a !PresentationObject. A !PresentationObject is a List of thumbnails + the reference to the
converted SWF, PDF and the Original Document (The original Document is only included if it is not also a PDF)

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| String || moduleName || Modulename, the Value is 'videoconf1' ||
|| String ||parentFolder || Parent Folder, for the Root of every Room it is blank not '/' ||
|| Long || room_id || the room_id you would like to get the Files ||


==== deleteFile ====

Method: _public Boolean deleteFile(String SID, String fileName, String moduleName, String parentFolder, Long room_id)_

Description: Deletes a file or folder

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| String || fileName || The File or Folder you would like to delete ||
|| String || moduleName || Modulename, the Value is 'videoconf1' for a conference room ||
|| String || parentFolder || Parent Folder, for the Root of every Room it is blank not '/' ||
|| Long || room_id || the room_id of the file  ||

--------

=== !RoomService ===

Service-Endpoint:
http://localhost:5080/openmeetings/services/RoomService?wsdl
(http://$RED5_HOST:$RED5_HTTP_HOST/openmeetings/services/RoomService?wsdl)

==== getRoomsPublic ====

Method: _public RoomsList getRoomsPublic(String SID, Long roomtypes_id)_

Description: Returns an Object of Type [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/data/basic/rooms/RoomsList.java RoomsList] which contains a list of Room-Objects.
Every [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/hibernate/beans/rooms/Rooms.java Room-Object] contains a Roomtype and all informations about that Room. The List of 
current-users in the room is Null if you get them via SOAP.
The Roomtype can be 1 for conference rooms or 2 for audience rooms.

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| Long || roomtypes_id || The type of Rooms you want to get ||

==== getRoomTypes ====

Method: _public List`*`<RoomTypes`*`> getRoomTypes(String SID)_

Description: Returns a List of Objects of [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/hibernate/beans/rooms/RoomTypes.java RoomsType]

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||

==== getRoomById ====

Method: _public Rooms getRoomById(String SID, long rooms_id)_

Description: Returns an Object of [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/hibernate/beans/rooms/Rooms.java Rooms]

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| Long || rooms_id || The Roomid you want to get ||


==== getRoomWithCurrentUsersById ====

Method: _public Rooms getRoomWithCurrentUsersById(String SID, long rooms_id)_

Description: Returns an Object of [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/hibernate/beans/rooms/Rooms.java Rooms] It also fills the attribute *currentUsers* in the Room-Object

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| Long || rooms_id || The Roomid you want to get ||

==== getRooms ====

Method: _public SearchResult getRooms(String SID, int start, int max, String orderby, boolean asc)_

Description: Returns a List of Objects of [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/hibernate/beans/rooms/Rooms.java Rooms]
You can use "name" as value for orderby or rooms_id

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| int || start || The id you want to start ||
|| int || max || The maximum you want to get ||
|| String || orderby || The column it will be ordered ||
|| Boolean || asc || Asc or Desc sort ordering ||


=== getRoomsWithCurrentUsers ===

Method: _public SearchResult getRoomsWithCurrentUsers(String SID, int start, int max, String orderby, boolean asc)_

Description: Returns a List of Objects of [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/hibernate/beans/rooms/Rooms.java Rooms]
You can use "name" as value for orderby or rooms_id. It also fills the attribute *currentUsers* in the Room-Object

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| int || start || The id you want to start ||
|| int || max || The maximum you want to get ||
|| String || orderby || The column it will be ordered ||
|| Boolean || asc || Asc or Desc sort ordering ||

==== addRoom ====

(deprecated use addRoomWithModeration)

Method: _public Long addRoom(String SID, .... see list of Params)_

Description: Create an Objects of [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/hibernate/beans/rooms/Rooms.java Rooms]


Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| String || name || Name of the Room ||
|| Long || roomtypes_id || Type of that room (1 = Conference, 2 = Audience) ||
|| String || comment || any comment ||
|| Long || numberOfPartizipants || the maximum users allowed in this room ||
|| Boolean || ispublic || If this room is public (use true if you don't deal with different Organizations) ||
|| Integer || videoPodWidth || the PodWidth ||
|| Integer || videoPodHeight || the videoPodHeight || 
|| Integer || videoPodXPosition || the videoPodXPosition ||
|| Integer || videoPodYPosition || the videoPodYPosition ||
|| Integer || moderationPanelXPosition || the moderationPanelXPosition ||
|| Boolean || showWhiteBoard || the showWhiteBoard ||
|| Integer || whiteBoardPanelXPosition || the whiteBoardPanelXPosition ||
|| Integer || whiteBoardPanelYPosition || the whiteBoardPanelYPosition ||
|| Integer || whiteBoardPanelHeight || the whiteBoardPanelHeight ||
|| Integer || whiteBoardPanelWidth || the whiteBoardPanelWidth ||
|| Boolean || showFilesPanel || the showFilesPanel ||
|| Integer || filesPanelXPosition || the filesPanelXPosition ||
|| Integer || filesPanelYPosition || the filesPanelYPosition ||
|| Integer || filesPanelHeight || the filesPanelHeight ||
|| Integer || filesPanelWidth || the filesPanelWidth ||


=== addRoomWithModeration ===

Method: _public Long addRoomWithModeration(String SID, .... see list of Params)_

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| String || name || Name of the Room ||
|| Long || roomtypes_id || Type of that room (1 = Conference, 2 = Audience, 3 = Restricted) ||
|| String || comment || any comment ||
|| Long || numberOfPartizipants || the maximum users allowed in this room ||
|| Boolean || ispublic || If this room is public (use true if you don't deal with different Organizations) ||
|| Boolean || appointment || is it a Calendar Room (use false by default) ||
|| Boolean || isDemoRoom || is it a Demo Room with limited time (use false by default) ||
|| Boolean || demoTime || time in seconds after the user will be logged out (only enabled if isDemoRoom is true)||
|| Boolean || isModeratedRoom || Users have to wait untill a Moderator arrives. Use the becomeModerator param in setUserObjectAndGenerateRoomHash to set a user as default Moderator ||

==== updateRoom ====

(deprecated use updateRoomWithModeration)

Method: _public Long updateRoom(String SID, .... see list of Params)_

Description: Update an Objects of [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/hibernate/beans/rooms/Rooms.java Rooms]


Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| Long || rooms_id || Roomid to update ||
|| String || name || Name of the Room ||
|| Long || roomtypes_id || Type of that room (1 = Conference, 2 = Audience) ||
|| String || comment || any comment ||
|| Long || numberOfPartizipants || the maximum users allowed in this room ||
|| Boolean || ispublic || If this room is public (use true if you don't deal with different Organizations) ||
|| Integer || videoPodWidth || the PodWidth ||
|| Integer || videoPodHeight || the videoPodHeight || 
|| Integer || videoPodXPosition || the videoPodXPosition ||
|| Integer || videoPodYPosition || the videoPodYPosition ||
|| Integer || moderationPanelXPosition || the moderationPanelXPosition ||
|| Boolean || showWhiteBoard || the showWhiteBoard ||
|| Integer || whiteBoardPanelXPosition || the whiteBoardPanelXPosition ||
|| Integer || whiteBoardPanelYPosition || the whiteBoardPanelYPosition ||
|| Integer || whiteBoardPanelHeight || the whiteBoardPanelHeight ||
|| Integer || whiteBoardPanelWidth || the whiteBoardPanelWidth ||
|| Boolean || showFilesPanel || the showFilesPanel ||
|| Integer || filesPanelXPosition || the filesPanelXPosition ||
|| Integer || filesPanelYPosition || the filesPanelYPosition ||
|| Integer || filesPanelHeight || the filesPanelHeight ||
|| Integer || filesPanelWidth || the filesPanelWidth ||


=== updateRoomWithModeration ===

Method: _public Long updateRoomWithModeration(String SID, .... see list of Params)_


... List of Params tbd ...


==== deleteRoom ====

Method: _public Long deleteRoom(String SID, long rooms_id)_

Description: Delete an Objects of [http://openmeetings.googlecode.com/svn/trunk/webapp/src/app/org/openmeetings/app/hibernate/beans/rooms/Rooms.java Rooms]


Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| Long || rooms_id || Roomid to delete ||


==== kickUser ====

Method: _public Boolean kickUser(String SID_Admin, Long room_id)_

Description: Removes all Users from a Room


Params:
|| *type* || *name* || *description* ||
|| String || SID_Admin ||a admin user's SessionId ||
|| Long || rooms_id || the room's id of the room to get empty ||


=== getRoomIdByExternalId ===

Method: _public Long getRoomIdByExternalId(String SID, .... see list of Params)_

Params:
|| *type* || *name* || *description* ||
|| String || SID || The SID of the User. This SID must be marked as Loggedin ||
|| String || name || Name of the Room ||
|| Long || roomtypes_id || Type of that room (1 = Conference, 2 = Audience, 3 = Restricted) ||
|| String || comment || any comment ||
|| Long || numberOfPartizipants || the maximum users allowed in this room ||
|| Boolean || ispublic || If this room is public (use true if you don't deal with different Organizations) ||
|| Boolean || appointment || is it a Calendar Room (use false by default) ||
|| Boolean || isDemoRoom || is it a Demo Room with limited time (use false by default) ||
|| Boolean || demoTime || time in seconds after the user will be logged out (only enabled if isDemoRoom is true)||
|| Boolean || isModeratedRoom || Users have to wait untill a Moderator arrives. Use the becomeModerator param in setUserObjectAndGenerateRoomHash to set a user as default Moderator ||
|| Long || externalRoomId || your external room id may set here ||
|| String || externalRoomType || you can specify your system-name or type of room here, for example "moodle" ||