#labels Featured
#sidebar SideBarBuildSource

= Nightly Builds = 

You can find Nightly Builds of the software at: http://nightly.openmeetings.de/openmeetings/builds/

The current status of the Nightly Builds can be seen here: http://nightly.openmeetings.de/hudson/job/openmeetings-trunk/

= How to Build a Distribution =

Get the source:
{{{
svn checkout http://openmeetings.googlecode.com/svn/trunk/singlewebapp/
}}}

Run the command:
{{{
ant
}}}

There is no need to compile the client additionally! The ant task does it all! You will find a directory *dist* that contains !OpenMeetings and a red5-server.

To compile the client you can also use ant:
{{{
ant                           # compiles a complete package into the folder dist
ant compile.laszlo.main       # compiles the client into main.swf8.swf 
ant compile.laszlo.main.debug # compiles the debug-client into maindebug.swf8.swf
}}}

To compile just the openmeetings JAR file:
{{{
ant -f build_openmeetings_jar.xml
}}}


= Run, Develop, Test =

To develop or build !OpenMeetings you download the Project as regular Web-Project.
You need the Subclipse Plugin for Eclipse, a database and a Tomcat Server installed on your system to test and debug the Code.
If you just need to change 3 lines of code then your probably better switch to [http://code.google.com/p/openmeetings/wiki/BuildSourceNew#How_to_build_a_distribution How to build a distribution].

== Step1 - Get required Software ==

To develop !OpenMeetings you need at least:
  * Eclipse in a up to date copy and Java6
  * Subclipse Plugin (to download the Code from the Repository into Eclipse)
  * MySQL (or Postgres, or other Databases supported by Hibernate)
  * Tomcat 6 installed on your system to test and debug the code

== Step2 - Download the Source ==

Advanced Users:
Check out the Code from the Repository as a Dynamic Web-Project into Eclipse.

URL: http://openmeetings.googlecode.com/svn/trunk/singlewebapp/

Add Memory settings to Run Configuration (Run > Run Configurations ...)
Click on Apache Tomcat > Your Server Name 
Second Tab > Arguments 
Add:  -Xms512m -Xmx1024M add the end

=> the webapp will install itself into Context Root.
URL to run is: http://localhost:8080/openmeetings/maindebug.lzx?lzproxied=solo

Step-By-Step:

1) Start Eclipse

2) Change Perspective to SVN Repository Exploring:<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_1.png

3) Select SVN Repository Exploring and click ok.<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_2.png

4) A new Dialog in Eclipse opens *SVN Repositories*<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_3.png

5) Click on the icon with the plus in the top right corner in the SVN Repository Dialog<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_4.png

6) Add the URL http://openmeetings.googlecode.com/svn/trunk/singlewebapp/ and click Finish<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_5.png

7) After download is complete you see a new Source Repository in the Repository Explorer. Right click on it and choose *checkout*<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_6.png

8) In the Dialog the opens now just click next <br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_7.png

9) In the next Dialog just click Finish, Eclipse will then download the sources <br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_8.png

10) After the download is complete you will see a new Project in the Package Explorer Dialog of Eclipse<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_9.png

= Step3 - Deploy and Run =

see the first chapter about the ANT tasks to compile the code.
You will find a directory called *dist* which contains a regular openmeetings including red5. You can then use the usual process like described at InstallationOpenMeetings to run the code then.

= Links =

  * Getting Started with !OpenLaszlo?, checkout [http://www.openlaszlo.org/lps4.2/laszlo-explorer/index.jsp?lzr=swf8 Laszlo-in-10-Minutes] and the [http://www.openlaszlo.org/lps4.2/docs/ Application Developer's Guide] or try the  [http://www.openlaszlo.org/getstarted ScreenCast]
  * [http://code.google.com/p/openmeetings/source/browse browse SVN source]
  * [http://code.google.com/p/openmeetings/source/list SVN change history]
  * [BuildSources old Instructions]

= Tipps and Gotchas =

  * When you run and test !OpenMeetings inside Eclipse, Eclipse may be not able to do conversion using *convert* or *pdf2swf*, cause it has another system_path variables set. You should goto the Administration>Configuration section of !OpenMeetings and set the absolute Path to Image-Magick and SWFTools and it will work again. Uploading of PDFs might fail because of the same reason => the path to Ghostscript cannot be read from the system_path. Unfortunately you cannot overwrite that in the Configuration as its an internal link of Ghostscript. However in production environment you will not run into this Issue, its a development problem.