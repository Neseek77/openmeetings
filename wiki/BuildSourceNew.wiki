#summary Building Source and develop
#labels Featured

#sideBar SideBarBuildSource

= Nightly Builds =

Nightly builds of !OpenMeetings (already embed into Red5) are available at: <br/>
http://i4demo.com/openmeetings/builds/<br/>

= Run, Develop, Test, Debug all in Eclipse =

To develop or build !OpenMeetings you download the Project as regular Web-Project.
You need the Subclipse Plugin for Eclipse, a database and a Tomcat Server installed on your system to test and debug the Code.

== Step1 - Get required Software ==

To develop !OpenMeetings you need at least:
  * Eclipse in a up to date copy and Java6
  * Subclipse Plugin (to download the Code from the Repository into Eclipse)
  * MySQL (or Postgres, or other Databases supported by Hibernate)
  * Tomcat 6 installed on your system to test and debug the code

== Step2 - Download the Source ==

Advanced Users:
Check out the Code from the Repository as a Dynamic Web-Project into Eclipse.

URL: http://openmeetings.googlecode.com/svn/trunk/singlewebapp/

Add Memory settings to Run Configuration (Run > Run Configurations ...)
Click on Apache Tomcat > Your Server Name 
Second Tab > Arguments 
Add:  -Xms512m -Xmx1024M add the end

=> the webapp will install itself into Context Root.
URL to run is: http://localhost:8080/openmeetings/maindebug.lzx?lzproxied=solo

Step-By-Step:

1) Start Eclipse

2) Change Perspective to SVN Repository Exploring:<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_1.png

3) Select SVN Repository Exploring and click ok.<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_2.png

4) A new Dialog in Eclipse opens *SVN Repositories*<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_3.png

5) Click on the icon with the plus in the top right corner in the SVN Repository Dialog<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_4.png

6) Add the URL http://openmeetings.googlecode.com/svn/trunk/singlewebapp/ and click Finish<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_5.png

7) After download is complete you see a new Source Repository in the Repository Explorer. Right click on it and choose *checkout*<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_6.png

8) In the Dialog the opens now just click next <br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_7.png

9) In the next Dialog just click Finish, Eclipse will then download the sources <br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_8.png

10) After the download is complete you will see a new Project in the Package Explorer Dialog of Eclipse<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/checkout_9.png

== Step3 - Build and deploy the code in Eclipse ==

Add Tomcat Server in Eclipse and deploy !OpenMeetings webapp into it

1) Make sure that you have the right default JVM Library (Java 6 is required) in the classpath.<br/>
Right click on the project ROOT and goto > Properties (bottom)<br/>
In the dialog goto Build settings and remove if there is a red-marked Library and fix it like in the screen<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_4_1.png


2) Open the Dialog View *Server* in Eclipse and right click inside, choose ADD > New from the context menu<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_1.png

3) In the upcoming Dialog choose Tomcat 6 as server <br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_2.png

4) Click on the button next to *Choose Tomcat Install Directory* and point to your local Tomcat Installation dir<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_3.png

5) Make sure that the Tomcat server does use Java6 as Runtime environment <br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_4.png

6) Add !OpenMeetings webapp which is called ROOT (select the webapp and click ADD)<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_5.png

7) Click Finish<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_6.png

8) You will see a new Entry in the Server's Dialog of Eclipse including your webapp, right click on it and choose *Publish* <br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_7.png

9) Goto the Package Explorer, WebContent/conf/hibernate.cfg.xml and enter the correct values for user/auth/database <br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_8.png

10) Right click on the Server and *start* <br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_9.png

11) Choose Run > Run Configurations ... from the Eclipse Main Menu and navigate in the Dialog to your new Tomcat Installation like in the Screen. Then goto the Tab Arguments and increase the allowed memory by adding  -Xms512m -Xmx1024M at the end of the arguments. Hit Apply and (re)start tomcat.<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_10.png

12) You can then navigate to the URL in the browser: <br/>
The first thing you probably should do is installing / importing the default values so you run the Installer:<br/>
http://localhost:8080/install<br/>
http://openmeetings.googlecode.com/svn/docs/buildFromSource/deploy_11.png

13) If you have already imported the files into the database you can directly goto the application: <br/>
Debug-Version: http://localhost:8080/openmeetings/maindebug.lzx?lzproxied=solo&lzr=swf8<br/>
Normal-Version: http://localhost:8080/openmeetings/main.lzx?lzproxied=solo&lzr=swf8<br/>
<br/>

= How to create .war =

_It is recommended to deploy !OpenMeetings in the standalone version_

  * Run the ant - dist
  * (eventually you have to run "ant signWebStartJars" after that again)
  * Export in Eclipse a .war file

Note: The Project is called ROOT. You can only have ONE Root project by Application Server. We need to to that as its required for supporting RTMPT in RED5.
So the !OpenMeetings will automatically become your Context Root in Tomcat (or whatever Java Application Server)

= How to build a distribution =

Run the command: ant -f build_red5webapp.xml dist

There is no need to compile the client additionally! the ant task does it all!
You will find a directory *dist* that contains !OpenMeetings and a red5-server.

to compile the client you can also use ant:<br/>
ant -f build_red5webapp.xml dist (compiles a complete package into the folder dist)<br/>
ant -f build_red5webapp.xml compile.laszlo.main (compiles the client into main.swf8.swf)<br/>
ant -f build_red5webapp.xml compile.laszlo.main.debug (compiles the debug-client into maindebug.swf8.swf)<br/>
<br/>
to compile just the openmeetings JAR file:<br/>
ant -f build_openmeetings_jar.xml<br/>

= Links =

  * Getting Started with !OpenLaszlo?, checkout [http://www.openlaszlo.org/lps4.2/laszlo-explorer/index.jsp?lzr=swf8 Laszlo-in-10-Minutes] and the [http://www.openlaszlo.org/lps4.2/docs/ Application Developer's Guide] or try the  [http://www.openlaszlo.org/getstarted ScreenCast]

  * [http://code.google.com/p/openmeetings/source/browse browse SVN source]
  * [http://code.google.com/p/openmeetings/source/list SVN change history]
  * [BuildSources old Instructions]

= Tipps and Gotchas =

  * When you run and test !OpenMeetings inside Eclipse, Eclipse may be not able to do conversion using *convert* or *pdf2swf*, cause it has another system_path variables set. You should goto the Administration>Configuration section of !OpenMeetings and set the absolute Path to Image-Magick and SWFTools and it will work again. Uploading of PDFs might fail because of the same reason => the path to Ghostscript cannot be read from the system_path. Unfortunately you cannot overwrite that in the Configuration as its an internal link of Ghostscript. However in production environment you will not run into this Issue, its a development problem.