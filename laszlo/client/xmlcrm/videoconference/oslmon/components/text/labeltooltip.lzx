<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="labeltooltip" extends="view" visible="false" >

	<attribute name="inittwice" value="false" type="boolean" />
    
    <attribute name="ismenubuttonlabel" value="false" type="boolean" />
    <attribute name="holder" value="null" />
    <handler name="onmouseover" reference="this.parent">
    	if (this.ismenubuttonlabel){
    		this.parent.setLabel();
    	}
    	if (this.inittwice){
    		this.setAttribute('text',canvas.getLabelName(this.labelid));
    	}
        var xVal = canvas.getMouse('x');
        var yVal = canvas.getMouse('y');
		////Debug.write("mytext: ",this.mytext);
        this.holder = new xmlcrmtooltip(canvas,{text:this.text,holder:this});
        <![CDATA[
        if (xVal<canvas.width/2){
            xVal += 0;
        } else {
            xVal -= this.holder.width-14;
        }
        if (yVal<canvas.height/2){
            yVal += 24;
        } else {
            yVal -= 24;
        }
        this.holder.setAttribute('x',xVal);
        this.holder.setAttribute('y',yVal);
        ]]>        
    </handler>
    <handler name="onmouseout" reference="this.parent">
        this.holder.destroy();
    </handler>
    <handler name="onclick" reference="this.parent">
        this.holder.destroy();
    </handler>    
    <attribute name="labelid" type="number" setter="setLabelId(labelid)" />
    <method name="setLabelId" args="_labelid" >
        this.labelid = _labelid;
        this.setAttribute('text',canvas.getLabelName(this.labelid));
    </method>
    <attribute name="text" value="" type="string" />
</class>

<class name="xmlcrmtooltip" extends="view" bgcolor="0x000000" 
    width="${ this._text.width+2 }" height="${ this._text.height+2 }" >
    <attribute name="text" value="" type="string" />
    <attribute name="holder" value="null" />
    <text x="1" y="1" text="${ parent.text }" resize="true" 
        fontsize="10" name="_text" bgcolor="0xFFFFFF" />
    <handler name="onmouseout">
        this.destroy();
    </handler>
    <handler name="oninit">
        this.setShadow();
    </handler>
    <method name="setShadow" >
        <![CDATA[
        if (this.isinited){
            this.normalMC = this.getMCRef();
           	this.displacementMap = new flash.filters.DropShadowFilter();
            this.normalMC.filters = [this.displacementMap];
        }
        ]]>              
    </method> 
</class>

</library>