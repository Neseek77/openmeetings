<library>

<!---
	extends the baseVideoStream with functions to catch Device Events
	this Class uses Events from the Base Class baseVideoStream
	onmicro and oncamera, which are thrown, once a device was set
 -->

<class name="baseVideoStreamDevice" extends="baseVideoStream">

    <switch>
        <when property="$as3">
            <passthrough>
                import flash.events.StatusEvent;
                import flash.events.ActivityEvent;
            </passthrough>
        </when>
    </switch>

	<!--- Shows if there is Activity on the Microphone -->
	<attribute name="micactive" value="false" type="boolean" />
	
    <!--- Level delegate, used to track level changes. 
          @keywords private -->
    <attribute name="_leveldel" value="$once{new LzDelegate(this, '_updateLevel')}"/>
    
    <!--- Audio level, 0-100, the amount of sound detected by this microphone.
          Reset to 0 when there is no audio (no activity or not allowed).
          @keywords readonly -->
    <attribute name="level" type="number" value="0"/>    
        	
	<!--- Shows if there is Activity on the Camera -->
	<attribute name="camactive" value="false" type="boolean" />
	
	<!--- 
	Message to send to Clients
	 -->
	<attribute name="objMessage" value="null" />
	<!--- 
		indicates if the message should be send, you can change the notification 
		level by changing the loudnessAcitviation in the config.xml
	 -->
	<attribute name="isgreater" value="false" type="boolean" />     
	
	<attribute name="doSendNotification" value="true" type="boolean" />	
	
	<event name="sendCameraStatus" />
    
    <event name="sendMicroStatus" />
    
	<handler name="oncamera" args="c">
		//if ($debug) Debug.write("Cam: ",c);
        c.addEventListener(ActivityEvent.ACTIVITY, onActivity);
        c.addEventListener(StatusEvent.STATUS, onStatus);
	</handler>

    <method name="onStatus" args="stats">
        if ($debug) Debug.write("CamStatus: ",stats);
        this.sendCameraStatus.sendEvent(stats.code);
    </method>

    <method name="onActivity" args="event">
        this.setAttribute("camactive", event.activating);
    </method>
	
	<handler name="onmicro" args="m">
		//if ($debug) Debug.write("Mic: ",m);
		var t = this;
        m.addEventListener(ActivityEvent.ACTIVITY, onMicActivity);
        m.addEventListener(StatusEvent.STATUS, onMicStatus);
	</handler>

    <method name="onMicStatus" args="stats">
    	if ($debug) Debug.write("onMicStatus 1: ",stats);
        this.sendMicroStatus.sendEvent(stats.code);
    </method>

    <method name="onMicActivity" args="event">
        //if ($debug) Debug.write("onMicActivity: ",event);
        this.setAttribute("micactive", event.activating);
    </method>
	
		<!--- Handler for the Flash Microphone onActivity callback. 
              @keywords private -->
	<handler name="onmicactive">
		<![CDATA[
            if (this.onlevel) {
                if (this.micactive) {
                    this._leveldel.register(lz.Idle, "onidle");
                } else {
                    this._leveldel.unregisterAll();
                    this.setAttribute("level", 0);
                }
            }
		]]>
	</handler>
	
    <!--- Handler for updating the microphone activity level attribute. 
          @keywords private -->
    <method name="_updateLevel" args="arg">
    	<![CDATA[
            var level = this.micro.activityLevel;
            if (level < 0) {
                level = 0;
            }
            if (level != this.level) {
                this.setAttribute("level", level);
            }
		]]>
	</method>	
	
    <!-- 
	    these methods send a Notification to all Connected users of a 
	    Room about the onActivity-Change
     -->
	<handler name="onlevel">
		<![CDATA[
		    if (!this.doSendNotification){
		    	return;
		    }
		
    		//this.parent.parent.parent._loudness.loudness.setAttribute('text',this.level);
			if (this.level>canvas.loudnessAcitviation) {
				if (!this.isgreater) {
					this.isgreater = true;
					this.sendNotification();
				}
			} else {
				if (this.isgreater) {
					this.isgreater = false;
					this.sendNotification();
				}
			}
		]]>
	</handler>    
	<method name="sendNotification">
		//if ($debug) Debug.write("Level sendNotification ",this.isgreater);
  		this.objMessage = new Array ();
  		this.objMessage[0] = 'audioActivity';
  		this.objMessage[1] = this.isgreater;
  		this.objMessage[2] = parent.parent.publicSID;
	  	canvas.videoComp_lc.send(canvas.videoComp_lc_name, "sendNotification", this.objMessage);
	</method>

</class>


</library>
