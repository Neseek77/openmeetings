<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project name="openmeetings" basedir="./" default="dist">

	<!-- Sources and output dirs -->
	<property name="main.src.dir" value="${basedir}/src/app"/>
	<property name="webstart.src.dir" value="${basedir}/src/screenviewer"/>
	<property name="templates.src.dir" value="${basedir}/src/templates"/>
	<property name="test.src.dir" value="${basedir}/src/test"/>
	<property name="server.src.dir" value="${basedir}/src/server"/>
	<property name="client.src.dir" value="${basedir}/src/client"/>
	<property name="main.out.dir" value="${basedir}/bin"/>
	
	<!-- Red5 dir -->
	<property name="red5.server.dir" value="red5-1.0.0-RC1"/>

	<!-- screen.out.dir -->
	<property name="screen.out.dir" value="${basedir}/screen_compile" />
	<!-- screen.src.dir -->
	<property name="screen.src.dir" value="${basedir}/src/red5-screenshare" />
	
	<!-- hudson config -->
	<property environment="env" />

	<property name="build.number.hudson" value="${env.BUILD_NUMBER}" />
	<property name="build.svn.hudson" value="${env.SVN_REVISION}" />
	<property name="build.target" value="/home/swagner/apache-tomcat-6.0.18/webapps/openmeetings/builds/" />

	<!-- Axis2 Services -->
	<property name="fileservice.src.dir" value="${basedir}/src/fileservice"/>
	<property name="roomservice.src.dir" value="${basedir}/src/roomservice"/>
	<property name="userservice.src.dir" value="${basedir}/src/userservice"/>

	<property name="classes.dir" value="${basedir}/bin"/>
	<property name="dist.dir" value="dist"/>
	<property name="red5.root" value="${dist.dir}/red5"/>
	<property name="report.dir" value="${basedir}/junitreport"/>

	<!-- Conf dirs -->
	<property name="conf.dir" value="${basedir}/conf"/>

	<!-- Distribution properties -->
	<property name="project.distname" value="openmeetings"/>

	<!-- screenshare.out.dir -->
	<property name="screenshare.out.dir" value="${dist.dir}/red5/webapps/${project.distname}/red5-screenshare" />
	
	<!-- libraries -->
	<property name="project.lib" value="${basedir}/lib"/>

	<!-- LPS Properties -->
	<property name="out.dir.swf" value = "${basedir}/${dist.dir}/red5/webapps/${project.distname}/" />
	<property name="laszlo.home" value="${basedir}/openlaszlo"/>
	<property name="webcontent.src.dir" value="${basedir}/WebContent"/>
	<property name="laszlo.src.dir" value="${webcontent.src.dir}/${project.distname}"/>
	<property name="laszlo.debug" value="false"/>
	<property name="laszlo.proxied" value = "solo"/>

	<path id = "laszlo.lib">
		<!-- swf8 -->
		<fileset dir = "${laszlo.home}/WEB-INF/lib" includes="saxon-6.5.3-lz-p1.jar jakarta-regexp-1.2.jar
			commons-collections.jar jdom.jar log4j-1.2.6.jar lps-4.9.0.jar batik-all-flex.jar velocity-dep-1.4-flex.jar"/>
		<!-- swf10 -->
		<fileset dir = "${laszlo.home}/WEB-INF/lib" includes="mxmlc*.jar flex-messaging-common.jar swfutils.jar asc.jar
			fxgutils.jar"/>
	</path>

	<!-- Open JPA -->
	<property name="openjpa.lib" value="${project.lib}/openjpa2"/>
	<!--JDBC Drivers-->
	<property name="database.lib" value="${project.lib}/database" />
	<property name="red5.lib" value="${basedir}/${red5.server.dir}/red5" />
	<property name="red5.server.lib" value="${basedir}/${red5.server.dir}/red5/lib" />
	<property name="spring.lib" value="${project.lib}/spring" />
	<property name="upload.lib" value="${project.lib}/upload" />
	<property name="xstream.lib" value="${project.lib}/xstream" />
	<property name="web.lib" value="${project.lib}" />
	<property name="ical.lib" value="${project.lib}/ical4j" />
	<!-- Apache Axis2 -->
	<property name="axis2.lib" value="${project.lib}/axis2-1.6" />
	<!-- JMF Libe -->
	<property name="jmf.lib" value="${project.lib}/jmf" />
	<!-- SLF4J -->
	<property name="slf4j.lib" value="${project.lib}/slf4j" />
	<!-- Apache Velocity -->
	<property name="velocity.lib" value="${project.lib}/velocity" />
	<!-- Apache Batik -->
	<property name="batik.lib" value="${project.lib}/batik_17" />
	<property name="java2swf.lib" value="${project.lib}/java2swf" />
	<!-- Junit -->
	<property name="junit.lib" value="${project.lib}/junit" />

	<!-- screenshare.lib -->
	<property name="screenshare.lib" value="${basedir}/WebContent/red5-screenshare" />

	<!-- compile classpath -->
	<path id="compile.classpath">
		<fileset dir="${openjpa.lib}" includes="*.jar"/>
		<fileset dir="${spring.lib}" includes="*.jar"/>
		<fileset dir="${project.lib}" includes="*.jar"/>
		<fileset dir="${red5.lib}" includes="*.jar"/>
		<fileset dir="${red5.server.lib}" includes="*.jar"/>
		<fileset dir="${upload.lib}" includes="*.jar"/>
		<fileset dir="${xstream.lib}" includes="*.jar"/>
		<fileset dir="${junit.lib}" includes="*.jar" excludes="red5.jar"/>
		<fileset dir="${web.lib}" includes="*.jar"/>
		<fileset dir="${slf4j.lib}" includes="*.jar"/>
		<fileset dir="${axis2.lib}" includes="*.jar"/>
		<fileset dir="${velocity.lib}" includes="*.jar"/>
		<fileset dir="${batik.lib}" includes="*.jar"/>
		<fileset dir="${ical.lib}" includes="*.jar"/>
		<fileset dir="${java2swf.lib}" includes="*.jar"/>
		<fileset dir="${jmf.lib}" includes="*.jar"/>
		<fileset dir="${junit.lib}" includes="*.jar"/>
		<fileset dir="${screenshare.lib}" includes="*kunststoff.jar"/>
	</path>

	<!-- screenshare classpath -->
	<path id="screenshare.classpath">
		<fileset dir="${screenshare.lib}" includes="*.jar"/>
	</path>

	<!-- build webapp -->

	<target name="dist" description="binary distribution of OpenMeetings"
        depends="cleanForBinary, jar, compile.laszlo.main, enhance, signWebStartJars">

	</target>

	<!-- compiles the sources without the laszlo client -->
	<target name="dist-test" description="binary distribution of OpenMeetings"
        depends="cleanForBinary, jar, signWebStartJars">

	</target>

	<!-- compiles the sources only with laszlo debug client -->
	<target name="dist-debug" description="binary distribution of OpenMeetings"
        depends="cleanForBinary, jar, compile.laszlo.main.debug, signWebStartJars">

	</target>


	<!-- Check timestamp on files -->
	<target name="prepare">
		<mkdir dir="${screen.out.dir}" />
		<mkdir dir="${dist.dir}" />
		<copy todir="${screenshare.out.dir}" filtering="true">
			<fileset dir="${screenshare.lib}" />
		</copy>
		<copy todir="${dist.dir}" filtering="true">
			<fileset dir="${red5.server.dir}">
				<exclude name="**/*.fla"/>
			</fileset>
		</copy>
		<copy todir="${dist.dir}/red5/lib">
			<fileset dir="${spring.lib}"/>
		</copy>

		<!-- this package contains the javax.persistance.* API of JAVA-EE-6 -->
		<copy file="${openjpa.lib}/geronimo-jpa_2.0_spec-1.1.jar" todir="${dist.dir}/red5/lib"/>

		<copy todir="${dist.dir}/red5/webapps/${project.distname}/WEB-INF/lib">
			<fileset dir="${openjpa.lib}">
				<include name="*.jar"/>
				<exclude name="commons-collections-3.2.1.jar"/>
				<!-- this jar is already in the servers-lib -->
				<exclude name="geronimo-jpa_2.0_spec-1.1.jar"/>
			</fileset>
		</copy>

		<copy todir="${dist.dir}/red5/webapps/${project.distname}/WEB-INF/red5-services">
			<fileset dir="${webcontent.src.dir}/WEB-INF/red5-services" includes="*.xml"/>
		</copy>
		<copy todir="${dist.dir}/red5/webapps/${project.distname}">
			<fileset dir="${webcontent.src.dir}">
				<include name="*.html"/>
			</fileset>
		</copy>
		<copy todir="${dist.dir}/red5/webapps/${project.distname}/WEB-INF">
			<fileset dir="${webcontent.src.dir}/WEB-INF">
				<include name="*.xml"/>
				<include name="*.properties"/>
				<exclude name="root-*.xml"/>
			</fileset>
		</copy>

		<chmod dir="${dist.dir}/red5" perm="755" includes="**/*.sh"/>
		<chmod dir="${dist.dir}/red5/webapps/${project.distname}/screen" perm="755" includes="**/*.sh"/>
		<chmod dir="${dist.dir}/red5/webapps/${project.distname}/jod" perm="755" includes="**/*.sh"/>

		<copy todir="${dist.dir}/red5/webapps/${project.distname}/WEB-INF/lib">
			<fileset dir="${axis2.lib}">
				<include name="*.jar"/>
				<exclude name="commons-codec-1.3.jar"/>
			</fileset>
			<fileset dir="${velocity.lib}"/>
			<fileset dir="${batik.lib}"/>
			<fileset dir="${upload.lib}"/>
			<fileset dir="${xstream.lib}"/>
			<fileset dir="${database.lib}"/>
			<fileset dir="${ical.lib}"/>
			<fileset dir="${java2swf.lib}"/>
			<fileset dir="${jmf.lib}" includes="*.jar"/>
		</copy>

		<copy todir="${dist.dir}/red5/webapps/${project.distname}/WEB-INF/classes/META-INF">
			<fileset file="src/META-INF/*.xml">
				<exclude name="services.xml"/>
			</fileset>
		</copy>

		<chmod dir="${dist.dir}/red5/webapps/${project.distname}/WEB-INF/lib" perm="755" includes="**/*.sh"/>

		<!-- add language files from .war version -->
		<copy todir="${dist.dir}/red5/webapps/${project.distname}/languages">
			<fileset dir="WebContent/languages">
			</fileset>
		</copy>
		<copy todir="${dist.dir}/red5/webapps/${project.distname}/conf">
			<fileset dir="WebContent/conf">
			</fileset>
		</copy>

		<!-- add templates -->
		<copy todir="${dist.dir}/red5/webapps/${project.distname}/WEB-INF/classes">
			<fileset dir="src/templates" />
		</copy>

		<tstamp/>
	</target>


	<!-- Copy any resource or configuration files -->
	<target name="resources">

		<!-- Main Applications -->
		<copy todir="${main.out.dir}" includeEmptyDirs="yes">
			<fileset dir="${main.src.dir}">
				<patternset>
					<include name="**/*.conf"/>
					<include name="**/*.properties"/>
					<include name="**/*.xml"/>
					<include name="**/*.png"/>
					<include name="**/*.vm"/>
				</patternset>
			</fileset>
			<fileset dir="${webstart.src.dir}">
				<patternset>
					<include name="**/*.conf"/>
					<include name="**/*.properties"/>
					<include name="**/*.xml"/>
					<include name="**/*.png"/>
					<include name="**/*.vm"/>
				</patternset>
			</fileset>

			<fileset dir="${templates.src.dir}">
				<patternset>
					<include name="**/*.conf"/>
					<include name="**/*.properties"/>
					<include name="**/*.xml"/>
					<include name="**/*.png"/>
					<include name="**/*.vm"/>
				</patternset>
			</fileset>
		</copy>

		<!-- Screen Share Application -->
		<copy todir="${screen.out.dir}" includeEmptyDirs="yes">
			<fileset dir="${screen.src.dir}">
				<patternset>
					<include name="**/*.xml"/>
					<include name="**/*.png"/>
				</patternset>
			</fileset>
		</copy>

	</target>

	<!-- Compile JAR -->
	<target name="jar" description="Make Archive" depends="enhance">
		<tstamp prefix="build">
			<format property="TODAY" pattern="d-MMMM-yyyy" locale="en"/>
		</tstamp>
		<manifestclasspath property="jar.classpath" jarfile="${project.distname}.jar">
			<classpath refid="compile.classpath"/>
		</manifestclasspath>
		<manifestclasspath property="jar2.classpath" jarfile="${project.distname}.jar">
			<classpath refid="screenshare.classpath"/>
		</manifestclasspath>
		<jar destfile="${dist.dir}/red5/webapps/${project.distname}/WEB-INF/lib/${project.distname}.jar">
			<fileset dir="${classes.dir}">
				<include name="**"/>
				<exclude name="**/test/**"/>
				<exclude name="**/axis/**"/>
				<exclude name="**/webstart/**"/>
				<exclude name="**/client/**"/>
				<exclude name="**/*.png"/>
				<exclude name="**/*.vm"/>
				<exclude name="log4j.properties"/>
			</fileset>
			<manifest>
				<attribute name="Built-By" value="OpenMeetings - http://openmeetings.googlecode.com"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
				<attribute name="Class-Path" value="conf/ ${jar.classpath}"/>
			</manifest>
		</jar>
		<jar destfile="${dist.dir}/red5/webapps/${project.distname}/screen/screenviewer.jar">
			<fileset dir="${classes.dir}">
				<include name="**/webstart/**"/>
				<include name="**/*png"/>
			</fileset>
			<manifest>
				<attribute name="Built-By" value="OpenMeetings - http://openmeetings.googlecode.com"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
				<attribute name="Class-Path" value="conf/ ${jar.classpath}"/>
			</manifest>
		</jar>
		<jar destfile="${dist.dir}/red5/webapps/${project.distname}/screen/${project.distname}-client.jar">
			<fileset dir="${classes.dir}">
				<include name="log4j.properties" />
				<include name="**/client/**"/>
				<include name="**/*png"/>
			</fileset>
			<manifest>
				<attribute name="Built-By" value="OpenMeetings - http://openmeetings.googlecode.com"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
				<attribute name="Class-Path" value="conf/ ${jar.classpath}"/>
			</manifest>
		</jar>
		<jar destfile="${dist.dir}/red5/webapps/${project.distname}/screen/viewer.jar">
			<fileset dir="${classes.dir}">
				<include name="**/jrdesktop/**"/>
				<include name="**/*png"/>
			</fileset>
			<manifest>
				<attribute name="Built-By" value="OpenMeetings - http://openmeetings.googlecode.com"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
				<attribute name="Class-Path" value="conf/ ${jar.classpath}"/>
			</manifest>
		</jar>
		<jar destfile="${dist.dir}/red5/webapps/${project.distname}/screen/rtpviewer.jar">
			<fileset dir="${classes.dir}">
				<include name="log4j.properties" />
				<include name="**/de/**"/>
				<exclude name="**/applet/**"/>
			</fileset>
			<manifest>
				<attribute name="Built-By" value="OpenMeetings - http://openmeetings.googlecode.com"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
				<attribute name="Class-Path" value="conf/ ${jar.classpath}"/>
			</manifest>
		</jar>

		<!-- Build WebServices -->
		<jar destfile="${dist.dir}/red5/webapps/${project.distname}/WEB-INF/services/OpenMeetingsService.aar">
			<fileset dir="src/">
				<include name="META-INF/services.xml"/>
			</fileset>
		</jar>

		<jar destfile="${dist.dir}/red5/webapps/${project.distname}/WEB-INF/lib/openmeetings-WebService.jar">
			<fileset dir="${classes.dir}">
				<include name="**/openmeetings/axis/**"/>
			</fileset>
		</jar>

		<jar destfile="${dist.dir}/red5/webapps/${project.distname}/screen/rtpapplet.jar">
			<fileset dir="${classes.dir}">
				<include name="**/applet/**"/>

			</fileset>
			<manifest>
				<attribute name="Built-By" value="OpenMeetings - http://openmeetings.googlecode.com"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
				<attribute name="Class-Path" value="conf/ ${jar.classpath}"/>
			</manifest>
		</jar>
		<!-- Screen Share -->
		<jar destfile="${screenshare.out.dir}/red5-screenshare.jar">
			<fileset dir="${screen.out.dir}">
				<include name="**/**"/>
			</fileset>
			<manifest>
				<attribute name="Built-By" value="OpenMeetings - http://openmeetings.googlecode.com"/>
				<attribute name="Built-On" value="${build.TODAY}"/>
				<attribute name="Class-Path" value="conf/ ${jar2.classpath}"/>
			</manifest>
		</jar>

	</target>

	<target name="signWebStartJars">
		<delete file="filetest.keystore" />
		<genkey alias="filetest"
          storepass="secret"
          keystore="filetest.keystore"
          verbose="true">
			<dname>
				<param name="CN" value="Sebastian Wagner"/>
				<param name="OU" value="technology"/>
				<param name="O"  value="openmeetings.googlecode.com"/>
				<param name="C"  value="DE"/>
			</dname>
		</genkey>
		<signjar
            alias="filetest" keystore="filetest.keystore"
            storepass="secret"
            lazy="false"
            >
			<path>
				<fileset dir="${dist.dir}/red5/webapps/${project.distname}/screen" >
					<include name="**/*.jar" />

				</fileset>
				<fileset dir="${screenshare.out.dir}" >
					<include name="**/*.jar" />
				</fileset>
			</path>
		</signjar>
	</target>

	<target name = "compile.laszlo.main" depends="compile.laszlo.main.debug">
		<java classname = "org.openlaszlo.compiler.Main" fork = "true"
	        newenvironment="true"
	        failonerror="true"
	        dir = "${laszlo.src.dir}"
	        classpathref="laszlo.lib"
	       >
			<jvmarg value = "-DLPS_HOME=${laszlo.home}"/>
			<jvmarg value = "-Dlzdebug=${laszlo.debug}"/>
			<jvmarg value = "-Dlzproxied=${laszlo.proxied}"/>
			<jvmarg value = "-Xms1024M"/>
			<jvmarg value = "-Xmx1024M"/>
			<arg line="--runtime=swf8 --dir ${out.dir.swf} --mcache on --onerror warn main.lzx" />
		</java>
	</target>

	<target name = "compile.laszlo.main.debug">
		<java classname = "org.openlaszlo.compiler.Main" fork = "true"
	        newenvironment="true"
	        failonerror="true"
	        dir = "${laszlo.src.dir}"
	        classpathref="laszlo.lib"
	       >
			<jvmarg value = "-DLPS_HOME=${laszlo.home}"/>
			<jvmarg value = "-Dlzdebug=${laszlo.debug}"/>
			<jvmarg value = "-Dlzproxied=${laszlo.proxied}"/>
			<jvmarg value = "-Xms1024M"/>
			<jvmarg value = "-Xmx1024M"/>
			<arg line="--runtime=swf8 --dir ${out.dir.swf} --mcache on --onerror warn maindebug.lzx" />
		</java>
	</target>

	<!-- Normal build of application
    compiler="org.eclipse.jdt.core.JDTCompilerAdapter" -->
	<target name="compile" depends="prepare, resources">
		<echo message="Compile main to ${main.out.dir}">
		</echo>
		<javac debug="on" debuglevel="lines,vars,source" destdir="${main.out.dir}" >
			<src path="${server.src.dir}" />
			<src path="${main.src.dir}" />
			<classpath refid="compile.classpath"/>
			<compilerarg value="-Aopenjpa.metamodel=true"/>
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${webstart.src.dir}" destdir="${main.out.dir}" >
			<classpath refid="compile.classpath"/>
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${templates.src.dir}" destdir="${main.out.dir}" >
			<classpath refid="compile.classpath"/>
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${client.src.dir}" destdir="${main.out.dir}" >
			<classpath refid="compile.classpath"/>
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${test.src.dir}" destdir="${main.out.dir}" >
			<classpath refid="compile.classpath"/>
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${fileservice.src.dir}" destdir="${main.out.dir}" >
			<classpath refid="compile.classpath"/>
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${roomservice.src.dir}" destdir="${main.out.dir}" >
			<classpath refid="compile.classpath"/>
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${userservice.src.dir}" destdir="${main.out.dir}" >
			<classpath refid="compile.classpath"/>
		</javac>
		<echo message="Compile screen share to ${screen.out.dir}">
		</echo>
		<!-- compile screen share -->
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${screen.src.dir}" destdir="${screen.out.dir}" >
			<classpath refid="screenshare.classpath"/>
		</javac>
	</target>

	<target name="doStartServer" depends="compile">
		<junit>
			<classpath refid="compile.classpath"/>
			<formatter type="plain"/>

			<test name="org.openmeetings.server.TestSocket" />
		</junit>
	</target>

	<target name="hudson" depends="dist">
		<mkdir dir="${build.target}${build.number.hudson}"/>
		<zip destfile="${build.target}${build.number.hudson}/openmeetings_r${build.svn.hudson}.zip"
		       basedir="${dist.dir}/red5" />
	</target>

	<!-- Remove classes directory for clean build -->
	<target name="clean" depends="cleanForBinary" 
        description="Prepare for clean build">
		<delete dir="${main.out.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>

	<target name="cleanForBinary" description="Clean For Binary">
		<delete dir="${dist.dir}"/>
		<delete dir="${screen.out.dir}"/>
		<delete dir="${main.out.dir}"/>
		<delete dir="${report.dir}"/>
		<delete file="filetest.keystore" />
	</target>

	<path id="jpa.enhancement.classpath">
		<pathelement path="${classes.dir}"/>
		<!-- lib contains all of the jars that came with the OpenJPA binary download -->
		<fileset dir="${openjpa.lib}" includes="*.jar" />
		<fileset dir="${openjpa.lib}" includes="*.jar" />
	</path>

	<!-- define the openjpac task -->
	<taskdef name="openjpac" classname="org.apache.openjpa.ant.PCEnhancerTask">
		<classpath refid="jpa.enhancement.classpath"/>
	</taskdef>

	<target name="enhance" depends="compile">
		<!-- invoke the enhancer -->
		<openjpac>
			<classpath refid="jpa.enhancement.classpath"/>
			<config propertiesFile="src/META-INF/persistence.xml"/>
		</openjpac>
		<echo message="Enhancing complete."/>
	</target>

	<!-- Build entire project -->
	<target name="build project" depends="clean, prepare, compile"/>

	<!-- Unit Tests -->
	<property name="om.dist.webapp" value="${red5.root}/webapps/${project.distname}"/>

	<condition property="junit.test.pattern" value="${testcases}" else="Test*">
		<isset property="testcases" />
	</condition>

	<path id="junit.classpath">
		<fileset dir="${red5.root}" includes="*.jar" />
		<path refid="compile.classpath" />
		<pathelement path="${classes.dir}" />
		<pathelement path="src" />
		<fileset dir="${red5.root}/lib" includes="*.jar" />
		<fileset dir="${database.lib}" includes="*.jar" />
		<pathelement path="${red5.root}/conf" />
		<pathelement path="${om.dist.webapp}" />
		<pathelement path="${om.dist.webapp}/WEB-INF" />
	</path>
	<target name="test" depends="enhance" description="Will run all tests unless -Dtestcases=_file_name_pattern_ will be passed">
		<mkdir dir="${report.dir}"/>
		<property name="myclsp" refid="junit.classpath" />
		<!--		<echo message="${myclsp}" /> -->
		<junit printsummary="yes">
			<classpath refid="junit.classpath"/>
			<jvmarg value="-Dred5.root=${red5.root}"/>
			<jvmarg value="-Dred5.config_root=${red5.root}/conf"/>
			<formatter type="plain"/>
			<batchtest fork="yes" todir="${report.dir}">
				<fileset dir="${main.out.dir}">
					<include name="org/openmeetings/test/**/${junit.test.pattern}"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
</project>
