<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="sharedObject" extends="node">

	<attribute name="so" value="null" />
	<attribute name="onStatus" value="null" />
	

	<method name="connect" args="so_Name,nc,persistant">

		//Debug.write("connect SharedObject: ",nc.uri);
		this.so = SharedObject.getRemote(so_Name,nc.uri,persistant); 
		
		var t = this;
		this.so.onSync = function (evtObj){
			if (t.onStatus)t.onStatus.sendEvent(evtObj);
			//_root.Debug.write.write("Shared Object onSync",evtObj,arguments);
		}
		
		this.so.connect(nc);
		
	</method>
	
    
    <method name="getRemote" args="so_Name,nc,persistant">

        //Debug.write("connect SharedObject: ",nc.uri);
        this.so = SharedObject.getRemote(so_Name,nc.uri,persistant); 

        var t = this;
        this.so.onSync = function (evtObj){
            if (t.onStatus)t.onStatus.sendEvent(evtObj);
            //_root.Debug.write.write("Shared Object onSync",evtObj,arguments);
        }
    </method>
    
    <!--- create Object if not existing  -->
    <method name="getLocal" args="name">

        this.so = SharedObject.getLocal(name); 

        var t = this;
        this.so.onSync = function (evtObj){
            if (t.onStatus)t.onStatus.sendEvent(evtObj);
            //_root.Debug.write.write("Shared Object onSync",evtObj,arguments);
        }
        
    </method>
    
    <!--- 
        force write to disk
        @return true(success) false(User has forbidden to store data local)
      -->
    <method name="flush">
        return this.so.flush();
    </method>

    <method name="getData" args="key">
        if (this.so.data["key"] == undefined){
            return null;
           //_root.Debug.write.write("key undefined",key);
        } else {
            return this.so.data["key"];
        }
    </method>
	
    <method name="setData" args="key,val">
    	//Debug.write("this...... so: ",this.so);
        this.so.data["key"] = val;
    </method>

		
</class>

</library>
