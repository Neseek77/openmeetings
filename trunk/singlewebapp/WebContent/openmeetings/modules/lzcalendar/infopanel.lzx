<library>
    <!-- LIBRARY: INFO PANEL ============================================== -->
    <!-- Here is where I will use states to fill out the various panels     -->
    <!-- start and end date.                                                -->
    <!-- ================================================================== -->
    <!-- more comments on use -->
    <!-- get rid of Debug.code -->

    <include href="basepanel.lzx" />    
    <include href="base/basetabslider.lzx"/>
    <include href="textbox.lzx" />


    <!-- CLASS: infoTab ================================================== -->
    <!-- ================================================================= -->
    <class name="infoTab" extends="basetabelement" clickable="false" bgcolor="0xEEF0EB" 
        clip="true">

        <!-- ATTRIBUTES -->
        <attribute name="minheight" value="21"/>
        <attribute name="label" type="string" />
        <attribute name="defaultplacement" value="interior" type="string"/>

        <!-- VIEWS -->
        <view name="top" bgcolor="0xEEF0EB"
            width="${immediateparent.width}" height="${parent.minheight}"
            onclick="classroot.parent.openTab(classroot,true)">
            <view name="tline" height="1" width="${parent.width}"
                bgcolor="0xFDFFFF" y="0"/>
            <view name="bline" height="1" width="${parent.width}"
                bgcolor="0xC6C7C4" y="${parent.height - 1}"  />
            <text name="ttl" width="150" x="5" y="1"
                fgcolor="#898B86" pixellock="true"  >
                <attribute name="text" value="${classroot.label}"/>
            </text>
            <view name="arrowref" resource="tabarrow"
                x="${parent.width - 15}" y="${Math.floor(parent.height/2)}">
            </view>
        </view>
        <view name="interior" clip="true" width="${immediateparent.width}"
            options="releasetolayout" visible="false"/>
            <resizelayout axis="y"/>
            
        <!-- METHODS -->
        <handler name="onopenstart" >
            // tab is about to open
            this.interior.setAttribute('visible', true);
            this.top.setAttribute('bgcolor', 0xE2E4DF);
            this.top.tline.setAttribute('bgcolor', 0xB8B9B5)
            this.top.bline.setAttribute('bgcolor', 0xFDFFFF)
        </handler>

        <handler name="onclosestart" >
            //tab is about to close
            this.top.setAttribute('bgcolor', 0xEEF0EB);
            this.top.tline.setAttribute('bgcolor', 0xFDFFFF)
            this.top.bline.setAttribute('bgcolor', 0xC6C7C4)
        </handler>

        <handler name="onclosestop" >
            //tab is closed
            this.interior.setAttribute('visible', false);
        </handler>

        <method name="toggle">
            // ugh - tabslider doesn't support closing tabs yet
            this.parent.openTab(this.parent,true);
        </method>
    </class>

    <!-- CLASS: info_Panel =============================================== -->
    <!-- ================================================================= -->
    <class name="info_Panel" extends="basepanel" clip="true">

        <attribute name="opened" value="false"/>
        <attribute name="dataapply" value="false"/>
        
        <attribute name="appointementId" value="$path{ 'appointementId/@value' }" type="number" />
        
        <attribute name="_erinnerungatr" value="null"/>
        <attribute name="roomtype" type="number" value="1" />
        
        <attribute name="baseUrl" value="" type="string" />
        
        <attribute name="startDate" value="null" />
        <attribute name="endDate" value="null" />
        
        <attribute name="arrayMeetingMember" value="null"/>	
        
        <handler name="oninit">
        	<![CDATA[
	        	//Point URL to actual File
	            var urlObject =  lz.Browser.getBaseURL();
				//If Port is Null or undefinied use port 80
				if (urlObject.port!=null && urlObject.port!=undefined){
					var port = urlObject.port;
					
					if (port != 80) {
						this.baseUrl = urlObject.protocol+"://"+urlObject.host+":"+port+urlObject.path+urlObject.file;
					} else {
						this.baseUrl = urlObject.protocol+"://"+urlObject.host+urlObject.path+urlObject.file;
					}
				} else {
					this.baseUrl = urlObject.protocol+"://"+urlObject.host+urlObject.path+urlObject.file;
				}
						
	            if ($debug) Debug.write("parent.baseUrl ",this.baseUrl);
            ]]>
        </handler>
        
        <method name="saveOrUpdateAppointement">
        	<![CDATA[
        	
        		if ($debug) Debug.write("saveOrUpdateAppointement ",this.appointementId);
        		
        		var tStartObj = this.datapath.xpathQuery("start[1]");
        		var tEndObj = this.datapath.xpathQuery("end[1]");
        		
        		//attributes: {day: '2', hour: '15', minute: '14', month: '11', year: '2009'} 
        		if ($debug) Debug.write("tStartObj ",tStartObj.attributes);
        		if ($debug) Debug.write("tEndObj ",tEndObj.attributes);
        		
        		this.startDate = new Date();
        		this.startDate.setDate(Number(tStartObj.attributes.day));
        		this.startDate.setMonth(Number(tStartObj.attributes.month)-1);
        		this.startDate.setFullYear(Number(tStartObj.attributes.year));
        		this.startDate.setSeconds(0);
        		this.startDate.setHours(Number(tStartObj.attributes.hour));
        		this.startDate.setMinutes(Number(tStartObj.attributes.minute));
        		
        		this.endDate = new Date();
        		this.endDate.setDate(Number(tEndObj.attributes.day));
        		this.endDate.setMonth(Number(tEndObj.attributes.month)-1);
        		this.endDate.setFullYear(Number(tEndObj.attributes.year));
        		this.endDate.setSeconds(0);
        		this.endDate.setHours(Number(tEndObj.attributes.hour));
        		this.endDate.setMinutes(Number(tEndObj.attributes.minute));
        		
        		if ($debug) Debug.write("this.startDate ",this.startDate);
        		if ($debug) Debug.write("this.endDate ",this.endDate);
        		
        		this.arrayMeetingMember = this.tabs.attendees.getMemberArrayValue();
        		
        		if (this.arrayMeetingMember.length == 0) {
        			new lz.labelerrorPopup(canvas,{errorlabelid:795});
        			return;
        		}
        		
        		if (this.appointementId == "0" || this.appointementId == 0) {
        			if ($debug) Debug.write("ADD");
        			this.saveAppointment.doCall();
        		} else {
        			if ($debug) Debug.write("UPDATE");
        			this.updateAppointment.doCall();
        		}
        		
        	]]>
        </method>

		<netRemoteCallHib name="saveAppointment" funcname="calendarservice.saveAppointment" 
							  remotecontext="$once{ canvas.thishib }" >     
			<netparam><method name="getValue">return canvas.sessionId; </method></netparam>
			<netparam><method name="getValue">return parent.parent.summary.content.title.text;</method></netparam>	
			<netparam><method name="getValue">return '';</method></netparam>
			<netparam><method name="getValue">return parent.parent.tabs.notes.txt.text;</method></netparam>
			<netparam><method name="getValue">return parent.parent.startDate;</method></netparam>
			<netparam><method name="getValue">return parent.parent.endDate;</method></netparam>
			<netparam><method name="getValue">return false;</method></netparam>
			<netparam><method name="getValue">return false;</method></netparam>
			<netparam><method name="getValue">return false;</method></netparam>
			<netparam><method name="getValue">return false;</method></netparam>
			<netparam><method name="getValue">return 1;</method></netparam>
			<netparam><method name="getValue">return parent.parent._erinnerungatr;</method></netparam>
			<netparam><method name="getValue">return parent.parent.roomtype;</method></netparam>
			<netparam><method name="getValue">return parent.parent.baseUrl;</method></netparam>
			
	    	<handler name="ondata" args="value">
	    		<![CDATA[
		    		if ($debug) Debug.write("saveAppointment ",value);
		    		
		    		//var tStartObj = parent.datapath.xpathQuery("start[1]");
        		
	        		//attributes: {day: '2', hour: '15', minute: '14', month: '11', year: '2009'} 
	        		//if ($debug) Debug.write("tStartObj ",tStartObj.attributes);
        		
		    		//dataloader.loadData( Number(tStartObj.attributes.month) , Number(tStartObj.attributes.year) );
		    		
		    		parent.parent.parent.calgrid.reloadAll();
	    		 ]]>
	    	</handler>
	    </netRemoteCallHib> 
	    
    	<netRemoteCallHib name="updateAppointment" funcname="calendarservice.updateAppointment" 
						  remotecontext="$once{ canvas.thishib }" >  
			
			<netparam><method name="getValue">return canvas.sessionId; </method></netparam>
			<netparam><method name="getValue">return parent.parent.appointementId;</method></netparam>
			<netparam><method name="getValue">return parent.parent.summary.content.title.getText();</method></netparam>
			<netparam><method name="getValue">return '';</method></netparam>
			<netparam><method name="getValue">return parent.parent.tabs.notes.txt.getText();</method></netparam>
			<netparam><method name="getValue">return parent.parent.startDate;</method></netparam>
			<netparam><method name="getValue">return parent.parent.endDate;</method></netparam>
			<netparam><method name="getValue">return false;</method></netparam>
			<netparam><method name="getValue">return false;</method></netparam>
			<netparam><method name="getValue">return false;</method></netparam>
			<netparam><method name="getValue">return false;</method></netparam>
			<netparam><method name="getValue">return '1';</method></netparam>
			<netparam><method name="getValue">return parent.parent._erinnerungatr;</method></netparam>
			
			<netparam><method name="getValue">return parent.parent.arrayMeetingMember;</method></netparam>
			<netparam><method name="getValue">return parent.parent.roomtype</method></netparam>
			<netparam><method name="getValue">return parent.parent.baseUrl;</method></netparam>
			
	    	<handler name="ondata" args="value">
	    		<![CDATA[
	    			if ($debug) Debug.write("updateAppointment ",value);
	    			
	    			//var tStartObj = parent.datapath.xpathQuery("start[1]");
        		
	        		//attributes: {day: '2', hour: '15', minute: '14', month: '11', year: '2009'} 
	        		//if ($debug) Debug.write("tStartObj ",tStartObj.attributes);
        		
		    		//dataloader.loadData( Number(tStartObj.attributes.month) , Number(tStartObj.attributes.year) );
		    		
	    			parent.parent.parent.calgrid.reloadAll();
	    			
	    		 ]]>
	    	</handler>
	    </netRemoteCallHib> 
	    
	    <!--
        	public Long deleteAppointment(String SID,Long appointmentId){
         -->
	    <netRemoteCallHib name="deleteAppointment" funcname="calendarservice.deleteAppointment" 
							  remotecontext="$once{ canvas.thishib }" >     
			<netparam><method name="getValue">return canvas.sessionId; </method></netparam>
			<netparam><method name="getValue">return Number(parent.parent.appointementId);</method></netparam>	
	    	<handler name="ondata" args="value">
	    		<![CDATA[
		    		if ($debug) Debug.write("deleteAppointment ",value);
		    		canvas.eventDataMgr.deleteEvent();
		    		parent.parent.parent.calgrid.reloadAll();
	    		 ]]>
	    	</handler>
	    </netRemoteCallHib> 
	    
        <!-- VIEWS -->
        <view name="summary" width="198" height="83" bgcolor="0xEEF0EB">
            <view y="10" name="content" x="10" width="${parent.width - 20}" height="65">
                <inputtextbox name="title"
                    width="${immediateparent.width}" height="20"
                    datapath="summary/@value">
                </inputtextbox>

                <view name="day" y="29" >
                   <!-- <basebutton resource="info_minical" width="15" x="-2"
                         onclick="classroot.selectmonth();" -->
                    <!-- height="13" -->
                    <textbox name="day"  x="0" y="1" width="150"  
                             bgcolor="0xEEF0EB" bordercolor="0x333333"
                             datapath="start[1]/@*" >
                        <method name="applyData" args="attrs">
                            <![CDATA[
                            var s = ""
                            if ( attrs && attrs.month != "" ){
                            	
                            	//if ($debug) Debug.write("applyData",attrs);
                            	
                                s = canvas.calMonths[ attrs.month-1 ] + " " +
                                                      attrs.day + ", " +
                                                      attrs.year;
                            }
                            this.setText( s );
                            ]]>
                        </method>
                    </textbox>
                    <basebutton x="149" width="14" resource="info_larrow">
                        <handler name="onclick">
                            <![CDATA[
                            parent.parent.parent.parent.parent.parent.calgrid.keepinfoopen = true;
                            var thiscell = parent.parent.parent.parent.parent.parent.calgrid.open_day.id;
                            thiscell = Number(thiscell.substr(4));
                            
                            var prevcell = 'cell' + Number(thiscell - 1);
                            if(thiscell > 1){
                                if(typeof global[prevcell] != 'undefined'){
                                    parent.parent.parent.parent.parent.parent.calgrid.daySelectionMgr.select(global[prevcell]);
                                    parent.parent.parent.parent.parent.parent.calgrid.open_day = global[prevcell];
                                }
                            }
                            canvas.eventDataMgr.changeDay(-1);
                            if(thiscell == 1){
                                parent.parent.parent.parent.parent.parent.calgrid.prevMonth();
                                parent.parent.parent.parent.parent.parent.calgrid.keepinfoopen = false;
                            }
                            if(parent.parent.parent.parent.parent.parent.cal_interior.viewstyle == "day"){
                                parent.parent.parent.parent.parent.parent.calgrid.showdayview();
                            }
                            if(parent.parent.parent.parent.parent.parent.cal_interior.viewstyle == "week"){
                                parent.parent.parent.parent.parent.parent.calgrid.showweekview();
                            }
                            parent.parent.parent.parent.parent.parent.calgrid.keepinfoopen = false;
                            ]]>
                        </handler>
                    </basebutton>
                    <basebutton x="163" width="14" resource="info_rarrow">
                        <handler name="onclick">
                            <![CDATA[
                            parent.parent.parent.parent.parent.parent.calgrid.keepinfoopen = true;
                            var thiscell = parent.parent.parent.parent.parent.parent.calgrid.open_day.id;
                            thiscell = Number(thiscell.substr(4));
                            
                            var nextcell = 'cell' + Number(thiscell + 1);
                            if(thiscell < 42){
                                if(typeof global[nextcell] != 'undefined'){
                                    parent.parent.parent.parent.parent.parent.calgrid.daySelectionMgr.select(global[nextcell]);
                                    parent.parent.parent.parent.parent.parent.calgrid.open_day = global[nextcell];
                                }
                            }
                            canvas.eventDataMgr.changeDay(+1);
                            if(thiscell == 42){
                                parent.parent.parent.parent.parent.parent.calgrid.nextMonth();
                                parent.parent.parent.parent.parent.parent.calgrid.keepinfoopen = false;
                            }
                            if(thiscell == 35){
                                if(cell42.visible == false){
                                    parent.parent.parent.parent.parent.parent.calgrid.nextMonth();
                                    parent.parent.parent.parent.parent.parent.calgrid.keepinfoopen = false;
                                }
                            }
                            if(parent.parent.parent.parent.parent.parent.cal_interior.viewstyle == "day"){
                                parent.parent.parent.parent.parent.parent.calgrid.showdayview();
                            }
                            if(parent.parent.parent.parent.parent.parent.cal_interior.viewstyle == "week"){
                                parent.parent.parent.parent.parent.parent.calgrid.showweekview();
                            }
                            parent.parent.parent.parent.parent.parent.calgrid.keepinfoopen = false;
                            ]]>
                        </handler>
                    </basebutton>
                            
                </view>

                <view name="times" x="0" y="50">
                    <method name="getLongTime" args="attrs">
                        if (!attrs) return;
                        var h = attrs.hour;
                        if (Number(h)==0 || h==null) h='0';
                        var m = attrs[ 'minute' ];

                        if (Number(m)==0 || m==null) m='0';
                        if (Number(m)&lt;10) m='0'+m;

                        var ap='a';

                        if (h &gt; 11) ap='p';
                        if (h &gt; 12) h-=12;

                        return h+':'+m+ap;
                    </method>
                    <textbox name="stime" x="0" y="1" width="45" 
                             bgcolor="0xEEF0EB" bordercolor="0x333333"
                             datapath="start[1]/@*" >
                        <method name="applyData" args="attrs">
                            this.setText(parent.getLongTime( attrs ));
                        </method>
                    </textbox>
                    <basebutton x="$immediately{60-11}" width="14" 
                                resource="info_larrow"
                                datapath="start[1]" 
                                onclick="canvas.eventDataMgr.changetime('start',-1);"/>
                    <basebutton x="$immediately{74-11}" width="14" 
                                resource="info_rarrow"
                                datapath="start[1]"
                                onclick="canvas.eventDataMgr.changetime('start',+1);"/>

                    <text x="$immediately{92-11}" y="0" width="20" >to</text>

                    <textbox name="etime" x="100" y="1" width="45" 
                             bgcolor="0xEEF0EB" bordercolor="0x333333"
                             datapath="end[1]/@*" >
                        <method name="applyData" args="attrs">
                            this.setText(parent.getLongTime( attrs ));
                        </method>
                    </textbox>
                    <basebutton x="149" width="14" resource="info_larrow"
                        datapath="end[1]" 
                        onclick="canvas.eventDataMgr.changetime('end',-1);"/>
                    <basebutton x="163" width="14" resource="info_rarrow"
                        datapath="end[1]" 
                        onclick="canvas.eventDataMgr.changetime('end',+1);"/>
                </view>
                <view bgcolor="0xEEF0EB" height="1" width="${parent.width - 10}" x="5" />
               <!--
                <view>
                    <text x="20" text="Label" />
                    <view bgcolor="0x333333" x="70" width="${this.colors.width + 2}" height="${this.colors.height + 2}" >
                        <view name="colors" x="1" y="1">
                            <view bgcolor="red"       width="16" height="16"/>
                            <view bgcolor="0xFF7F00"  width="16" height="16"/>
                            <view bgcolor="yellow"    width="16" height="16"/>
                            <view bgcolor="green"     width="16" height="16"/>
                            <view bgcolor="blue"      width="16" height="16"/>
                            <view bgcolor="purple"    width="16" height="16"/>
                            <simplelayout axis="x" spacing="1"/>
                        </view>
                    </view>
                </view>             -->
                <simplelayout axis="y" spacing="5"/>
            </view>
        </view>


        <view name="gutter1" bgcolor="0xEEF0EB" y="$once{parent.summary.height}"
            width="${parent.width-7}" height="4">
            <view name="tline" height="1" width="$once{parent.width}"
                bgcolor="0xB8B9B5"/>
            <view name="bline" height="1" y="3" width="$once{parent.width}"
                bgcolor="0xFDFFFF"/>
        </view>

        <basetabslider name="tabs" height="365" width="100%" y="${parent.summary.height + 4}" pixellock="true"
            slideduration="200" mintabheight="20" oninit="this.openTab(this.notes,true)" >

            <infoTab name="notes" label="Notes" pixellock="true">
            	
            	<handler name="oninit">
            		this.getAppointmentReminderTypList.doCall();
            	</handler>
            	
            	<netRemoteCallHib name="getAppointmentReminderTypList" 
            					  funcname="appointmentreminderservice.getAppointmentReminderTypList" 
                              	  remotecontext="$once{ canvas.thishib }" >
	                <netparam><method name="getValue">return canvas.sessionId;</method></netparam>
	                <handler name="ondata" args="valueList">
	                    <![CDATA[
	                    if ($debug) Debug.write("getAppointmentReminderTypList-valueList: ", valueList);
	                    
	                    //new combobox(parent.parent{name:_kategory,x:20})
	                    for (var i=0;i<valueList.length;i++) {
	                        //if ($debug) Debug.write("UserList",valueList[i]);
	                        var id = valueList[i].typId;
	                        var titel = valueList[i].name;              
	                        if ($debug) Debug.write("typID",id);
	                        if ($debug) Debug.write("titel: ",titel);                   
	                        new lz.textlistitem(parent._erinnerungedit, {
	                                        value : id,                                                                                     
	                                        text:titel
	                            
	                                });     
	                        parent._erinnerungedit.selectItemAt(2);
	                    }
	                    ]]>
	                </handler>
	            </netRemoteCallHib>
            	
			 	<labelText name="_erinnerung" y="2" 
		 			   x="10" labelid="565" width="60" />
		 	 	
			 	<resetCombobox name="_erinnerungedit" x="10" 
			 			  width="176" editable="false" shownitems="5" y="22">
					<handler name="onvalue" args="v">						
						if ($debug) Debug.write("_erinnerungatr: ",parent.parent.parent._erinnerungatr);
						if(this.getValue == 0 ) {
							parent.parent.parent._erinnerungatr = null;
						} else{
	    					parent.parent.parent._erinnerungatr = this.getValue();												
	    					if ($debug) Debug.write("_erinnerungatr: ",parent.parent.parent._erinnerungatr);
						}
					</handler> 
			 	</resetCombobox> 
	    		  
		    	<labelText name="_roomtype" y="44" x="10" labelid="619" width="60"/>
		    	
			 	<resetCombobox name="_roomtype_edit" x="10" 
			 			  width="176" editable="false" shownitems="3" y="64">
					<handler name="onvalue" args="v">						
						parent.parent.parent.roomtype = Number(this.getValue());												
						if ($debug) Debug.write("roomtype: ",parent.parent.parent.roomtype);
					</handler>
					<handler name="oninit">
					    this.selectItemAt(0);
					</handler>	
	    		 	<!--textitmes-->
	    		 	<labeldTextListItem labelid="647" value="1"/>
	    			<labeldTextListItem labelid="648" value="2"/>
	    			<labeldTextListItem labelid="648" value="3"/>
			 	</resetCombobox> 
		 	
                <!-- fixed size input text is best for large multiline text,
                 so it is good to declare with values for width/height -->
                <labelText name="_descrLabel" y="90" x="10" labelid="619" width="60"/>
                <inputtextbox name="txt" x="10" y="110" multiline="true" pixellock="true"
                    width="175" height="210" datapath="comment/@value" visible="true"/>
                    
            </infoTab>
            
            <infoTab name="attendees" label="Attendees" pixellock="true">
            	
            	<calButton label="Add Attendee" x="2" y="2">
	            	<handler name="onclick">
	            		new lz.addAttendee(canvas,{refObj:parent});
	            	</handler>
	            </calButton>
	          
	            <method name="addListItem" args="userId,firstName,lastName,email,memberId">
	            	<![CDATA[
	            	
	            		new lz.attendeeListItem(this.list,{
				            			userId:userId,
				            			firstName:firstName,
				            			lastName:lastName,
				            			email:email,
				            			memberId:memberId
				            		});
	            	]]>
	            </method> 
	            
	            <method name="getMemberArrayValue">
	            	<![CDATA[
	            		var tArray = new Array();
	            		
	            		for (var i=0;i<this.list.subviews.length;i++) {
	            			
	            			var tObject = new Object();
	            			tObject.meetingMemberId = this.list.subviews[i].memberId;
			        		tObject.firstname = this.list.subviews[i].firstName;
			        		tObject.lastname = this.list.subviews[i].lastName;
			        		tObject.email = this.list.subviews[i].email;
	            			
			        		tArray.push(tObject);
	            		}
	            		
	            		return tArray;
	            	]]>
	            </method>
	            
	             <!--
	               
	            <method name="addListItem" args="userId,firstName,lastName,email">
	            	<![CDATA[
	            	
	            		// Set the blank event pointer to the top of the member
            			blankMeetingMemberDP.setXPath('blankMeetingMember:/attendee[1]');
	            		
            			blankMeetingMemberDP.setXPath('email');
            			blankMeetingMemberDP.setNodeAttribute('value',email);
            			
            			blankMeetingMemberDP.setXPath('../memberId');
            			blankMeetingMemberDP.setNodeAttribute('value',''+0);
	            	
            			blankMeetingMemberDP.setXPath('../firstname');
            			blankMeetingMemberDP.setNodeAttribute('value',firstName);
            			
            			blankMeetingMemberDP.setXPath('../lastname');
            			blankMeetingMemberDP.setNodeAttribute('value',lastName);
            			
            			blankMeetingMemberDP.setXPath('../userId');
            			blankMeetingMemberDP.setNodeAttribute('value',''+userId);
            			
            			blankMeetingMemberDP.setXPath('../');
            			
            			//if ($debug) Debug.write("blankMeetingMemberDP ",blankMeetingMemberDP);
            			
            			//if ($debug) Debug.write(this.list.datapath);
            			this.list.datapath.addNodeFromPointer(blankMeetingMemberDP);
            			this.list.datapath.updateData();
	            	]]>
	            </method>
	             -->
            	
            	<view name="list" y="22" datapath="attendees/"
            		  height="${ parent.height-22 }">
            		
            		<handler name="ondata" args="data">
            			<![CDATA[
	            			if ($debug) Debug.warn("attendees -1 ondata ",data);
	            			
	            			for (var eg in this.subviews){
	            				this.subviews[eg].destroy();
	            			}
	            			
	            			if (data == null) {
	            				return;
	            			}
	            			
	            			for (var i=0;i<data.childNodes.length;i++){
	            				
	            				var email = data.childNodes[i].childNodes[0].attributes.value;
	            				var userId = data.childNodes[i].childNodes[1].attributes.value;
	            				var memberId = data.childNodes[i].childNodes[2].attributes.value;
	            				var firstName = data.childNodes[i].childNodes[3].attributes.value;
	            				var lastName = data.childNodes[i].childNodes[4].attributes.value;
	            				
	            				parent.addListItem(userId,firstName,lastName,email,memberId);
	            				
	            			}
            			]]>
            		</handler>
            		
	            	<simplelayout axis="y" />
	            	
	            	<!--
	            	<view datapath="attendee/">
	            		
	            		<view name="member">
	            			<simplelayout axis="x" />
	            			<text resize="true" datapath="firstname/@value" />
	            			<text resize="true" datapath="lastname/@value" />
	            			<text text="(" />
	            			<text resize="true" datapath="email/@value" />
	            			<text text=")" />
	            		</view>
	            		<view x="150" resource="delete_button">
	            			<handler name="onclick">
	            				//if ($debug) Debug.write(parent);
	            				//if ($debug) Debug.write(parent.datapath);
	            				parent.datapath.deleteNode();
	            				//parent.datapath.updateData();
	            				parent.parent.datapath.updateData();
	            			</handler>
	            		</view>
	            	</view>
	            	 -->
	            	
            	</view>
            	
            	<vscrollbar />
            	<!--
                <inputtextbox name="txt" x="10" y="10" multiline="true" pixellock="true"
                    width="175" height="280" datapath="attendees/@value" visible="true"/>
                 -->
            </infoTab>

        </basetabslider>

        <view name="gutter2"  bgcolor="0xEEF0EB" 
              y="${parent.tabs.y + parent.tabs.height}" height="3" 
              width="$once{parent.width-7}" >
            <view name="tline" height="1" width="$once{parent.width}"
                bgcolor="0xB8B9B5"/>
            <view name="bline" height="1" y="3" width="$once{parent.width}"
                bgcolor="0xFDFFFF"/>

            <calButton label="Apply" x="15" y="13">
                <handler name="onclick">
                    canvas.eventDataMgr.changeTitle(parent.parent.summary.content.title.getText());
                    canvas.eventDataMgr.changeNotes(classroot.tabs.notes.txt.getText());
                    
                    //canvas.eventDataMgr.changeLocation(classroot.tabs.location.txt.getText());
                    
                    //canvas.eventDataMgr.changeAttendees(classroot.tabs.attendees.txt.getText());
                    
                    classroot.setAttribute('dataapply', true);
                    
                    parent.parent.saveOrUpdateAppointement();
                    
                </handler>
            </calButton>
                
                
            
            <calButton label="Delete" x="${parent.width - width - 15}" y="13">
            	<handler name="onclick" args="c">
            		
            		if (Number(parent.parent.appointementId) == 0) {
            			canvas.eventDataMgr.deleteEvent();
            		} else {
            			new lz.confirmationSingle(canvas,{refObj:this,labelid:797,
            						showCheckBox:false,labeliderror:796});
            		}
            	</handler>
            	<method name="sendConfirmation" args="refObj,t">
            		parent.parent.deleteAppointment.doCall();
            	</method>
            </calButton>
            
        </view>

        <!-- ANIMATORS -->
        <animator start="false" name="slideopen1old" attribute="width" to="204"
            duration="500" relative="false"/>
        <animator start="false" name="slideopen1" attribute="x" to="602" from="830"
            duration="500" onstop="lz.Focus.setFocus(parent.summary.content.title);"/>
        <animator start="false" name="slideopen2" attribute="opacity" to="1" from="0"
            duration="500" relative="false"/>
            
        <animator start="false" name="slideclose1" attribute="x" from="602" to="830"
            duration="500" onstop="parent.close_done()"/>
        <animator start="false" name="slideclose2" attribute="opacity" to="0"
            duration="400" relative="false"/>
            <!--
        <animator start="false" name="slideclose1old" attribute="width" to="0"
            duration="500" relative="false" onstop="parent.close_done()"/>
            -->

        <!-- METHODS -->

        <handler name="oninit">
            this.setWindowTitle( "Event Info" );
            this.closeDel = new LzDelegate( this , "close" );
        </handler>
        
        <method name="open">
            this.completeInstantiation();
            if(this.summary.content.title.text != "New Event"){
                this.setAttribute('dataapply', true);
            }
            
            if ( this['awaitingClose'] ){
                this.awaitingClose = false;
                lz.Timer.removeTimer( this.closeDel );
            }

            if (this.opened) {
                lz.Focus.setFocus(this.summary.content.title);
                return;
            }

            parent.parent.calgrid.contract();

            this.setAttribute('visible', true);
            this.setAttribute('opacity', 1);
            this.slideopen1.doStart();
            this.slideopen2.doStart();
            this.opened = true;
        </method>

        <method name="close" args="v">
            <![CDATA[
            if(!this.dataapply){
                canvas.eventDataMgr.deleteEvent()
            }
            if (! this.opened) { return; }
            this.awaitingClose = false;
            slideclose1.doStart();
            slideclose2.doStart(); //remove
            this.opened = false;
            this.setAttribute('dataapply', true);
            ]]>
        </method>

        <method name="close_done" >
            //Debug.write("close_done");
            parent.parent.calgrid.expand();
            this.setAttribute('visible', false);
        </method>

        <method name="unselectEvent" >
            if ( !this.opened ){ return; }
            this.awaitingClose = true;
            lz.Timer.resetTimer( this.closeDel , 500 );
        </method>

    </class>
    
    
<class name="attendeeListItem" extends="view" >
	
	<attribute name="userId" value="0" type="number"/>
	<attribute name="firstName" value="" type="string"/>
	<attribute name="memberId" value="0" type="number"/>
	<attribute name="lastName" value="" type="string"/>
	<attribute name="email" value="" type="string"/>
	
	<view name="member">
		<text resize="true" text="$once{ parent.parent.firstName + ',' + parent.parent.lastName }" />
		<text resize="true" y="20" text="$once{ '(' + parent.parent.email + ')' }" />
	</view>
	
	<view x="166" resource="delete_button" bgcolor="0xFFFFFF">
		<handler name="onclick">
			parent.destroy();
		</handler>
	</view>
	
	<view height="1" width="200" y="40" 
		  bgcolor="$once{ canvas.basebgcolorizer }" />
	
</class>
    
</library>