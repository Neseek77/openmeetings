<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="interviewConferenceRoom" extends="baseConferenceRoom">

    <handler name="oninit">
        new lz.interviewConferenceMenubar(canvas._conferencemenu);
        
        canvas._conferencemenu.setAttribute('visibility','visible');
		
        if ($debug) Debug.write("this.roomobj ",this.roomobj);
        
        if(this.roomobj.appointment){
        	new lz.winni(canvas.conferenceView,{ name:'appDetail',
                    width:350, height:160, resizable:true, closeable:true, x:300,y:200, roomobj:this.roomobj });	
        } else{
        	if ($debug) Debug.write("no appointed meeting");
        }
        
        if (this.roomobj.isDemoRoom) {
            if (this.roomobj.demoTime != null) {
                if ($debug) Debug.warn("THIS IS A DEMO ROOM THAT SHOULD CLOSE AFTER SEC: ",this.roomobj.demoTime);
                this.meetingTimer = new lz.meetingTimer(canvas,{refObj:this,roomobj:this.roomobj});
            }
        }
        
    </handler>
    
    <handler name="ontabcontentleave">
        if ($debug) Debug.write("################# ontabcontentleave:",this);
        
        //reset the right to draw on WHiteboard as the RoomClient Object will be destroyed also
        //on server-Side the canDraw status will be false again when you relogin the same room
        canvas.isAllowedToDraw = true;
        
        _mainScrollBar.setAttribute("visibility","visible");
        
        if (canvas._videocontainer!=null){
	        canvas._videocontainer.resetAllValues();
	        canvas._videocontainer = null;
        }
        if (canvas._chatcontent!=null){
        	canvas._chatcontent = null;
        }
        if (canvas._mymod!=null){
        	canvas._mymod = null;
        }
        
        if (this.meetingTimer != null) {
            this.meetingTimer.close();
        }
        
        if (canvas._drawarea.letterObjectIsActive){
            canvas._drawarea.currentletterObj.destroy();
        }
        
        canvas._screens.clearAllSessions();
        this.logicalRoomLeave.doCall();
        if ($debug) Debug.write("############ this.logicalRoomLeave ",this.logicalRoomLeave);
    </handler>

    <netRemoteCallHib name="logicalRoomLeave" funcname="logicalRoomLeave" remotecontext="$once{ canvas.thishib }" >
        <handler name="ondata" args="value">
	        if ($debug) Debug.write("############# logicalRoomLeave: ",value);
	        //this.parent.destroy();
            canvas.thishib.reconnectAfterRoomleft = true;
            canvas.thishib.reconnectedRoomInstance = this.parent;
            
            // Reconnect User to default Scope
	        canvas.thishib.userScope = "hibernate";
	        var src = hib.protocollName+'://'+canvas.rtmphostlocal+':'+hib.protocollPort+'/'+canvas.webAppRootKey+'/'+hib.userScope;
	        canvas.thishib.setAttribute('src',src);
            canvas.thishib.disconnect();
            canvas._mainbgcontentNavi.setAttribute('height',canvas.naviHeight);
            canvas.setAttribute('naviHeightDelta',canvas.naviHeight);
            canvas._conferencemenu.removeAll();
            canvas._conferencemenu.setAttribute('visibility','hidden');
        </handler>
    </netRemoteCallHib>
    
    <!--
        User Panel and Participants List
     -->
    <interviewRoomSidebar name="_sidePanel" 
                      listType="eventUserListTableWithNames" />
    
    <!--
        Whiteboard in Interview Room Type those are the Video Pods
     -->
    <interviewWhiteboard name="_whiteboardInterview" x="${ parent._sidePanel.width }" 
    	  width="${ canvas.width - parent._sidePanel.width }" />
    
    <!--
        Chat Box
     -->
    <conferenceBox name="_chatPanelStrict" labelid="616" textInset="30" closeable="true" 
                   height="350" x="${ parent._sidePanel.width }" bgcolor="0xFFFFFF"
                   y="${ canvas.height - (this.height+22) }" 
                   width="${ canvas.width - parent._sidePanel.width }">
        <chatTab name="content" y="40" height="${ parent.height-40 }" width="${ parent.width }" />
    </conferenceBox>
    
</class>

</library>