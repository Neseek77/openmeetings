<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="baseDrawObject" extends="baseDrawPointer">
    
    <!-- it uses some of the attribute's defined in baseDrawImage -->
    <attribute name="newSlideNumber" value="1" type="number" />
    
    <attribute name="modernToolbar" value="false" type="boolean" />

    <!-- 
    	Invoked by the Library directly
    	Loads a SWFPresenation to the whiteBoard
     -->
    <method name="loadSWFPresentationSynced" args="url,fileName,moduleName,parentPath,room,domain,slideNumber,standardFileName">
  		var now = new Date();
  		//This invokes a Method which is in the remoteWhiteboard.lzx
  		this.startNewObjectSyncProcess.uniqueObjectSyncName = fileName + now.getTime();
  		this.startNewObjectSyncProcess.doCall();
        //if ($debug) Debug.write("loadSWFPresentationSynced",url,fileName,moduleName,parentPath,room,domain,slideNumber,standardFileName);
        this.addPresentationToLayer(this,url,'swfpresentationobject'+this.getCounter(),
        	0,0,0,0,
        	true,
        	url,fileName,moduleName,parentPath,room,domain,slideNumber,
        	100,0,0,0,0,
        	this.startNewObjectSyncProcess.uniqueObjectSyncName,
            standardFileName);
    </method>
    
    <method name="checkSWFPresentation" args="url,fileName,moduleName,parentPath,room,domain,slideNumber">
        //this.addPresentationToLayer(this,url,'swfpresentationobject'+this.getCounter(),0,0,0,0,true,url,fileName,moduleName,parentPath,room,domain,slideNumber);
        <![CDATA[
            for (var i=0;i<this.baseactionobjectList.length;i++){
                if (fileName==this.baseactionobjectList[i][3]){
                    var whiteBoardName = this.baseactionobjectList[i][this.baseactionobjectList[i].length-1];
                    //Debug.write("Found File: ",whiteBoardName,this.baseactionobjectList[i]);
                    //this.baseactionobjectList[i].bringToFront();
                    this.doShowObjectBounds(whiteBoardName);
                    this.newSlideNumber = slideNumber;
                    this.doDocumentAction('setSlideNumber');
                    return true;
                }
            } 
            return false;
        ]]>
    </method>
    
	<!--
		alterModus => this is added by the mod not remotely
		
		adds the SWF-Object to the Layer
	 -->
  	<method name="addPresentationToLayer" args="obj,urlName,nameing,posx,posy,width,height,alterModus,baseurl,fileName,moduleName,parentPath,room,domain,slideNumber,currentzoom,innerwidth,innerheight,innerx,innery,uniqueObjectSyncName,standardFileName">
        <![CDATA[
            if ($debug) Debug.write("addPresentationToLayer",standardFileName);
            //only show if it is not part of wml-file-object
            //if (!this.isWmlLoaderImage) {
            //    this.loadimageDataWinRef = new lz.loadWhiteboardWindow(canvas.main_content._content.inner,{refObj:this});
            //    this.loadimageDataWinRef.setMessage(canvas.getLabelName(this.imageLoadMessageId));
            //}
        	//if ($debug) Debug.write("addPresentationToLayer uniqueObjectSyncName:",uniqueObjectSyncName,innerwidth,innerheight);
            
            var downloadurl = 'http://'+canvas.rtmphostlocal+':'+canvas.red5httpport+canvas.httpRootKey+'DownloadHandler?' +
                    'fileName=' + encodeURIComponent(fileName) +
                    '&moduleName=' + moduleName + 
                    '&parentPath=' + encodeURIComponent(parentPath + '/') +
                    '&room_id='+room + 
                    '&sid='+canvas.sessionId;
            
            //var width= this.width;
            //var height = this.height-200;
            ////Debug.write("width:height: ",width,height);
            
            this.currentlayer = new lz.swfResourceView(obj,{refObj:this,name:nameing,
            	x:posx,y:posy,alterModus:alterModus,
            	baseurl:baseurl,fileName:fileName,moduleName:moduleName,parentPath:parentPath,
            	room:room,domain:domain,slideNumber:slideNumber,
            	//width:width,height:height,
            	currentzoom:currentzoom,
                standardFileName:standardFileName,
            	innerwidth:innerwidth,innerheight:innerheight,
            	innerx:innerx,innery:innery,
            	uniqueObjectSyncName:uniqueObjectSyncName});

            //this.parent.parent.isloadingImage.sendEvent(this.currentlayer);
            ////Debug.write("downloadurl. ",downloadurl);
            this.currentlayer._swfView.setSource(downloadurl);
            
            this.addItemToDocumentToolBar();
            this.doUpdateDocumentToolBar();
		]]>
  	</method>
  	
  	<!--
  		TODO: check Recording
  	-->
  	<method name="addPresentationToLayerRecording" args="obj,urlName,nameing,posx,posy,width,height,alterModus,baseurl,fileName,moduleName,parentPath,room,domain,slideNumber,currentzoom,innerwidth,innerheight,innerx,innery">
        <![CDATA[
            //Debug.write("addPresentationToLayer",obj,nameing,posx,posy,width,height,alterModus,baseurl,fileName,moduleName,parentPath,room,domain,slideNumber);
            //only show if it is not part of wml-file-object
            if (!this.isWmlLoaderImage) {
                this.loadimageDataWinRef = new lz.loadWhiteboardWindow(canvas.main_content._content.inner,{refObj:this});
                this.loadimageDataWinRef.setMessage(canvas.getLabelName(this.imageLoadMessageId));
            }
            var downloadurl = 'http://'+canvas.rtmphostlocal+':'+canvas.red5httpport+canvas.httpRootKey+'DownloadHandler?' +
                    'fileName=' + encodeURIComponent(fileName) +
                    '&moduleName=' + moduleName + 
                    '&parentPath=' + encodeURIComponent(parentPath) +
                    '&room_id='+room + 
                    '&sid='+canvas.sessionId;
            var width= this.width;
            var height = this.height;
            
            this.currentlayer = new lz.swfResourceView(obj,{refObj:this,name:nameing,
            	x:posx,y:posy,
            	alterModus:alterModus,
            	baseurl:baseurl,fileName:fileName,moduleName:moduleName,
            	parentPath:parentPath,room:room,domain:domain,
            	slideNumber:slideNumber,width:width,height:height,
            	currentzoom:currentzoom,innerwidth:innerwidth,innerheight:innerheight,
            	innerx:innerx,innery:innery,recorderModus:true});

            this.parent.parent.isloadingImage.sendEvent(this.currentlayer);
            this.currentlayer._swfView.setSource(downloadurl);
            
            //Add Layer to global Layer  	
            return this.currentlayer;
		]]>
  	</method>  	
    
    <method name="addSWFToLayerHistory" args="actionObject,refObj,isWmlLoader">
        this.isWmlLoaderImage = isWmlLoader;
        this.baseactionobjectList.push(actionObject);   
        this.addPresentationToLayer(refObj,actionObject[1],actionObject[actionObject.length-1],
            actionObject[actionObject.length-5],actionObject[actionObject.length-4],actionObject[actionObject.length-3],
            actionObject[actionObject.length-2],false,actionObject[2],actionObject[3],actionObject[4],actionObject[5],
            actionObject[6],actionObject[7],
            actionObject[8],actionObject[16],actionObject[11],actionObject[12],actionObject[9],actionObject[10],
            actionObject[17],actionObject[18]);
    </method>
    
    <!-- 
    	Invoked by the remote Host, see sendWatchObject in baseDraw.lzx
     -->
    <method name="addSWFToLayerHistorySynced" args="actionObject,refObj">
        this.baseactionobjectList.push(actionObject);	
  		this.startNewObjectSyncProcess.uniqueObjectSyncName = actionObject[17];
  		this.startNewObjectSyncProcess.doCall();        
   		this.addPresentationToLayer(refObj,actionObject[1],actionObject[actionObject.length-1],
  			actionObject[actionObject.length-5],actionObject[actionObject.length-4],
  			actionObject[actionObject.length-3],actionObject[actionObject.length-2],
  			false,
  			actionObject[2],actionObject[3],actionObject[4],actionObject[5],actionObject[6],
  			actionObject[7],actionObject[8],actionObject[16],actionObject[11],actionObject[12],
  			actionObject[9],actionObject[10],actionObject[17],actionObject[18]);
  	</method>
  	
	<!--- 
		invoke by the initial Loading process in remoteWhiteboard.lzx, 
		does not invoke any Update Handler
		once this object is loaded, it will throw an Update event of kind
		addSWFToLayerHistoryToLocalLoaded
  	 -->
  	<method name="addSWFToLayerHistoryToLocal" args="actionObject,refObj">
        this.baseactionobjectList.push(actionObject);	
  		this.addPresentationToLayer(refObj,actionObject[1],actionObject[actionObject.length-1],
  			actionObject[actionObject.length-5],actionObject[actionObject.length-4],
  			actionObject[actionObject.length-3],actionObject[actionObject.length-2],
  			false,
  			actionObject[2],actionObject[3],actionObject[4],actionObject[5],actionObject[6],
  			actionObject[7],actionObject[8],actionObject[16],actionObject[11],actionObject[12],
  			actionObject[9],actionObject[10],actionObject[17],actionObject[18]);
  	</method>
  	
  	<!--
  		TODO: Check Recording Process
  	 -->
  	<method name="addSWFToLayerHistoryRecording" args="actionObject,refObj,isWmlLoader">
		this.isWmlLoaderImage = isWmlLoader;
        this.baseactionobjectList.push(actionObject);	
  		this.addPresentationToLayerRecording(refObj,actionObject[1],actionObject[actionObject.length-1],actionObject[actionObject.length-5],actionObject[actionObject.length-4],actionObject[actionObject.length-3],actionObject[actionObject.length-2],false,actionObject[2],actionObject[3],actionObject[4],actionObject[5],actionObject[6],actionObject[7],actionObject[8],actionObject[16],actionObject[11],actionObject[12],actionObject[9],actionObject[10]);
  	</method>
  	
  	<method name="registerNewSWF" args="urlname,posx,posy,width,height,baseurl,fileName,moduleName,parentPath,room,domain,slideNumber,innerx,innery,innerwidth,innerheight,zoomlevel,currentzoom,initwidth,initheight,uniquObjectSyncName,doUpdateMessage,standardFileName">
		var actionObject = new Array();
	    actionObject.push('swf');//0
	    actionObject.push(urlname);//1
		actionObject.push(baseurl);//2
		actionObject.push(fileName);//3
		actionObject.push(moduleName);//4
		actionObject.push(parentPath);//5
		actionObject.push(room);//6
		actionObject.push(domain);//7
        actionObject.push(slideNumber);//8
        actionObject.push(innerx);//9
        actionObject.push(innery);//10
        actionObject.push(innerwidth);//11
        actionObject.push(innerheight);//12
        actionObject.push(zoomlevel);//13
        actionObject.push(initwidth);//14
        actionObject.push(initheight);//15
        actionObject.push(currentzoom);//16
        actionObject.push(uniquObjectSyncName);//17
        actionObject.push(standardFileName);//18
		actionObject.push(this.counter);
	    actionObject.push(posx);
	    actionObject.push(posy);
	    actionObject.push(width);
	    actionObject.push(height);
	    actionObject.push(this.currentlayer.name);
	    this.baseactionobjectList.push(actionObject);	
	    this.checkStepLayers();
	    if (doUpdateMessage) this.onsharedMessage('draw',actionObject);	
  	</method>    
    
	<!--
		Invoked by the swfResource, if the alterModus = true,
		throws an Update-Event to all connected Clients
	 -->
	<method name="storeTempValsAndLoadSyncListSWF" args="objRef">
		this.syncImageRefObj = objRef;
		this.doRegisterNewSwf(true);
		this.sendCompletedObjectSyncEvent.uniqueObjectSyncName = this.syncImageRefObj.uniqueObjectSyncName;
		this.sendCompletedObjectSyncEvent.doCall();
	</method>    
	
	<!--
		Invoked by the swfResource, if the alterModus = false,
		throws NO Update-Event to all connected Clients
	 -->
	<method name="sendLoadNotificationSWF" args="objRef" >
		this.syncImageRefObj = objRef;
		this.doRegisterNewSwf(false);
		this.sendCompletedObjectSyncEvent.uniqueObjectSyncName = this.syncImageRefObj.uniqueObjectSyncName;
		this.sendCompletedObjectSyncEvent.doCall();
	</method>
	
	<!-- 
		TODO: Check Recording
	-->
	<method name="storeTempValsAndLoadSyncListSWFRecording" args="objRef">
		this.syncImageRefObj = objRef;
		//this.doRegisterNewSwf();
		//this.sendCompleteSWFSync();
		//This invokes a Method which is in the remoteWhiteboard.lzx
		this.sendCompletedObjectSyncEvent.uniqueObjectSyncName = this.syncImageRefObj.uniqueObjectSyncName;
		this.sendCompletedObjectSyncEvent.doCall();
	</method>    
    
	

	<!-- sending messages/notifications of sync process
		syncing is now on server side implemented, swagner 12.06.2008
	<netRemoteCallHib name="sendMessageWithClientSWF" funcname="sendMessageWithClient" remotecontext="$once{ canvas.thishib }" >   
		<netparam name="vars"><method name="getValue">return parent.parent.imageLoadingCompleteMessage;</method></netparam>
		<handler name="ondata" args="value">
			<![CDATA[
				//The onResult-Handler will be called be the rtmpconnection
				////Debug.write("getValue : ",value);
			]]>
		</handler>   
	</netRemoteCallHib>     
     -->
     
	<!-- get list of clients before loading image cause
		we have to show the sync process
		
		syncing is now on server side implemented, swagner 12.06.2008
	
    <netRemoteCallHib name="getSWFClientListScope" funcname="getClientListScope" remotecontext="$once{ canvas.thishib }" >          
        <handler name="ondata" args="value">
        	<![CDATA[
				//The onResult-Handler will be called by the rtmpconnection
				////Debug.write("getSWFClientListScope Instance: ",value);
				parent._loadingUsersImageList = new Array();
				for (var eg in value){
					if (canvas.streamid != value[eg].streamid){
						//Debug.write("parent._loadingUsersImageList value eg ",eg,value[eg]);
						parent._loadingUsersImageList.push(value[eg]);
					}
				}
				this.parent.doRegisterNewSwf();	
				this.parent.startSWFsyncCheck();			
            ]]>
        </handler>   
    </netRemoteCallHib>
    	-->
    
    <method name="doRegisterNewSwf" args="doUpdateMessage">
		//now send notifications to connected clients
		this.setAttribute('drawmodus','hand');
        
		this.registerNewSWF(this.syncImageRefObj.baseurl,this.syncImageRefObj.x,
                this.syncImageRefObj.y,this.syncImageRefObj._swfView.width,
                this.syncImageRefObj._swfView.height,this.syncImageRefObj.baseurl,
                this.syncImageRefObj.fileName,this.syncImageRefObj.moduleName,
                this.syncImageRefObj.parentPath,this.syncImageRefObj.room,
                this.syncImageRefObj.domain,this.syncImageRefObj.slideNumber,
                this.syncImageRefObj._swfView.x,this.syncImageRefObj._swfView.y,
                this.syncImageRefObj._swfView.width,this.syncImageRefObj._swfView.height,
                this.syncImageRefObj.zoomlevel,this.syncImageRefObj.currentzoomFactor,
                this.syncImageRefObj.initwidth,this.syncImageRefObj.initheight,
                this.syncImageRefObj.uniqueObjectSyncName,doUpdateMessage,
                this.syncImageRefObj.standardFileName);
        
		//set modus to hand so users can directly select that image
		this.setModus('swf');
    </method>
	
	<!-- after loading the objects check if all connected clients of that conference
		have loaded the file completely, check it every 1 seconds
		syncing is now on server side implemented, swagner 12.06.2008
	<method name="startSWFsyncCheck">
		<![CDATA[
			if (this._loadingUsersImageList.length==0){
				this.sendSyncNotificationSWF();
			} else {
				var txt = this.imageSyncMessageText+' '+this._loadingUsersImageList.length;
				this.loadimageDataWinRef.setMessage(txt);
				this.loadImageObjectTimer = new LzDelegate( this, "startImgaesyncCheck" );
				lz.Timer.addTimer( this.loadImageObjectTimer, this.syncImageCheckTime );
			}
		]]>
	</method>	
	 -->

	<method name="sendSyncNotificationSWF">
		this.imageLoadingCompleteMessage = new Array();
		this.imageLoadingCompleteMessage[0] = "whiteboard";
		this.imageLoadingCompleteMessage[1] = "swfsynccomplete";
		this.sendMessageWithClientSWF.doCall();
	</method>	

	<!-- invoked by remote client once he has completely loaded the wml-file 
		remote client is waiting/still shows loading window untill all clients have 
		completely loaded the object/moderator sends "synccomplete" message
		
		syncing is now on server side implemented, swagner 12.06.2008
		
	<method name="sendCompleteSWFLoadedRClient" args="client">
		<![CDATA[
			//detect self messageing
			if (client.streamid!=canvas.streamid){
				//remove client from sync list
				for (var i=0;i<this._loadingUsersImageList.length;i++){
					if (this._loadingUsersImageList[i].streamid==client.streamid){
						////Debug.write("deleteing client from list: ",this._loadingUsersImageList[i].streamid);
						this._loadingUsersImageList.splice(i,1);
					}
				}
			}
		]]>
	</method>
	
	 -->
	
	<!-- invoked remotely by Moderator
		all clients have succeed in loading the image
		loading win can be closed
		Alert: This notification will be send from Moderator and received by ALL clients INCLUDING
		the moderator, so the moderator needs no extra command *close* for loading bar cause he
		gets its own *sync* complete nofification
		
		syncing is now on server side implemented, swagner 12.06.2008
			
	<method name="sendCompleteSWFSync" args="client">
		////Debug.write("sendCompleteSWFSync ",client);
		this.loadimageDataWinRef.close();
	</method>  
     -->
    
    <!-- Document actions
        this.ObjectByName is set by the method doShowObjectBounds of baseDraw and holds a reference to
        the currently selected object on the whiteboard
     -->
    <method name="doDocumentAction" args="action">
        <![CDATA[
            if (this.ObjectByName.typeOfObject=="swf") {
                if (action=="doc_first"){
                    this.ObjectByName._swfView.setAttribute('frame',1);
                } else if (action=="doc_pre"){
                    if (this.ObjectByName._swfView.frame>1){
                        this.ObjectByName._swfView.setAttribute('frame',(this.ObjectByName._swfView.frame-1));
                    }
                } else if (action=="doc_next"){
                    if (this.ObjectByName._swfView.frame<this.ObjectByName._swfView.totalframes){
                        this.ObjectByName._swfView.setAttribute('frame',(this.ObjectByName._swfView.frame+1));
                    }
                } else if (action=="doc_last"){
                    this.ObjectByName._swfView.setAttribute('frame',(this.ObjectByName._swfView.totalframes));
                } else if (action=="doc_zoom_minus"){
                    this.ObjectByName.currentzoomFactor-=this.ObjectByName.zoomlevel;       
                    var newwidth = (this.ObjectByName.initwidth/100)*this.ObjectByName.currentzoomFactor;
                    var newheight = (this.ObjectByName.initheight/100)*this.ObjectByName.currentzoomFactor;
                    this.ObjectByName._swfView.setAttribute('width',newwidth);
                    this.ObjectByName._swfView.setAttribute('height',newheight);
                    this.boundingref.doSetInnerObjectsBounds(newwidth,newheight);
                } else if (action=="doc_zoom_plus"){
                    this.ObjectByName.currentzoomFactor+=this.ObjectByName.zoomlevel;       
                    //Debug.write("doc_zoom_plus 1",this.ObjectByName.currentzoomFactor,this.ObjectByName.zoomlevel);
                    var newwidth = (this.ObjectByName.initwidth/100)*this.ObjectByName.currentzoomFactor;
                    var newheight = (this.ObjectByName.initheight/100)*this.ObjectByName.currentzoomFactor;
                    //Debug.write(this.ObjectByName);
                    //Debug.write("doc_zoom_plus 2",newwidth,newwidth);
                    this.ObjectByName._swfView.setAttribute('width',newwidth);
                    this.ObjectByName._swfView.setAttribute('height',newheight);
                    this.boundingref.doSetInnerObjectsBounds(newwidth,newheight);
                } else if (action=="setSlideNumber"){
                    if (this.newSlideNumber>0 && this.newSlideNumber<=this.ObjectByName._swfView.totalframes){
                        this.ObjectByName._swfView.setAttribute('frame',this.newSlideNumber);
                    } else {
                        Debug.warn("Slide Number out of range of that document TotalFrames: ",this.ObjectByName._swfView.totalframes);
                    }
                }
                this.ObjectByName.slideNumber =  this.ObjectByName._swfView.frame;
                this.doUpdateDocumentToolBar();
                this.sendCurrentSWFObject(this.ObjectByName);
            }
        ]]>
    </method>
    
    <method name="addItemToDocumentToolBar">
    	var docToolbar = this.getDocumentToolBar();
    	docToolbar.addCurrentObject(this.currentlayer);
    </method>
    
    <method name="setCurrentDocument" args="itemRefName">
        this.ObjectByName = this.getObjectByName(itemRefName);
        this.doUpdateDocumentToolBar();
        
        if ($debug) Debug.write("setCurrentDocument ",itemRefName,this.ObjectByName);
        
        //FIXME: This should also bringt to front the object for all participants
        this.sendItemToFront(itemRefName);
        this.bringItemToFrontByName(itemRefName);
    </method>
    
    <method name="sendItemToFront" args="itemRefName">
        var actionObject = new Array();
        actionObject[0] = 'item';
        actionObject[1] = itemRefName;
        this.onsharedMessage('sendItemToFront',actionObject);
    </method>    
    
    <method name="bringItemToFrontByName" args="itemRefName">
        this.ObjectByName = this.getObjectByName(itemRefName);
        this.ObjectByName.bringToFront();
    </method>
    
    <method name="doUpdateDocumentToolBar">
    	<![CDATA[
        	if (this.modernToolbar) {
    	        this.parent.parent._documentmenu._currentSlideNo.setAttribute('text',this.ObjectByName._swfView.frame);
    	        this.parent.parent._documentmenu._totalSlideNo.setAttribute('text',this.ObjectByName._swfView.totalframes);
    	        this.parent.parent._documentmenu._zoom.setAttribute('text',this.ObjectByName.currentzoomFactor);
        	} else {
        		var docToolbar = this.getDocumentToolBar();
        		
        		if (this.ObjectByName && this.ObjectByName._swfView) {
        			docToolbar._currentSlideNo.setAttribute('text',this.ObjectByName._swfView.frame);
                    docToolbar._totalSlideNo.setAttribute('text',this.ObjectByName._swfView.totalframes);
                    docToolbar._zoom.setAttribute('text',this.ObjectByName.currentzoomFactor);
        		} else {
        			docToolbar._currentSlideNo.setAttribute('text',"0");
                    docToolbar._totalSlideNo.setAttribute('text',"0");
                    docToolbar._zoom.setAttribute('text',"100");
        		}
    	        
        	}
    	]]>
    </method>
    
    <method name="doDeleteFromDocumentsBar" args="itemRefName">
    	var docToolbar = this.getDocumentToolBar();
    	docToolbar.removeDocument(itemRefName);
    </method>
    
    <method name="clearDocumentsBar">
    	var docToolbar = this.getDocumentToolBar();
    	docToolbar.clearDocumentsBar();
    </method>
    
    <method name="sendCurrentSWFObject" args="objRef">
		<![CDATA[
           // //Debug.write("UpdateByObject : ",objRef,objRef.name);
            var objName = objRef.name;
            for (var eg=0;eg<this.baseactionobjectList.length;eg++){
                if (this.baseactionobjectList[eg][this.baseactionobjectList[eg].length-1]==objName) {
                    ////Debug.write("Found Object: ",this.baseactionobjectList[eg]);
                    this.baseactionobjectList[eg][8] = objRef.slideNumber;
                    this.baseactionobjectList[eg][9] = objRef._swfView.x;
                    this.baseactionobjectList[eg][10] = objRef._swfView.y;
                    this.baseactionobjectList[eg][11] = objRef._swfView.width;
                    this.baseactionobjectList[eg][12] = objRef._swfView.height;
                    this.baseactionobjectList[eg][13] = objRef.zoomlevel;
                    this.baseactionobjectList[eg][16] = objRef.currentzoomFactor;
                    var newA = this.baseactionobjectList[eg];
                    if (newA[0]=='paint') newA[1] = new Array();				
                    this.onsharedMessage('swf',newA);	
                    break;
                }
            }	
		]]>
	</method>
    
    <method name="remoteObjectUpdate" args="lastactionObject">
        <![CDATA[
            var obj = this.getObjectByName(lastactionObject[lastactionObject.length-1]);
            ////Debug.write("remoteObjectUpdate: ",this,lastactionObject,obj);
            obj._swfView.doSendChangeValue = false;
			obj.slideNumber = lastactionObject[8];
			obj._swfView.setAttribute('x',lastactionObject[9]);
			obj._swfView.setAttribute('y',lastactionObject[10]);
			obj._swfView.setAttribute('width',lastactionObject[11]);
            obj._swfView.setAttribute('height',lastactionObject[12]);
            obj.zoomlevel = lastactionObject[13];
            obj.currentzoomFactor = lastactionObject[16];
            obj._swfView.setAttribute('frame',obj.slideNumber);
            obj._swfView.doSendChangeValue = true;
            //obj. 
            this.remoteUpdateBaseObjectList(lastactionObject);
        ]]>
    </method>
    
    <method name="remoteUpdateBaseObjectList" args="actionObject">
		<![CDATA[
            ////Debug.write("remoteUpdateBaseObjectList : ",actionObject);
            for (var eg=0;eg<this.baseactionobjectList.length;eg++){
                if (this.baseactionobjectList[eg][this.baseactionobjectList[eg].length-1]==actionObject[actionObject.length-1]) {
                    this.baseactionobjectList[eg] = actionObject;
                    break;
                }
            }	
		]]>
    </method>

</class>

</library>
