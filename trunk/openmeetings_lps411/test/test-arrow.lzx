<?xml version="1.0" encoding="UTF-8"?>

<canvas debug="true" width="100%" height="100%" >
	
	<debug oninit="Debug.showInternalProperties = true"/>
	
<class name="drawViewNew" extends="drawview" cachebitmap="false" x="-1" y="-1" >
    
</class>

<drawview>
    
    <handler name="onconstruct">
        <![CDATA[
            //var pStart = {'x':100,'y':100};
            //var pEnd = {'x':200,'y':200};
            
            var p = new flash.geom.Point(100,100);
            var pEnd = new flash.geom.Point(200,200);
            if ($debug) Debug.write("p",p);
            
            var normalizedPoint = new flash.geom.Point(-2, 4);
			if ($debug) Debug.write(normalizedPoint.length); // 5
			if ($debug) Debug.write(normalizedPoint.toString()); // (x=3, y=4)
			normalizedPoint.normalize(10);
			if ($debug) Debug.write(normalizedPoint.length); // 10
			if ($debug) Debug.write(normalizedPoint.toString()); // (x=6, y=8)
            
            
            var normalizedPoint = new flash.geom.Point(2, -4);
            if ($debug) Debug.write(normalizedPoint.length); // 5
            if ($debug) Debug.write(normalizedPoint.toString()); // (x=3, y=4)
            normalizedPoint.normalize(10);
            if ($debug) Debug.write(normalizedPoint.length); // 10
            if ($debug) Debug.write(normalizedPoint.toString()); // (x=6, y=8)
            
            //normalizedPoint.normalize(5);
            //if ($debug) Debug.write(normalizedPoint.length); // 10
            //if ($debug) Debug.write(normalizedPoint.toString()); // (x=3, y=4)

        ]]>
    </handler>
    
    <method name="test">
        var p1 = p.normalize(1);
        if ($debug) Debug.write("p1",p1);
        
        var p11 = flash.geom.Point.interpolate(p,pEnd,0.5);
        if ($debug) Debug.write("p11",p11);
        
        
        var p12 = pEnd.subtract(p);
        if ($debug) Debug.write("p12",p12);
        
        
        var pArrowStart = new flash.geom.Point(100,100);
        var pArrowEnd = new flash.geom.Point(200,200);
        
        var obj = new lz.drawViewNew(canvas);
        
        this.drawArrow(obj,pArrowStart,pArrowEnd,4);
        
        pArrowStart = new flash.geom.Point(300,300);
        pArrowEnd = new flash.geom.Point(200,200);
        obj = new lz.drawViewNew(canvas);
        this.drawArrow(obj,pArrowStart,pArrowEnd,20);
        
        pArrowStart = new flash.geom.Point(600,300);
        pArrowEnd = new flash.geom.Point(200,100);
        obj = new lz.drawViewNew(canvas);
        this.drawArrow(obj,pArrowStart,pArrowEnd,20);
        
        var p1 = new flash.geom.Point(-60, -100);
        var p2 = new flash.geom.Point(20, 50);
        var f = 0.5;
        
        var p3 = flash.geom.Point.interpolate(p1,p2,f);
        if ($debug) Debug.write("p3",p3);
    </method>
    
    <method name="drawArrow" args="graphics,start,end,thickness">
        <![CDATA[
    //(graphics:Graphics,
    //            start:Point,end:Point,
    //            style:Object=null):void {
            
            if (start.equals(end)) return;
            
            
            
            var arrowStyle = {'headWidth':thickness*5,//Relative width of arrow head
                    'headLength':thickness*5, //Pixel Length of arrow head
                    'shaftThickness':thickness,
                    'shaftPosition':0,
                    'shaftControlPosition':0.5,
                    'shaftControlSize':0.5,
                    'edgeControlPosition':0.5,
                    'edgeControlSize':0.5};
            
            var fullVect:Point = end.subtract(start);
            var halfWidth:Number = (arrowStyle.headWidth != -1) ? arrowStyle.headWidth/2 : arrowStyle.headLength/2; 
            
            //Figure out the line start/end points
            var startNorm:Point = new flash.geom.Point(fullVect.y,-fullVect.x);
            startNorm.normalize(arrowStyle.shaftThickness/2);
            var start1 = start.add(startNorm);
            var start2 = start.subtract(startNorm);
            var end1 = end.add(startNorm);
            var end2 = end.subtract(startNorm);
            
            //figure out where the arrow head starts
            var headPnt = fullVect.clone();
            headPnt.normalize(headPnt.length-arrowStyle.headLength);
            headPnt = headPnt.add(start);
            
            //calculate the arrowhead corners
            var headPntNorm = startNorm.clone();
            headPntNorm.normalize(halfWidth);
            var edge1 = headPnt.add(headPntNorm);
            var edge2 = headPnt.subtract(headPntNorm);
            
            //Figure out where the arrow connects the the shaft, then calc the intersections
            var shaftCenter = flash.geom.Point.interpolate(end,headPnt,arrowStyle.shaftPosition);
            var inter1 = this.getLineIntersection(start1,end1,shaftCenter,edge1);
            var inter2 = this.getLineIntersection(start2,end2,shaftCenter,edge2);
            
            //Figure out the control points
            var edgeCenter = flash.geom.Point.interpolate(end,headPnt,arrowStyle.edgeControlPosition);
            var edgeNorm = startNorm.clone();
            edgeNorm.normalize(halfWidth*arrowStyle.edgeControlSize);
            var edgeCntrl1 = edgeCenter.add(edgeNorm);
            var edgeCntrl2 = edgeCenter.subtract(edgeNorm);


            graphics.moveTo(start1.x,start1.y);
            graphics.lineTo(inter1.x,inter1.y);
            graphics.lineTo(edge1.x,edge1.y);
            graphics.quadraticCurveTo(edgeCntrl1.x,edgeCntrl1.y,end.x,end.y);
            graphics.quadraticCurveTo(edgeCntrl2.x,edgeCntrl2.y,edge2.x,edge2.y);
            graphics.lineTo(inter2.x,inter2.y);
            graphics.lineTo(start2.x,start2.y);
            graphics.lineTo(start1.x,start1.y);
            
            graphics.strokeStyle = 0x000000;
            graphics.stroke();

            graphics.fillStyle = 0x000000;
            graphics.fill();
        ]]>
    </method>
    
    <method name="getLineIntersection" args="a1,a2,b1,b2">
        <![CDATA[ 
        
            //calculate directional constants
            var k1 = (a2.y-a1.y) / (a2.x-a1.x);
            var k2 = (b2.y-b1.y) / (b2.x-b1.x);
            
            // if the directional constants are equal, the lines are parallel,
            // meaning there is no intersection point.
            if( k1 == k2 ) return null;
            
            var x = 0;
            var y = 0;
            var m1 = 0;
            var m2 = 0;
            
            // an infinite directional constant means the line is vertical
            if( !isFinite(k1) ) {
                
                // so the intersection must be at the x coordinate of the line
                x = a1.x;
                m2 = b1.y - k2 * b1.x;
                y = k2 * x + m2;
                
            // same as above for line 2
            } else if ( !isFinite(k2) ) {
                
                m1 = a1.y - k1 * a1.x;
                x = b1.x;
                y = k1 * x + m1;

            // if neither of the lines are vertical
            } else {
                
                m1 = a1.y - k1 * a1.x;
                m2 = b1.y - k2 * b1.x;              
                x = (m1-m2) / (k2-k1);
                y = k1 * x + m1;
                
            }
            
            return new flash.geom.Point(x,y);
        ]]>
    </method>
    
    <method name="intermediatePoint" args="p1,p2,f">
        <![CDATA[
            
            var d = Math.sqrt( Math.abs(p1.x - p2.x)^2 + Math.abs(p2.y - p2.y)^2 );
        
        ]]>
    </method>
    
</drawview>
  
    
</canvas>
