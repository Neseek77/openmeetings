<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="videoBoard" id="myconferenceView" extends="view">
    <!--
    
    <simpleLabelButton y="${ parent.height-19 }" x="${ parent.width-this.width-1 }" 
					   height="18" labelid="213" >
		<handler name="onclick">
			new lz.inviteMainWindow(canvas.main_content._content.inner);
		</handler>
	</simpleLabelButton>
    -->
    
	<!--
	<view name="_sendInvitation" visible="true" x="1" y="1" >
		<handler name="onclick">
			new lz.inviteMainWindow(canvas.main_content._content.inner);
		</handler>
		<labelText multiline="false" resize="true" labelid="213" 
			fgcolor="white" fontstyle="bold" />
	</view>	
     -->
     
    <participents name="_videocontainer" />
                    
</class>

<class name="whiteBoardPanel" extends="guiPresenter" x="296" y="2"
    width="660" height="592" closable="false" title="Whiteboard"
    resizeable="true">
  <attribute name="initH"/>
  <attribute name="initW"/>
  <handler name="oninit">
    <![CDATA[
       this.setAttribute("initH",this.height);
       this.setAttribute("initW",this.width);
       var f=function() {
         var w=this.height * this.initW/this.initH;
         w=((w < this.initW ) ? initW : w);
         var h=this.width * this.initH/this.initW;
         h=((h < this.initH ) ? initH : h);

         this.setWidth(w);
         this.setHeight(h);
       }
       var prop1 = [this, "width"];
       var prop2 = [this, "height"];
       this.applyConstraint("width", f, prop1);
       this.applyConstraint("height", f, prop2);
      ]]>
	</handler>
   <whiteBoard name="_whiteboard" y="22" x="4">
        <handler name="onsharedMessage" args="obj">
            //Debug.write("send: ",obj);
            canvas.objWhiteboard = obj;
            hib.sendVars.doCall();
        </handler>

    <handler name="isloadingImage" args="val" >
      Debug.write("isloadingImage: ",val);
    </handler>
    <handler name="isloadedImage" args="val" >
      Debug.write("isloadedImage: ",val);
    </handler>
   </whiteBoard>
   <!--
  <view name="currentmainobjectisMod" visible="${ !canvas.ismoderator }"
    x="0" y="22" height="$once{ parent.height-22 }" width="$once{ parent.width }" >
    <handler name="onclick">
      new lz.errorModeratorPopup(canvas,{error:canvas.getLabelName(97)});
    </handler>
  </view>
   -->
</class>

<class name="modernWhiteBoardPanel" extends="guiPresenter" x="296" y="2"
    width="660" height="592" closable="false" title="Whiteboard"
    resizeable="true">
    
    <attribute name="initH"/>
    <attribute name="initW"/>
    
    <handler name="oninit">
        <![CDATA[
            this.setAttribute("initH",this.height);
            this.setAttribute("initW",this.width);
            var prop1 = [this, "width"];
            var prop2 = [this, "height"];
            this.applyConstraintMethod("setItemContraints", prop1);
            this.applyConstraintMethod("setItemContraints", prop2);
        ]]>
    </handler>
        
    <!-- respect ratio and keep minimum width / height -->
    <method name="setItemContraints" args="w">
        <![CDATA[
            //if ($debug) Debug.write("setItemContraints",w)
            var w=this.height * this.initW/this.initH;
             w=((w < this.initW ) ? initW : w);
             var h=this.width * this.initH/this.initW;
             h=((h < this.initH ) ? initH : h);
    
             this.setAttribute("width",w);
             this.setAttribute("height",h);
        ]]>
    </method>
        
    <newWhiteBoard name="_whiteboard" y="22" x="1">
        <handler name="onsharedMessage" args="obj">
            //Debug.write("send: ",obj);
            canvas.objWhiteboard = obj;
            hib.sendVars.doCall();
        </handler>
        <handler name="isloadingImage" args="val" >
            if ($debug) Debug.write("isloadingImage: ",val);
        </handler>
        <handler name="isloadedImage" args="val" >
            if ($debug) Debug.write("isloadedImage: ",val);
        </handler>
    </newWhiteBoard>
    
   <!--
  <view name="currentmainobjectisMod" visible="${ !canvas.ismoderator }"
    x="0" y="22" height="$once{ parent.height-22 }" width="$once{ parent.width }" >
    <handler name="onclick">
      new lz.errorModeratorPopup(canvas,{error:canvas.getLabelName(97)});
    </handler>
  </view>
    -->
</class>

<class name="modPanel" extends="guiPresenter" x="2" y="284"
    width="266" height="46" closable="false" labelid="316"
    resizeable="false">
  <moderationPanel y="22" />
</class>

<!-- caution: this class is not private class. It is used in modules/recordings/recordingsViewer.lzx, for example.
		May 26 2008 commented by onokeiji@gmail.com
 -->
<class name="filesPanel" extends="guiPresenter" x="2" y="284"
    width="290" height="310" closable="false" title="Chat Files User"
    resizeable="false">
    <conferenceContainerTab x="1" y="22" name="_menubar" />
</class>


<class name="conferenceView" extends="baseContentView" destroyByMethod="true" >
	
	<attribute name="roomobj" value="null" />

    <handler name="oninit">
    	
		if ($debug) Debug.write("roomobj: ",this.roomobj);
        canvas._mainbgcontentNavi.setAttribute('height',0);
        canvas.setAttribute('naviHeightDelta',28);
        new lz.conferenceMenubar(canvas._conferencemenu);
        new lz.moderationPanel(canvas._conferencemenu,{x:this.roomobj.moderationPanelXPosition});
        canvas._conferencemenu.setAttribute('visibility','visible');

        new lz.videoBoard(this,{
	            name:'_videosView',
	            x:this.roomobj.videoPodXPosition,
	        	y:this.roomobj.videoPodYPosition,
	        	width:this.roomobj.videoPodWidth,
        	   height:this.roomobj.videoPodHeight
            });
        
        if (this.roomobj.showFilesPanel){
        	new lz.filesPanel(this,{x:this.roomobj.filesPanelXPosition,
        		y:this.roomobj.filesPanelYPosition,
        		width:this.roomobj.filesPanelWidth,
        		height:this.roomobj.filesPanelHeight});
        }
		
       	if (this.roomobj.showWhiteBoard){
       		if (canvas.showmodernWhiteBoard=="y"){
	       		new lz.modernWhiteBoardPanel(this,{x:this.roomobj.whiteBoardPanelXPosition,
	        		y:this.roomobj.whiteBoardPanelYPosition,
	        		width:this.roomobj.whiteBoardPanelWidth,
	        		height:this.roomobj.whiteBoardPanelHeight});
       		} else {
	       		new lz.whiteBoardPanel(this,{x:this.roomobj.whiteBoardPanelXPosition,
	        		y:this.roomobj.whiteBoardPanelYPosition,
	        		width:this.roomobj.whiteBoardPanelWidth,
	        		height:this.roomobj.whiteBoardPanelHeight});
       		}
        }
        
        this._videosView.bringToFront();
    </handler>

  <handler name="ontabcontentleave">
        if ($debug) Debug.write("ontabcontentleave:",this);
        
        //reset the right to draw on WHiteboard as the RoomClient Object will be destroyed also
        //on server-Side the canDraw status will be false again when you relogin the same room
        canvas.isAllowedToDraw = true;
        
        if (canvas._videocontainer!=null){
	        canvas._videocontainer.resetAllValues();
	        canvas._videocontainer = null;
        }
        if (canvas._chatcontent!=null){
        	canvas._chatcontent = null;
        }
        if (canvas._mymod!=null){
        	canvas._mymod = null;
        }
        
        if (canvas._drawarea.letterObjectIsActive){
          canvas._drawarea.currentletterObj.destroy();
        }
        this.logicalRoomLeave.doCall();
        Debug.write("this.logicalRoomLeave ",this.logicalRoomLeave);
  </handler>

  <netRemoteCallHib name="logicalRoomLeave" funcname="logicalRoomLeave" remotecontext="$once{ canvas.thishib }" >
      <handler name="ondata" args="value">
        Debug.write("logicalRoomLeave: ",value);
        //this.parent.destroy();
            canvas.thishib.reconnectAfterRoomleft = true;
            canvas.thishib.reconnectedRoomInstance = this.parent;
            
            // Reconnect User to default Scope
	        canvas.thishib.userScope = "hibernate";
	        var src = hib.protocollName+'://'+canvas.rtmphostlocal+':'+hib.protocollPort+'/'+canvas.webAppRootKey+'/'+hib.userScope;
	        canvas.thishib.setAttribute('src',src);
            canvas.thishib.disconnect();
            canvas._mainbgcontentNavi.setAttribute('height',canvas.naviHeight);
            canvas.setAttribute('naviHeightDelta',canvas.naviHeight);
            canvas._conferencemenu.removeAll();
            canvas._conferencemenu.setAttribute('visibility','hidden');
      </handler>
    </netRemoteCallHib>
</class>

</library>
