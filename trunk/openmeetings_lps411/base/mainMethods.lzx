<?xml version="1.0" encoding="UTF-8" ?>

<!-- methods for main.lzx -->

<library>

	<method name="openMeetingsMenuItemHandler">
	    lz.Browser.loadURL("http://code.google.com/p/openmeetings/", "Openmeetings Homepage");  
	</method>    
	
	<method name="myinit">
		<![CDATA[
		if($debug) Debug.write("main.lzx/config.xml ondata",this);
		//Set Config-values by config.xml, see comments on config.xml
		this.setAttribute('rtmphostlocal',canvas.myConfigSet.getPointer().xpathQuery('config/rtmphostlocal/text()'));   
		this.setAttribute('rtmpport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rtmpport/text()')));  
		this.setAttribute('rtmpTunnelport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rtmpTunnelport/text()')));  
		this.setAttribute('red5httpport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/red5httpport/text()')));  
		this.setAttribute('basebgcolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/basebgcolorizer/text()'));  
		this.setAttribute('baseMousecolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/baseMousecolorizer/text()'));  
		this.setAttribute('baseMouseOvercolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/baseMouseOvercolorizer/text()'));  
		this.setAttribute('currentappname',canvas.myConfigSet.getPointer().xpathQuery('config/currentappname/text()'));  
		this.setAttribute('currentappnameurl',canvas.myConfigSet.getPointer().xpathQuery('config/currentappnameurl/text()'));  
		this.setAttribute('currentappnamebugurl',canvas.myConfigSet.getPointer().xpathQuery('config/currentappnamebugurl/text()'));
		this.setAttribute('loudnessAcitviation',canvas.myConfigSet.getPointer().xpathQuery('config/loudnessAcitviation/text()'));
		this.setAttribute('webAppRootKey',canvas.myConfigSet.getPointer().xpathQuery('config/webAppRootKey/text()'));
		this.setAttribute('showWindowEffect',canvas.myConfigSet.getPointer().xpathQuery('config/showWindowEffect/text()'));
		this.setAttribute('firstdayinweek',canvas.myConfigSet.getPointer().xpathQuery('config/firstdayinweek/text()'));
        this.setAttribute('showRecording',canvas.myConfigSet.getPointer().xpathQuery('config/showRecording/text()'));
		
		//old menubar is not active anymore
		//this.setAttribute('showmodernWhiteBoard',canvas.myConfigSet.getPointer().xpathQuery('config/showmodernWhiteBoard/text()'));
		
		//Audio-Video-Settings
		this.setAttribute('framesPerSecond',Number(canvas.myConfigSet.getPointer().xpathQuery('config/framesPerSecond/text()')));  
		this.setAttribute('bandwidthNeededNormal',Number(canvas.myConfigSet.getPointer().xpathQuery('config/bandwidthNeededNormal/text()')));  
		this.setAttribute('bandwidthNeededBest',Number(canvas.myConfigSet.getPointer().xpathQuery('config/bandwidthNeededBest/text()')));  
		this.setAttribute('camQualityNormal',Number(canvas.myConfigSet.getPointer().xpathQuery('config/camQualityNormal/text()')));  
		this.setAttribute('camQualityBest',Number(canvas.myConfigSet.getPointer().xpathQuery('config/camQualityBest/text()')));  
		this.setAttribute('microphoneRateNormal',Number(canvas.myConfigSet.getPointer().xpathQuery('config/microphoneRateNormal/text()')));  
		this.setAttribute('microphoneRateBest',Number(canvas.myConfigSet.getPointer().xpathQuery('config/microphoneRateBest/text()')));  
		
		
		mainBaseText.setAttribute('text',canvas.currentappname);
		mainBaseText.setShadow();
		mainBaseTextLabel.setAttribute('text',canvas.currentappnameurl);  
	
		
		var doubleSlash = _url.indexOf("//");
		var isNotPort80 = _url.indexOf(":", doubleSlash+2);
		//Debug.write("isNotPort80: ",isNotPort80);
		if (isNotPort80!=-1){
		    //Debug.write("isNotPort80: ",doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2);
		    var server = _url.substr(doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2); 
		} else {
		    var server = _url.substr(doubleSlash+2, _url.indexOf("/", doubleSlash+2)-doubleSlash-2); 
		}
		
		//Debug.write("this zielnr: ",this,server);
		
		this.setAttribute('rtmphost',server);
	
		if (this.rtmphostlocal.length==0){
		    this.setAttribute('rtmphostlocal',server);
		}
		
		//Check for Invitation
		var invitationHash = lz.Browser.getInitArg('invitationHash');
		if (invitationHash != undefined){
			canvas.isinitRoomDirect = true;
			canvas.invitationHash = invitationHash;
		}
		
		//sid=fe9ea55284e0b23991b1c1089b2c8f64&roomid=1
		var sid = lz.Browser.getInitArg('sid');
		var initroomid = lz.Browser.getInitArg('roomid');
		if (sid != undefined && initroomid != undefined){
			canvas.remoteUserLogin = true;
			canvas.initroomid = initroomid;
			canvas.remoteUserSid = sid;
		}
		
		var language = lz.Browser.getInitArg('language');
		if (language != undefined) {
			canvas.language_id = Number(language);
		}
	
		//check for reset password
		var hash = lz.Browser.getInitArg('hash');
		if (hash!=undefined){
			canvas.isResetUsername = true;
			canvas.resetHash = hash;		
		}
	
		//Debug.write("rtmphostlocal,rtmphost: ",canvas.rtmphostlocal,canvas.rtmphost);	
		
		var src = 'rtmp://'+canvas.rtmphostlocal+':'+canvas.rtmpport+'/'+canvas.webAppRootKey+'/hibernate';
		canvas.thishib.setAttribute('src',src);
		canvas.thishib.loaderVar = new lz.autoLoader(canvas);
		canvas.thishib.loaderVar._src.setAttribute('text',src);
		canvas.thishib.connect();
		]]>
	</method>
	
	<method name="getLabelName" args="id">
		//if($debug) Debug.write("main.lzx/getLabelName()",id);
		return getLabelTag(id);
	</method>

	<!-- you can delete this comment. It was just memo.
			Mar 24 2008 onokeiji@gmail.com
		 moved from modules/conference/conference/conferenceMenubar.lzx
	-->
	<method name="doActionmenu" args="stringSub">
	    <![CDATA[
	        if($debug) Debug.write("doActionmenu: ",stringSub);
	        if (canvas._conferencemenu.visibility == 'visible'){
	            if (stringSub=='createPoll') {
	                new lz.createPollWin(canvas.main_content._content.inner);
	            } else if (stringSub=='pollResults') {
	                this.getVotes.doCall();
	            } else if (stringSub=='checkPollVoted') {
	                this.checkHasVoted.doCall();
	            } else if (stringSub=='importFile') {
	                new lz.uploadWindow(canvas.main_content._content.inner,{x:60,uploadmodule:canvas.uploadmoduleimg,isOnlyImage:true});
	            } else if (stringSub=='applyForMod') {
	                new lz.applyForModeration(canvas.main_content._content.inner);
	            } else if (stringSub=='editCamMicSettings') {
	                new lz.changeDevice(canvas.main_content._content.inner);
	            } else if (stringSub=='editBoardSettings') {
	                new lz.editWhiteboardDefault(canvas.main_content._content.inner);
	            } else if (stringSub=='quit') {
	            	if($debug) Debug.write(canvas.thishib.modus,canvas.thishib.roomtype);
	                	if (canvas.thishib.modus=='audience' && canvas.thishib.roomtype=='public'){
	                  	var t = new Array();
	                    	t.action = 'publicEvents';
	                	} else if (canvas.thishib.modus=='audience' && canvas.thishib.roomtype=='private'){
	                    	var t = new Array();
	                    	t.action = 'privateEvents';
	               	} else if (canvas.thishib.modus=='conference' && canvas.thishib.roomtype=='public'){
	                  	var t = new Array();
	                    	t.action = 'publicMeetings';
	                	} else if (canvas.thishib.modus=='conference' && canvas.thishib.roomtype=='private'){
	                    	var t = new Array();
	                    	t.action = 'privateMeetings';
	           	}
	
				if($debug) Debug.write( 'conferenceMenubar: doActionMenu(): ' , t);
	                	loadContent(t);
	         	} else if( stringSub == "browser_open" ){
	         		var browserPanelWidth  = canvas.browserPanelWidth;
	         		var browserPanelHeight = canvas.browserPanelHeight;

	         		Debug.write( "is browser[open] ? ", canvas.main_content._content.inner.conferenceBrowser );

	         	//ブラウザのインスタンスを確認して、あれば開く。なければ作成する
	         		if( canvas.main_content._content.inner.conferenceBrowser == undefined ){Debug.write( "if this" );
		        		new lz.conferenceBrowser( canvas.main_content._content.inner,
		        								{name:'conferenceBrowser',x:canvas.main_content._content.inner.width/2,y:50,
		        								 width:browserPanelWidth, height:browserPanelHeight} );
         			}else{Debug.write( "else this" );
					with( canvas.main_content._content.inner ){
	        				conferenceBrowser.htmlviewer.setVisible( true );
	        				conferenceBrowser.setVisible( true );
					}
         		}
			 } else if( stringSub == "browser_close" ){
	         	// 開いているブラウザをアニメーションで移動する　hieght=0	
			 	Debug.write( "is browser[close] ? ", canvas.main_content._content.inner.conferenceBrowser );
				with( canvas.main_content._content.inner ){
				 	if( conferenceBrowser  != undefined ){
	        				conferenceBrowser.htmlviewer.setVisible( false );
	        				conferenceBrowser.setVisible( false );
					}
         		}
		    }
	      }
	    ]]>
	</method>    
	
	<netRemoteCallHib name="getVotes" funcname="pollservice.getVotes" remotecontext="$once{ canvas.thishib }" >
		<handler name="ondata" args="value">
	            <![CDATA[
	                if (value!=null){
	                    new lz.resultPollWin(canvas.main_content._content.inner,{createdBy:value.createdBy.username,pollDate:value.pollDate,pollQuestion:value.pollQuestion,pollTypeId:value.pollTypeId,roomPollAnswerList:value.roomPollAnswerList,roomPollId:value.roomPollId,roomScopeName:value.roomScopeName});
	                } else {
	                    new lz.messageWin(canvas.main_content._content.inner,{labeliderror:41});
	           }
	        ]]>
	      </handler>   
	</netRemoteCallHib>  
	    
	<netRemoteCallHib name="checkHasVoted" funcname="pollservice.checkHasVoted" remotecontext="$once{ canvas.thishib }" >
		<handler name="ondata" args="value">
	      	<![CDATA[
	                  if (value==1){
	                  	parent.getPoll.doCall();
	                  } else if (value==-1){
	                  	new lz.messageWin(canvas.main_content._content.inner,{labeliderror:31});
	                  } else if (value==-2){
	                        new lz.messageWin(canvas.main_content._content.inner,{labeliderror:41});
	            }
	    	]]>
		</handler>   
	</netRemoteCallHib> 
	
	<netRemoteCallHib name="getPoll" funcname="pollservice.getPoll" remotecontext="$once{ canvas.thishib }" >
		<handler name="ondata" args="value">
	      	<![CDATA[
	                  if (value!=null){
	                  	new lz.answerPoll(canvas.main_content._content.inner,{createdBy:value.createdBy.username,pollDate:value.pollDate,pollQuestion:value.pollQuestion,pollTypeId:value.pollTypeId,roomPollAnswerList:value.roomPollAnswerList,roomPollId:value.roomPollId,roomScopeName:value.roomScopeName});
	            }
	        ]]>
		</handler>
	</netRemoteCallHib> 
	
	<method name="setRoomValues" args="roomTypeId,roomId,roomObj">
		if (roomTypeId==1){
	    		canvas.isConference = true;
	    	} else {
	    		canvas.isConference = false;
	    }
    	hib.currentroomid = roomId;
    	if (roomObj!=null){
			if (roomTypeId==1){
				new lz.conferenceView(canvas.main_content._content.inner,{roomobj:roomObj}); 
			} else {
				new lz.audienceView(canvas.main_content._content.inner,{roomobj:roomObj}); 
			}   
    	}
	</method>
			     
	    
	<command id="cmd_applyforMod" onselect="canvas.doActionmenu('applyForMod')" key="['ALT','Shift','M']"/>
	<command id="cmd_createPoll" onselect="canvas.doActionmenu('createPoll')" key="['ALT','Shift','P']"/> 
	<command id="cmd_pollResults" onselect="canvas.doActionmenu('pollResults')" key="['ALT','Shift','R']"/> 
	<command id="cmd_checkPollVoted" onselect="canvas.doActionmenu('checkPollVoted')" key="['ALT','Shift','V']"/> 
	<command id="cmd_importFile" onselect="canvas.doActionmenu('importFile')" key="['ALT','Shift','I']"/> 
	<command id="cmd_editCamMicSettings" onselect="canvas.doActionmenu('editCamMicSettings')" key="['ALT','Shift','1']"/> 
	<command id="cmd_editBoardSettings" onselect="canvas.doActionmenu('editBoardSettings')" key="['ALT','Shift','2']"/>   
	<command id="cmd_quit" onselect="canvas.doActionmenu('quit')" key="['ALT','Shift','E']"/> 
	<command id="cmd_browser_open" onselect="canvas.doActionmenu('browser_open')" key="['ALT','Shift','B']"/>   
	<command id="cmd_browser_close" onselect="canvas.doActionmenu('browser_close')" key="['ALT','Shift','b']"/>   

</library>
