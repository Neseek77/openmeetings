<?xml version="1.0" encoding="UTF-8" ?>

<!-- methods for main.lzx -->

<library>
    
    <command id="cmd_applyforMod" onselect="canvas.doActionmenu('applyForMod')" key="['ALT','Shift','M']"/>
    <command id="cmd_createPoll" onselect="canvas.doActionmenu('createPoll')" key="['ALT','Shift','P']"/> 
    <command id="cmd_pollResults" onselect="canvas.doActionmenu('pollResults')" key="['ALT','Shift','R']"/> 
    <command id="cmd_checkPollVoted" onselect="canvas.doActionmenu('checkPollVoted')" key="['ALT','Shift','V']"/> 
    <command id="cmd_importFile" onselect="canvas.doActionmenu('importFile')" key="['ALT','Shift','I']"/> 
    <command id="cmd_editCamMicSettings" onselect="canvas.doActionmenu('editCamMicSettings')" key="['ALT','Shift','1']"/> 
    <command id="cmd_editBoardSettings" onselect="canvas.doActionmenu('editBoardSettings')" key="['ALT','Shift','2']"/>   
    <command id="cmd_quit" onselect="canvas.doActionmenu('quit')" key="['ALT','Shift','E']"/> 
    <command id="cmd_browser_open" onselect="canvas.doActionmenu('browser_open')" key="['ALT','Shift','B']"/>   
    <command id="cmd_browser_close" onselect="canvas.doActionmenu('browser_close')" key="['ALT','Shift','b']"/>   
	    
	<dataset type="http" name="languageData" request="false" 
	    src="${ canvas.currentlanguage+'.xml' }" proxied="false">
	    <handler name="ondata" args="value">
	        parent.parseLanugageObject(value);
	    </handler>
	</dataset>

	<method name="openMeetingsMenuItemHandler">
	    lz.Browser.loadURL("http://code.google.com/p/openmeetings/", "Openmeetings Homepage");  
	</method>    
	
	<method name="myinit">
		<![CDATA[
		if($debug) Debug.write("main.lzx/config.xml ondata",this);
		//Set Config-values by config.xml, see comments on config.xml
		this.setAttribute('rtmphostlocal',canvas.myConfigSet.getPointer().xpathQuery('config/rtmphostlocal/text()'));   
		this.setAttribute('rtmpport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rtmpport/text()')));  
		this.setAttribute('rtmpTunnelport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rtmpTunnelport/text()'))); 
        this.setAttribute('rtmpsslport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rtmpsslport/text()'))); 
        
        var userSSLString = canvas.myConfigSet.getPointer().xpathQuery('config/useSSL/text()');
        if ($debug) Debug.write("userSSLString",userSSLString)
        if (userSSLString == "yes") {
            this.setAttribute('useSSL',true);
        }
        
		this.setAttribute('red5httpport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/red5httpport/text()')));  
		this.setAttribute('basebgcolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/basebgcolorizer/text()'));  
		this.setAttribute('baseMousecolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/baseMousecolorizer/text()'));  
		this.setAttribute('baseMouseOvercolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/baseMouseOvercolorizer/text()'));  
		this.setAttribute('currentappname',canvas.myConfigSet.getPointer().xpathQuery('config/currentappname/text()'));  
		this.setAttribute('currentappnameurl',canvas.myConfigSet.getPointer().xpathQuery('config/currentappnameurl/text()'));  
		this.setAttribute('currentappnamebugurl',canvas.myConfigSet.getPointer().xpathQuery('config/currentappnamebugurl/text()'));
		this.setAttribute('loudnessAcitviation',canvas.myConfigSet.getPointer().xpathQuery('config/loudnessAcitviation/text()'));
		this.setAttribute('webAppRootKey',canvas.myConfigSet.getPointer().xpathQuery('config/webAppRootKey/text()'));
		this.setAttribute('showWindowEffect',canvas.myConfigSet.getPointer().xpathQuery('config/showWindowEffect/text()'));
		this.setAttribute('firstdayinweek',canvas.myConfigSet.getPointer().xpathQuery('config/firstdayinweek/text()'));
        this.setAttribute('showRecording',canvas.myConfigSet.getPointer().xpathQuery('config/showRecording/text()'));
		
		//old menubar is not active anymore
		//this.setAttribute('showmodernWhiteBoard',canvas.myConfigSet.getPointer().xpathQuery('config/showmodernWhiteBoard/text()'));
		
		//Audio-Video-Settings
		this.setAttribute('framesPerSecond',Number(canvas.myConfigSet.getPointer().xpathQuery('config/framesPerSecond/text()')));  
		this.setAttribute('bandwidthNeededNormal',Number(canvas.myConfigSet.getPointer().xpathQuery('config/bandwidthNeededNormal/text()')));  
		this.setAttribute('bandwidthNeededBest',Number(canvas.myConfigSet.getPointer().xpathQuery('config/bandwidthNeededBest/text()')));  
		this.setAttribute('camQualityNormal',Number(canvas.myConfigSet.getPointer().xpathQuery('config/camQualityNormal/text()')));  
		this.setAttribute('camQualityBest',Number(canvas.myConfigSet.getPointer().xpathQuery('config/camQualityBest/text()')));  
		this.setAttribute('microphoneRateNormal',Number(canvas.myConfigSet.getPointer().xpathQuery('config/microphoneRateNormal/text()')));  
		this.setAttribute('microphoneRateBest',Number(canvas.myConfigSet.getPointer().xpathQuery('config/microphoneRateBest/text()')));  
		
		
		mainBaseText.setAttribute('text',canvas.currentappname);
		mainBaseText.setShadow();
		mainBaseTextLabel.setAttribute('text',canvas.currentappnameurl);  
	
		
		var doubleSlash = _url.indexOf("//");
		var isNotPort80 = _url.indexOf(":", doubleSlash+2);
		//Debug.write("isNotPort80: ",isNotPort80);
		if (isNotPort80!=-1){
		    //Debug.write("isNotPort80: ",doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2);
		    var server = _url.substr(doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2); 
		} else {
		    var server = _url.substr(doubleSlash+2, _url.indexOf("/", doubleSlash+2)-doubleSlash-2); 
		}
		
		//Debug.write("this zielnr: ",this,server);
		
		this.setAttribute('rtmphost',server);
	
		if (this.rtmphostlocal.length==0){
		    this.setAttribute('rtmphostlocal',server);
		}
		
		//Check for Invitation
		var invitationHash = lz.Browser.getInitArg('invitationHash');
		if (invitationHash != undefined){
			canvas.isinitRoomDirect = true;
			canvas.invitationHash = invitationHash;
		}
		
		//sid=fe9ea55284e0b23991b1c1089b2c8f64&roomid=1
		var sid = lz.Browser.getInitArg('sid');
		var initroomid = lz.Browser.getInitArg('roomid');
		if (sid != undefined && initroomid != undefined){
			canvas.remoteUserLogin = true;
			canvas.initroomid = initroomid;
			canvas.remoteUserSid = sid;
		}
		
		var language = lz.Browser.getInitArg('language');
		if (language != undefined) {
			canvas.language_id = Number(language);
		}
	
		//check for reset password
		var hash = lz.Browser.getInitArg('hash');
		if (hash!=undefined){
			canvas.isResetUsername = true;
			canvas.resetHash = hash;		
		}
        
        hib.protocollPort = canvas.rtmpport;
        
        if (canvas.useSSL) {
            hib.protocollName = "rtmps";
            hib.protocollPort = canvas.rtmpsslport;
        }
	
		//Debug.write("rtmphostlocal,rtmphost: ",canvas.rtmphostlocal,canvas.rtmphost);	
		var src = hib.protocollName+'://'+canvas.rtmphostlocal+':'+hib.protocollPort+'/'+canvas.webAppRootKey+'/'+hib.userScope;
        
		canvas.thishib.setAttribute('src',src);
		canvas.thishib.loaderVar = new lz.autoLoader(canvas);
		canvas.thishib.loaderVar._src.setAttribute('text',src);
		canvas.thishib.connect();
		]]>
	</method>
	
	<method name="getLabelName" args="id">
		//if($debug) Debug.write("main.lzx/getLabelName()",id);
		return getLabelTag(id);
	</method>

	<!-- you can delete this comment. It was just memo.
			Mar 24 2008 onokeiji@gmail.com
		 moved from modules/conference/conference/conferenceMenubar.lzx
	-->
	<method name="doActionmenu" args="stringSub">
	    <![CDATA[
	        if($debug) Debug.write("doActionmenu: ",stringSub);
	        if (canvas._conferencemenu.visibility == 'visible'){
	            if (stringSub=='createPoll') {
	                new lz.createPollWin(canvas.main_content._content.inner);
	            } else if (stringSub=='pollResults') {
	                this.getVotes.doCall();
	            } else if (stringSub=='checkPollVoted') {
	                this.checkHasVoted.doCall();
	            } else if (stringSub=='importFile') {
	                new lz.uploadWindow(canvas.main_content._content.inner,{x:60,uploadmodule:canvas.uploadmoduleimg,isOnlyImage:true});
	            } else if (stringSub=='applyForMod') {
	                new lz.applyForModeration(canvas.main_content._content.inner);
	            } else if (stringSub=='editCamMicSettings') {
	                new lz.changeDevice(canvas.main_content._content.inner);
	            } else if (stringSub=='editBoardSettings') {
	                new lz.editWhiteboardDefault(canvas.main_content._content.inner);
	            } else if (stringSub=='quit') {
	            	if($debug) Debug.write(canvas.thishib.modus,canvas.thishib.roomtype);
	                	if (canvas.thishib.modus=='audience' && canvas.thishib.roomtype=='public'){
	                  	var t = new Array();
	                    	t.action = 'publicEvents';
	                	} else if (canvas.thishib.modus=='audience' && canvas.thishib.roomtype=='private'){
	                    	var t = new Array();
	                    	t.action = 'privateEvents';
	               	} else if (canvas.thishib.modus=='conference' && canvas.thishib.roomtype=='public'){
	                  	var t = new Array();
	                    	t.action = 'publicMeetings';
	                	} else if (canvas.thishib.modus=='conference' && canvas.thishib.roomtype=='private'){
	                    	var t = new Array();
	                    	t.action = 'privateMeetings';
	           	}
	
				if($debug) Debug.write( 'conferenceMenubar: doActionMenu(): ' , t);
	                	loadContent(t);
	         	} else if( stringSub == "browser_open" ){
	         		var browserPanelWidth  = canvas.browserPanelWidth;
	         		var browserPanelHeight = canvas.browserPanelHeight;

	         		Debug.write( "is browser[open] ? ", canvas.main_content._content.inner.conferenceBrowser );

	         	//ブラウザのインスタンスを確認して、あれば開く。なければ作成する
	         		if( canvas.main_content._content.inner.conferenceBrowser == undefined ){Debug.write( "if this" );
		        		new lz.conferenceBrowser( canvas.main_content._content.inner,
		        								{name:'conferenceBrowser',x:canvas.main_content._content.inner.width/2,y:50,
		        								 width:browserPanelWidth, height:browserPanelHeight} );
         			}else{Debug.write( "else this" );
					with( canvas.main_content._content.inner ){
	        				conferenceBrowser.htmlviewer.setVisible( true );
	        				conferenceBrowser.setVisible( true );
					}
         		}
			 } else if( stringSub == "browser_close" ){
	         	// 開いているブラウザをアニメーションで移動する　hieght=0	
			 	Debug.write( "is browser[close] ? ", canvas.main_content._content.inner.conferenceBrowser );
				with( canvas.main_content._content.inner ){
				 	if( conferenceBrowser  != undefined ){
	        				conferenceBrowser.htmlviewer.setVisible( false );
	        				conferenceBrowser.setVisible( false );
					}
         		}
		    }
	      }
	    ]]>
	</method>    
	
	<netRemoteCallHib name="getVotes" funcname="pollservice.getVotes" remotecontext="$once{ canvas.thishib }" >
		<handler name="ondata" args="value">
	            <![CDATA[
	                if (value!=null){
	                    new lz.resultPollWin(canvas.main_content._content.inner,{createdBy:value.createdBy.username,pollDate:value.pollDate,pollQuestion:value.pollQuestion,pollTypeId:value.pollTypeId,roomPollAnswerList:value.roomPollAnswerList,roomPollId:value.roomPollId,roomScopeName:value.roomScopeName});
	                } else {
	                    new lz.messageWin(canvas.main_content._content.inner,{labeliderror:41});
	           }
	        ]]>
	      </handler>   
	</netRemoteCallHib>  
	    
	<netRemoteCallHib name="checkHasVoted" funcname="pollservice.checkHasVoted" remotecontext="$once{ canvas.thishib }" >
		<handler name="ondata" args="value">
	      	<![CDATA[
	                  if (value==1){
	                  	parent.getPoll.doCall();
	                  } else if (value==-1){
	                  	new lz.messageWin(canvas.main_content._content.inner,{labeliderror:31});
	                  } else if (value==-2){
	                        new lz.messageWin(canvas.main_content._content.inner,{labeliderror:41});
	            }
	    	]]>
		</handler>   
	</netRemoteCallHib> 
	
	<netRemoteCallHib name="getPoll" funcname="pollservice.getPoll" remotecontext="$once{ canvas.thishib }" >
		<handler name="ondata" args="value">
	      	<![CDATA[
	                  if (value!=null){
	                  	new lz.answerPoll(canvas.main_content._content.inner,{createdBy:value.createdBy.username,pollDate:value.pollDate,pollQuestion:value.pollQuestion,pollTypeId:value.pollTypeId,roomPollAnswerList:value.roomPollAnswerList,roomPollId:value.roomPollId,roomScopeName:value.roomScopeName});
	            }
	        ]]>
		</handler>
	</netRemoteCallHib> 
	
	<method name="setRoomValues" args="roomTypeId,roomId,roomObj">
		if (roomTypeId==1){
	    		canvas.isConference = true;
	    	} else {
	    		canvas.isConference = false;
	    }
    	hib.currentroomid = roomId;
    	if (roomObj!=null){
			if (roomTypeId==1){
				new lz.conferenceView(canvas.main_content._content.inner,{roomobj:roomObj}); 
			} else {
				new lz.audienceView(canvas.main_content._content.inner,{roomobj:roomObj}); 
			}   
    	}
	</method>
			     
	    


<method name="parseLanugageObject" args="obj">

    ////Debug.write('parseLanugageObject: ',obj);
    ////Debug.write('parseLanugageObject: ',obj.childNodes);
    <![CDATA[
    var t = new Array();
    for (var i=0;i<obj.childNodes.length;i++){
        for (var k=0;k<obj.childNodes[i].childNodes.length;k++){
            ////Debug.write(obj.childNodes[i].childNodes[k]);
            var t2 = new Array();
            t2[obj.childNodes[i].childNodes[k].childNodes[0].nodeName]=obj.childNodes[i].childNodes[k].childNodes[0].childNodes[0].data;
            t2[obj.childNodes[i].childNodes[k].childNodes[1].nodeName]=obj.childNodes[i].childNodes[k].childNodes[1].childNodes[0].data;
            t.push(t2);
        }
    }
    setLabelObject(t);
    canvas.initScreen();
    //Debug.write(t);
    ]]>
</method>

<!-- Data Source Definition -->
<dataset name="getSessionVarsData" request="false" proxied="false"
    querytype="POST" src="${ 'http://'+canvas.rtmphost+'/webrooms/checksession.php' }" 
    type="http" >
    <handler name="ondata" args="value">
    
        //Debug.write(value);
        canvas.setAttribute('currentcourse',value.childNodes[0].childNodes[0].childNodes[0].childNodes[0].data);
        canvas.setAttribute('currentcourseName',canvas.currentcourse);
        canvas.setAttribute('currentcourseNameLong',value.childNodes[0].childNodes[0].childNodes[1].childNodes[0].data);
        canvas.setAttribute('currentlanguage',value.childNodes[0].childNodes[0].childNodes[8].childNodes[0].data);

        canvas.setAttribute('currentusename',value.childNodes[0].childNodes[1].childNodes[2].childNodes[0].data+' '+value.childNodes[0].childNodes[1].childNodes[1].childNodes[0].data);
        
        canvas.setAttribute('user_id',value.childNodes[0].childNodes[1].childNodes[0].childNodes[0].data);
        canvas.setAttribute('firstName',value.childNodes[0].childNodes[1].childNodes[1].childNodes[0].data);
        canvas.setAttribute('lastName',value.childNodes[0].childNodes[1].childNodes[2].childNodes[0].data);
        canvas.setAttribute('mail',value.childNodes[0].childNodes[1].childNodes[3].childNodes[0].data);
        canvas.setAttribute('lastLogin','');
        canvas.setAttribute('official_code',value.childNodes[0].childNodes[1].childNodes[5].childNodes[0].data);
        canvas.setAttribute('picture_uri','');
        canvas.setAttribute('language',value.childNodes[0].childNodes[1].childNodes[7].childNodes[0].data);

        //Debug.write(value.childNodes[0].childNodes[1].childNodes[0].childNodes[0].data);
        //Debug.write(value.childNodes[0].childNodes[1].childNodes[1].childNodes[0].data);
        //Debug.write(value.childNodes[0].childNodes[1].childNodes[2].childNodes[0].data);
        //Debug.write(value.childNodes[0].childNodes[1].childNodes[3].childNodes[0].data);
        //Debug.write(value.childNodes[0].childNodes[1].childNodes[4].childNodes[0].data);
        //Debug.write(value.childNodes[0].childNodes[1].childNodes[5].childNodes[0].data);
        //Debug.write(value.childNodes[0].childNodes[1].childNodes[6].childNodes[0].data);
        //Debug.write(value.childNodes[0].childNodes[1].childNodes[7].childNodes[0].data);
        
        switch (canvas.currentlanguage){
            case 'english':
            break;
            case 'german':
            break;
            case 'french':
            break;          
            default:
            canvas.setAttribute('currentlanguage','english');
            break;
        }
        
        var addIt='conf';
        if (!canvas.isConference){
            addIt='meet'
        }
        canvas.setAttribute('currentcourse',canvas.rtmphost+canvas.currentcourse+addIt);
        canvas.setAttribute('currentuser',value.childNodes[0].childNodes[1].childNodes[5].childNodes[0].data);
        
        canvas.setAttribute('loadingmessage','loading language data');
        canvas.languageData.doRequest();
    </handler>
</dataset>


<method name="getSessionVars" args="">
    canvas.setAttribute('loadingmessage','loading session data');
    var d=getSessionVarsData;
    d.doRequest();
</method>


<method name="addBroswerTabHistory" args="value">
    <![CDATA[
    //Debug.write("addBroswerTabHistory: ",value);
    _browserhistory.addItem(value);
    this.browserTabHistory.push(value);
    ]]>
</method>
  


<method name="setModeratorName" args="mod">
    <![CDATA[
	    this.moderatorName = mod;
	    canvas._mymod.mymodText.setAttribute('text',canvas.getLabelName(98)+' '+this.moderatorName);
	    if ($debug) Debug.write("canvas.moderatorStreamID==canvas.streamid",
	                            (canvas.moderatorStreamID==canvas.streamid),
	                            canvas.moderatorStreamID,canvas.streamid);
	    if (canvas.moderatorStreamID==canvas.streamid){
	        this.setAttribute('ismoderator',true);
	    } else {
	        this.setAttribute('ismoderator',false);
	    }
    ]]>
</method>

<handler name="ondrawAllowStatus" args="drawObj">
    <![CDATA[
	    if ($debug) Debug.write("drawAllowStatus changes ###### ");
	    if (drawObj.publicSID==canvas.publicSID) {
            canvas.setAttribute("isAllowedToDraw",drawObj.canDraw);
        }
    ]]>
</handler>

<method name="addFolderSequence" args="foldername">
    <![CDATA[
    this.uploadmoduleimgfolder = '/';
    this.uploadmoduleimgfolder += foldername;
    this.setAttribute('uploadmoduleimgfolder',this.uploadmoduleimgfolder);
    ]]>
</method>
    
    
<!-- country validation -->
<method name="validateCountry" args="str">
    ////Debug.write("validateCountry: ",str);
    str = str.toLowerCase();
    <![CDATA[
        if (str.length!=0){
            var a = new Array();
            for (var i=0;i<canvas.statesInitValues.length;i++){
                var st = canvas.statesInitValues[i].name.toLowerCase();
                if (st.startsWith(str))a.push(canvas.statesInitValues[i]);
                //this.addItem(canvas.statesInitValues[i].name,canvas.statesInitValues[i].state_id);
            }
            return a;
        }
    ]]> 
</method>
    
<method name="getCountryRecord" args="id">
    return canvas.statesInitValues[id];
</method>
    
<handler name="onmousewheeldelta" reference="lz.Keys" args="d">
    var obj = getCurrentMouseWheelObject();
    ////Debug.write("onmousewheeldelta 12: ",d,obj);
    <![CDATA[
        if (obj!=null) {
            obj.step(-d);
        }
    ]]>
</handler>    

<method name="reverseWordingsBySplit" args="str">
    <![CDATA[
        var words_arr = str.split( " " ); // an array of chars
        for ( var i = 0, str = ""; i < words_arr.length; i++ ) // reverse their order
        {
            str += words_arr[ words_arr.length - i - 1 ];
            if (words_arr.length != 1) {
                str += " ";
            }
        }
        return str;
    ]]>
</method> 
    
<method name="reverseWords" args="str">
    <![CDATA[
        if ( str == "" || str == null ) return ""; // undefined
        // first char indicates the main directive of str (rtl/ltr)
        if ( isLTR( str.charCodeAt( 0 ) ) ) return str; // english or number
        var words_arr = str.split( "" ); // an array of chars
        for ( var i = 0, str = ""; i < words_arr.length; i++ ) // reverse their order
            str += words_arr[ words_arr.length - i - 1 ];
        return str;
    ]]>
</method>
    
<method name="isLTR" args="c">
    <![CDATA[
        return ( c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 );
    ]]>
</method>

<method name="isHEB" args="c">
    <![CDATA[
        return ( c >= 224 && c <= 250 );
    ]]>
</method>    

<method name="setTextAlign" args="obj,type">
    switch ( type ) {
        case "left" :
            obj.setX( 0 );
        break;
        case "center" :
            obj.setX( this.parent.width / 2 - this.getTextWidth() / 2 );
        break;
        case "right" :
            obj.setX( this.parent.width - this.getTextWidth() );
        break;
    }
</method>  

</library>
