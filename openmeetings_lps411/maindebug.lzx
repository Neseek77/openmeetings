<?xml version="1.0" encoding="UTF-8" ?>
<canvas debug="true" width="100%" height="100%" >
    <debug fontsize="11" oninit="Debug.showInternalProperties = true" />
    
<!-- 
    If you use maindebug.lzx, main.lzx with debug=true is loaded. 
    h.kuze 2008.3.26
    I re-arranged it back to the old setup,
    I see that this information is duplicated here, but I would like to 
    distribute two versions of OpenMeetings in a binary release: 
    the normal Client and the Client Including the OpenLaszlo-Debug-Player
    -swagner 2008.3.28
-->
    
<include href="incubator/lzcombobox.lzx" />
<include href="incubator/shadowbox.lzx" />

<include href="resources/" /> 
<include href="base/" /><!-- attributes,methods,datasets,are moved into /base -->
<include href="modules/" />
<include href="plugins/" />  

<silverstyle name="defaultstyle" isdefault="true" basecolor="${ canvas.basebgcolorizer }" canvascolor="white" />

<silverstyle name="componentStyle" basecolor="0xFFFFFF" textcolor="0x000000" />

<silverstyle name="itemStyle" basecolor="${ canvas.basebgcolorizer }" 
             textcolor="0xFFFFFF" />

<resource name="currentsplash" src="splash_defaultvalues.swf" />
<resource name="configure_vidrsc" src="resources/configure.png" />
<resource name="mainbackroundmenu_rsc" src="resources/mainbackroundmenu.png" />
<splash><view center="true" ratio="1" resource="splash_defaultvalues.swf" /></splash>
<!-- main colors: 264269 -->
<handler name="oninit">
    //this.setAttribute('framerate',12);
    var cmenu = new LzContextMenu();
    canvas.setDefaultContextMenu(cmenu);
    cmenu.hideBuiltInItems();
    if($debug) Debug.write("main.lzx/oninit:",this);
    // Add Custom Items:
    //var item1 = cmenu.makeMenuItem('MedCast', new LzDelegate(this,"openMeetingsMenuItemHandler"));
    //cmenu.addItem(item1);
</handler>


<!-- View for Contents. All Windows will be loaded on this view. -->
<view name="main_content" y="${ canvas.naviHeightDelta }" width="${canvas.width}" 
    height="${ canvas.height-canvas.naviHeightDelta }" visibility="hidden" showhandcursor="false">
    
    <handler name="onmouseover">
        setCurrentMouseWheelObject(this._scrollbar);
    </handler>
    <handler name="onmouseout">
        disableCurrentMouseWheelObject();
    </handler>
    
    <view x="0" name="_content" >
        <view name="inner" />
        <method name="clearAll">
            <![CDATA[
                if($debug) Debug.write("main.lzx/main_content._content.inner.clearAll(): ",this.inner,this.inner.subviews.length);
                var baseContent = this.inner.subviews[0].close();
                for (var eg in this.inner.subviews) {
                    if($debug) Debug.write("main.lzx/main_content._content.inner.clearAll()-subviews: ",this.inner.subviews[eg]);
                    if (eg!=0) this.inner.subviews[eg].close();               
                }
                return baseContent;
            ]]>
        </method>
    </view>
        <!-- Whats the reason for adding constraints here?
        You cannot set the inner to strict height values, cause otherwise the scrollbar
        won't be showing any difference, no matter if the content of *inner* is
        bigger then the container view *main_content*
        
        -swagner 19.03.2008
        
        <view name="_content" x="0" width="${parent.width}" height="${parent.height}" layout="axis:y;spacing:2">
            <view name="inner" width="${parent.width}" height="${parent.height}" />
            <method name="clearAll">
                <![CDATA[
                    if($debug) Debug.write("main.lzx/clearAll() this.inner: ",this.inner,this.inner.subviews.length);
                    if (this.inner.subviews.length!=0) var baseContent = this.inner.subviews[0].close();
                    for (var eg in this.inner.subviews) {
                        if($debug) Debug.write("clearAll this.inner.subviews: ",this.inner.subviews[eg]);
                        if (eg!=0) this.inner.subviews[eg].close();               
                    }
                    return baseContent;
                ]]>
            </method>
        </view>
            -->
    <vscrollbar name="_scrollbar" id="_mainScrollBar" />
    
</view>  
  
<!-- View for Navigation-bar and App-name -->
<view name="_mainbgcontentNavi" x="0" y="0" bgcolor="${ canvas.basebgcolorizer }" clip="true"
    width="100%" height="${ canvas.naviHeight }" visibility="hidden">
    <text id="mainBaseText" x="10" y="10"
        fgcolor="white" fontsize="20" fontstyle="bold">
        <method name="setShadow" >
            <![CDATA[
            if (this.isinited){
                this.normalMC = this.getMCRef();
                this.displacementMap = new flash.filters.DropShadowFilter();
                this.normalMC.filters = [this.displacementMap];
            }
            ]]>              
        </method> 
        <handler name="onclick">
            lz.Browser.loadURL(canvas.currentappnameurl,"_blank");
        </handler>  
        <labelTooltip id="mainBaseTextLabel" />      
    </text>
    <handler name="oninit">
        var cmenu = new LzContextMenu();
        this.setContextMenu(cmenu);
        cmenu.hideBuiltInItems();
    </handler>     
</view>

<!-- View for Conference menu bar at the top side. Visible on conference -->
<view name="_conferencemenu" y="0" x="0" width="100%" height="20"
    bgcolor="$once{ canvas.baseMousecolorizer }" visibility="hidden" > 
    <method name="removeAll">
        <![CDATA[
            if($debug) Debug.write("main.lzx/_coferencemenu.removeAll(): ");
            while (this.subviews.length > 0) {
                this.subviews[0].destroy();
            }
        ]]>
    </method>
</view>   
    
<!-- View for "Loading" -->
<view name="_loadingAll" visible="false" opacity="0.5" 
    width="${ canvas.width }" height="${ canvas.height }" 
    bgcolor="0xFFFFFF" clickable="true" >
    <text align="right" y="56" fontsize="14" fgcolor="red">Loading...</text>
</view>

<screenSharingContainer name="_screens" />
    
    
</canvas>