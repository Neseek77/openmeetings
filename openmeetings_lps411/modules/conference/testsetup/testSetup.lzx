<?xml version="1.0" encoding="UTF-8" ?>
<library>

<!-- 
#########################################

Test the setup values before you enter a room

 -->
 
<class name="simpleLabelRoundButtonIcon" extends="simpleLabelRoundButton" 
	   height="24" fontstyle="bold" >
	
	<attribute name="ressourceIcon" value="" type="string" />
	<attribute name="tlabelid" value="0" type="number" />
	
	<view name="_iconView" x="10" y="2" resource="$once{ parent.ressourceIcon }" />
	
	<labelText y="4" x="30" labelid="$once{ parent.tlabelid }" resize="true" />
	
	<handler name="onmouseover">
		this._iconView.setAttribute("opacity",0.5);
	</handler>
	
	<handler name="onmouseout">
        this._iconView.setAttribute("opacity",1);
    </handler>
    
</class> 
 
<class name="testSetup" extends="labelExplorerBox" labelid="757" x="$once{ parent.height/2 - 250 }" 
    y="100" docking="true" resizeable="false" closable="true" width="600" height="400">

    <attribute name="roomClassName" type="string" value="" />
    
    <attribute name="roomObj" value="null"/>
    
    <handler name="oninit">
    	<![CDATA[
    	   
            new lz.testingApplication(this,{name:'currentSharing'});

            
    	
    	]]>
    </handler>
    
    <method name="storeSettings">
        <![CDATA[
            //Debug.write("sharedobject store ");
            var t = new lz.sharedObject();
            t.getLocal('userdata');
            var g = t.getData('userdata');
            if (g==null) g = new Array();
            g["cam"] = this.currentSharing.availibleCams.getValue();
            g["mic"] = this.currentSharing.availibleMics.getValue();
            g["showAudioVideoTest"] = this.holddatainSO.getValue();
            t.setData('userdata',g);
            t.flush();  
            
            this.startConference();
        ]]>
    </method>   
    
    <method name="startConference">
    	<![CDATA[
    	
            clearStageContent();
            
            if ($debug) Debug.write("roomClassname : ", +this.roomClassName);
            
            canvas.currentRoomObj = this.roomObj;
            
            this.close();
            
            new lz[this.roomClassName](canvas.main_content._content.inner, {
                        roomobj : this.roomObj
                    });
    	
    	]]>
    </method>
    
    <!-- Remember Me -->    
    <labelCheckbox name="holddatainSO" labelid="759" x="10" y="$once{ parent.height-24 }" >
        <handler name="oninit">
            var t = new lz.sharedObject();
            t.getLocal('userdata');
            var g = t.getData('userdata');
            var save = g["showAudioVideoTest"];
            if ($debug) Debug.write("savecamdata save: ",save);
            if(save) this.setValue(true);
        </handler>         
    </labelCheckbox>
    
    <simpleLabelButton labelid="761" width="160" x="$once{ parent.width-270 }" 
           y="$once{ parent.height-30 }" height="28" 
           onclick="this.parent.storeSettings();">
    	<view resource="test_setup_start_conference_rsc" x="2" y="4" />
    </simpleLabelButton>
    
    <simpleLabelButton labelid="760" width="100" x="$once{ parent.width-105 }" 
           y="$once{ parent.height-30 }" height="28"  
           onclick="this.parent.close();" />

</class>

<class name="testingApplication" extends="view" x="1" y="24">
	
	<attribute name="lastRecorded" value="" type="string" />
	
	<attribute name="isRunning" value="false" type="boolean" />
	
	<method name="doninitalize">
        <![CDATA[
        
            this.isRunning = true;
            
            var valCam = this.availibleCams.getValue();
            var valMic = this.availibleCams.getValue();
            
            var videoview = this._publisher._chatvideoinner._videostream;
            if ($debug) Debug.write("videoview: ",videoview);
            if ($debug) Debug.write(valCam,valMic);
            
            var _micro = Microphone.get(valMic);
            var _camera = Camera.get(valCam);
            if ($debug) Debug.write("_camera.setMode: ",videoview.width,videoview.height,canvas.framesPerSecond,true);
            _camera.setMode(videoview.width,videoview.height,canvas.framesPerSecond,true);
            
            //Microphone.set
            if (canvas.vaquality=="best") {
                _micro.setRate(canvas.microphoneRateBest);
                if ($debug) Debug.write("_camera.setQuality BEST: ",canvas.bandwidthNeededBest,canvas.camQualityBest);
                _camera.setQuality(canvas.bandwidthNeededBest,canvas.camQualityBest);
            } else {
                _micro.setRate(canvas.microphoneRateNormal);
                _micro.setSilenceLevel(canvas.loudnessAcitviation);
                if ($debug) Debug.write("_camera.setQuality NORMAL: ",canvas.bandwidthNeededNormal,canvas.camQualityNormal);
                _camera.setQuality(canvas.bandwidthNeededNormal,canvas.camQualityNormal);
            }
            
            //Microphone setUseEchoSupression(bool)
            _micro.setUseEchoSuppression(true);

            //start recording of client stream
            
            var t = new Date();
            this.lastRecorded = "TEST_SETUP_"+t.getTime();
            
            this._publisher.setAttribute("visibility","visible");
            this._viewer.setAttribute("visibility","hidden");
            
            videoview.record(this.lastRecorded,_camera,_micro);
        ]]>
    </method>
    
    <method name="doPlay">
    	<![CDATA[
    	
    	   if (this.lastRecorded == "") {
    	   	   //Error - nothing recorded yet
    	   	   if ($debug) Debug.warn("Nothing to Play");
    	   } else {
    	   	   
    	   	   this._publisher.setAttribute("visibility","hidden");
               this._viewer.setAttribute("visibility","visible");
               
               var videoview = this._viewer._chatvideoinner._videostream;
               
               videoview.playStream(this.lastRecorded,0);
                
    	   }
    	
    	]]>
    </method>
    
    <method name="doStop">
    	if (this.isRunning) {
    		this.isRunning = false;
    		
    		var videoview = this._publisher._chatvideoinner._videostream;
    		
    		videoview.stop();
    	}
    </method>
	
	<labelText fontstyle="bold" labelid="758"
			   width="$once{ parent.parent.width-2 }" height="30" multiline="true" /> 
	
	<labelText name="availibleCamsLabel" labelid="52" fontsize="11" x="2" y="40" />

    <resetCombobox fontsize="11" name="availibleCams" x="10" y="60" width="260" editable="false">
        <handler name="oninit">
            <![CDATA[
                //Get all availible Cam's
                var tw = Camera.names;
                var r = "";
                for (var eg=0;eg<tw.length;eg++){
                    this.addItem(tw[eg],eg);
                    r=eg;
                }
                var t = new lz.sharedObject();
                t.getLocal('userdata');
                var g = t.getData('userdata');
                if (g!=null){
                    var cam = g["cam"];
                } else {
                    var cam = r;
                }
                if (cam=='undefined' || cam =='' || cam == null) cam=r;
                this.selectItem(String(cam));    

            ]]>
        </handler>
    </resetCombobox>
    
    <labelText name="availibleMicsLabel" labelid="53" fontsize="11" x="2" y="84" />

    <resetCombobox fontsize="11" name="availibleMics"  x="10" y="104" width="260" editable="false">
        <handler name="oninit">
            <![CDATA[
                //Get all availible Mic's
                var tw = Microphone.names;
                var r = "";
                for (var eg=0;eg<tw.length;eg++){
                    r=eg;
                    this.addItem(tw[eg],eg);
                }
                
                var t = new lz.sharedObject();
                t.getLocal('userdata');
                var g = t.getData('userdata');
                if (g!=null){
                    var mic = g["mic"];
                } else {
                    var mic = r;
                }
                if (mic=='undefined' || mic =='' || mic ==null) mic=r;
                this.selectItem(String(mic));  
            ]]>
        </handler>
    </resetCombobox>
	
	<videoObjectTestBroadcast name="_publisher" x="340" y="40" width="240" height="180" />
	
	<videoObjectPlayTestBroadcast name="_viewer" x="340" y="40" 
								  width="240" height="180" visibility="hidden" />
	
	<simpleLabelRoundButtonIcon name="_start" y="190" x="350" 
				ressourceIcon="test_setup_record_rsc"
				width="70" tlabelid="763" >
		<handler name="onclick">
			parent._level_meter.startLevel();
			parent.doninitalize();
		</handler>
	</simpleLabelRoundButtonIcon>
	
	<simpleLabelRoundButtonIcon name="_stop" y="190" x="425" 
				ressourceIcon="test_setup_stop_rsc"
				width="70" tlabelid="766" >
        <handler name="onclick">
        	parent._level_meter.resetNewLevel();
            parent.doStop();
        </handler>
    </simpleLabelRoundButtonIcon>
    
	<simpleLabelRoundButtonIcon name="_play" y="190" x="500" 
				ressourceIcon="test_setup_play_rsc"
				width="70" tlabelid="764" 
				enabled="false">
        <handler name="onclick">
            parent.doPlay();
        </handler>
    </simpleLabelRoundButtonIcon>
    
    <labelText labelid="767" x="340" y="224" />
    
    <view name="_level_meter" x="340" y="244" width="240" height="20" clip="true" bgcolor="0x000000">
    	
    	 <!--- Level delegate, used to track level changes. 
              @keywords private -->
        <attribute name="_leveldel" value="$once{new LzDelegate(this, '_updateLevel')}"/>
    	
    	<method name="_updateLevel" args="no">
    		<![CDATA[
    		    //if ($debug) Debug.write("activityLevel",parent._publisher._chatvideoinner._videostream.micro.activityLevel);
    		    this.setNewLevel(parent._publisher._chatvideoinner._videostream.micro.activityLevel);
    		]]>
    	</method>
    	
    	<method name="startLevel">
    		this._leveldel.register(lz.Idle, "onidle");
    	</method>
    	
    	<method name="resetNewLevel">
    		this._leveldel.unregisterAll();
    		this.setNewLevel(0);
    	</method>
    	
    	<method name="setNewLevel" args="no">
    		<![CDATA[
    		
                var newLevel = (238/100) * no;
            
                this._over.setAttribute("width",238-newLevel);
                this._over.setAttribute("x",1+(newLevel));
                
            ]]>
    	</method>
    	
    	<view name="_bg" width="238" height="18" x="1" y="1" bgcolor="0xFFFFFF" />
    	<view name="_grip" resource="level_meter_rsc" x="1" y="1" />
    	<view name="_over" width="238" height="18" x="1" y="1" bgcolor="0xFFFFFF" />
    </view>
    
    <view y="294" resource="test_setup_info_rsc" x="10" />
    
    <labelText fontstyle="bold" labelid="765" x="39" y="290"
               width="$once{ parent.parent.width-50 }" multiline="true" /> 
    
</class>
	
</library>
 
