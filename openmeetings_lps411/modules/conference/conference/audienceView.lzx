<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="videoBoardAudience" id="myVideoBoardAudience" extends="view" x="2" y="2"
    width="266" height="280" >
    
    <videoContainerAudience name="_videocontainer" x="2" y="22" />

</class>

<class name="audienceView" extends="baseContentView" destroyByMethod="true" >

    <handler name="oninit">
        canvas._mainbgcontentNavi.setAttribute('height',0);
        canvas.setAttribute('naviHeightDelta',28);
        new lz.conferenceMenubar(canvas._conferencemenu);
        new lz.moderationPanel(canvas._conferencemenu,{x:this.roomobj.moderationPanelXPosition});
        canvas._conferencemenu.setAttribute('visibility','visible');

        new lz.videoBoardAudience(this,{
            name:'_videoView',
            x:this.roomobj.videoPodXPosition,
        	y:this.roomobj.videoPodYPosition,
        	width:this.roomobj.videoPodWidth,
        	height:this.roomobj.videoPodHeight});
        
        
        if (this.roomobj.showFilesPanel){
        	new lz.filesPanel(this,{x:this.roomobj.filesPanelXPosition,
        		y:this.roomobj.filesPanelYPosition,
        		width:this.roomobj.filesPanelWidth,
        		height:this.roomobj.filesPanelHeight});
        }
		
       	if (this.roomobj.showWhiteBoard){
       		if (canvas.showmodernWhiteBoard=="y"){
	       		new lz.modernWhiteBoardPanel(this,{x:this.roomobj.whiteBoardPanelXPosition,
	        		y:this.roomobj.whiteBoardPanelYPosition,
	        		width:this.roomobj.whiteBoardPanelWidth,
	        		height:this.roomobj.whiteBoardPanelHeight});
       		} else {
	       		new lz.whiteBoardPanel(this,{x:this.roomobj.whiteBoardPanelXPosition,
	        		y:this.roomobj.whiteBoardPanelYPosition,
	        		width:this.roomobj.whiteBoardPanelWidth,
	        		height:this.roomobj.whiteBoardPanelHeight});       			
       		}

        }
        
        this._videoView.bringToFront();
    </handler>

  <handler name="ontabcontentleave">
        Debug.write("ontabcontentleave:",this);

        if (canvas._videocontainer!=null){
        	canvas._videocontainer._video1.resetValues();
	        canvas._videocontainer = null;
        }
        if (canvas._chatcontent!=null){
        	canvas._chatcontent = null;
        }
        if (canvas._mymod!=null){
        	canvas._mymod = null;
        }
        if (canvas._drawarea.letterObjectIsActive){
          canvas._drawarea.currentletterObj.destroy();
        }
        this.logicalRoomLeave.doCall();
        Debug.write("this.logicalRoomLeave ",this.logicalRoomLeave);
  </handler>

  <netRemoteCallHib name="logicalRoomLeave" funcname="logicalRoomLeave" remotecontext="$once{ canvas.thishib }" >
      <handler name="ondata" args="value">
        //Debug.write("logicalRoomLeave: ",value);
        //this.parent.destroy();
        canvas.thishib.reconnectAfterRoomleft = true;
        canvas.thishib.reconnectedRoomInstance = this.parent;
        
        canvas.thishib.userScope = "hibernate";
        var src = hib.protocollName+'://'+canvas.rtmphostlocal+':'+hib.protocollPort+'/'+canvas.webAppRootKey+'/'+hib.userScope;
        canvas.thishib.setAttribute('src',src);
        
        canvas.thishib.disconnect();
        canvas._mainbgcontentNavi.setAttribute('height',canvas.naviHeight);
        canvas.setAttribute('naviHeightDelta',canvas.naviHeight);
        canvas._conferencemenu.removeAll();
        canvas._conferencemenu.setAttribute('visibility','hidden');
      </handler>
  </netRemoteCallHib>

</class>

</library>
