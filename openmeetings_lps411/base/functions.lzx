<?xml version="1.0" encoding="UTF-8" ?>
<library>


<!-- 

NOTICE:
All contents regarding "chat" are moved to /modules/chat/globalMethods.lzx
Issue353. 2008.3.28 H.kuze(minamotonoason)

-->


<script>
<![CDATA[

var labelObj;
    
var tempActionForNavi = '';

// Load Labels from List
var labels = new Array();

String.prototype.startsWith = function(prefix) {
    return (this.indexOf(prefix) === 0);
};	

var _labelObject = new Array();

var RegExpTooltiplist = null;

function disablesTooltips(obj){
  if(RegExpTooltiplist!=null){
    RegExpTooltiplist.destroy();
    RegExpTooltiplist=null;
  }
  RegExpTooltiplist = obj;
}

function setLabelObject(lableObj){
	_labelObject = lableObj;
}

function getLabelObjectById(labelid){
	for (var i=0;i<_labelObject.length;i++){
		if (Number(_labelObject[i]['labelid'])==labelid){
			return _labelObject[i];
		}
	}
}

function getLabelNameGlob(labelid){
	for (var i=0;i<_labelObject.length;i++){
		if (Number(_labelObject[i]['labelid'])==labelid){
			return _labelObject[i]['labelvalue'];
		}
	}
}
//Debug.write("end init");
    
var currentMouseWheelObject = null;
    
function setCurrentMouseWheelObject(obj) {
    currentMouseWheelObject=obj;
}    
function getCurrentMouseWheelObject(obj) {
    return currentMouseWheelObject;
}  
function disableCurrentMouseWheelObject() {
    currentMouseWheelObject=null;
}  

function setLabelObjectByHundred(no,obj){
    // if($debug) Debug.write("FUNC/setLabelObjectByHundred");
    if(no!=0) no = Math.floor(no/100);
    //Debug.write("SetLabelObject: ",no,obj);
    labels[no] = obj;
}

function getLabelTag(labelid){
    //if($debug) Debug.write("FUNC/getLabelTag",labelid);
    var no = Math.floor(labelid/100);
    return getLabelTagByNo(no,labelid);
}

function getLabelTagByNo(no,labelid){
    var labeltag = "";
    var l = labels[no]
    //if ($debug) Debug.write("Search label tag in: ",labelid,labels[no]);
    for (var eg=0;eg<=l.length;eg++){
        if (l[eg].fieldvalues_id==labelid){
            // if($debug) Debug.write("FUNC/getLabelTagByNo",no,labelid,l[eg].value);
            return l[eg].value;
        }
    }
    return 'error';
}

function quicklink(action){
    // if($debug) Debug.write("FUNC/quicklink",action);
    mainmenuList.doAction(action);
}   
    
function quicklinkAct(action){
    // if($debug) Debug.write("FUNC/quicklinkAct",action);
    var t = new Array();
    t.action = action;
    loadContent(t,null,null);
}            

function loadContent(obj,parentobj,preparentobj){
    // if($debug) Debug.write("FUNC/loadContent: ",obj.action);
    
    tempActionForNavi = obj.action;

    if (!clearStageContent(obj)) {
        loadContentByTempActionForNavi();
    }
    
}
    
function loadContentByTempActionForNavi(){
    // if($debug) Debug.write("FUNC/loadContentByTempActionForNavi");

    if (tempActionForNavi!="logout"){
        // if($debug) Debug.write("FUNC/loadContentByString ",tempActionForNavi);
        new lz[tempActionForNavi](canvas.main_content._content.inner);
    } else {
        canvas._mainbgcontentNavi.navi.destroy();
        canvas._mainbgcontentNavi.help.destroy();
        canvas.thishib.logoutUser.doCall();
    }
}    

function clearStageContent(obj){
    // if($debug) Debug.write("FUNC/clearStageContent: ",obj);
    //can be called with zero arguments
    //if (arguments.length!=0) obj.parent.parent.clearAllSubItemLists();  
    
    return canvas.main_content._content.clearAll();
}
function setLabelObject(labelObjRef){
    // if($debug) Debug.write("FUNC/setLabelObject",labelObjRef);
    labelObj = labelObjRef;
}

function getLabelNameXMLCRM(labelid){
    // if($debug) Debug.write("FUNC/getLabelNameXMLCRM",labelid);
    for (var i=0;i<labelObj.length;i++){
        if (labelid==labelObj[i].fieldvalues_id){
            return labelObj[i].value;
        }
    }
    
}

function getStringTime(){
    var dateObj = new Date();
    var hours = dateObj.getHours();
    if (hours<10) hours="0"+hours;
    var minutes = dateObj.getMinutes();
    if (minutes<10) minutes="0"+minutes;
    return ''+hours+':'+minutes;
}    

function parseDateToString(dateObj){
    // if($debug) Debug.write("FUNC/parseDateToString",dateObj);
    if (dateObj==null) return "";
    var d = dateObj.getDate();
    if (d<10) d = "0"+d;
    var m = dateObj.getMonth()+1;
    if (m<10) m = "0"+m;
    var y = dateObj.getFullYear();
    if (y<10) y = "0"+y;
    return d+'.'+m+'.'+y;
}

function parseDateToStringTimeOnly(dateObj){
    // if($debug) Debug.write("FUNC/parseDateToStringTime",dateObj);
    if (dateObj==null) return "";
    var d = dateObj.getDate();
    if (d<10) d = "0"+d;
    var mo = dateObj.getMonth()+1;
    if (mo<10) mo = "0"+mo;
    var y = dateObj.getFullYear();
    if (y<10) y = "0"+y;
    var h = dateObj.getHours();
    if (h<10) h = "0"+h;    
    var m = dateObj.getMinutes();
    if (m<10) m = "0"+m;        
    return h+':'+m;
}

function parseTimeStringToDate(t){
    // if($debug) Debug.write("FUNC/parseStringToTime",t);
    if (t.length==5){
        var d = 1;
        var m = 1;
        var y = 1970;
        var std = Number(t.substring(0, 2));
        var min = Number(t.substring(3, 5));
        if (!isNaN(d) && !isNaN(m) && !isNaN(y)){
            if ($debug) Debug.write("parseTimeStringToDate: ",new Date(y, m-1, d, std, min))
            return new Date(y, m-1, d, std, min);
        } else {
            return new Date();
        }
    } else {
        return new Date();
    }
}

function parseDateToStringTime(dateObj){
    // if($debug) Debug.write("FUNC/parseDateToStringTime",dateObj);
    if (dateObj==null) return "";
    var d = dateObj.getDate();
    if (d<10) d = "0"+d;
    var mo = dateObj.getMonth()+1;
    if (mo<10) mo = "0"+mo;
    var y = dateObj.getFullYear();
    if (y<10) y = "0"+y;
    var h = dateObj.getHours();
    if (h<10) h = "0"+h;    
    var m = dateObj.getMinutes();
    if (m<10) m = "0"+m;        
    return d+'.'+mo+'.'+y+' '+h+':'+m;
}
function parseStringToDate(t){
    // if($debug) Debug.write("FUNC/parseStringToDate",t);
    if (t.length==10){
        var d = Number(t.substring(0, 2));
        var m = Number(t.substring(3, 5));
        var y = Number(t.substring(6, 10));
        if (!isNaN(d) && !isNaN(m) && !isNaN(y)){
            return new Date(y, m-1, d);
        } else {
            return new Date();
        }
    } else {
        return new Date();
    }
}

function parseStringToDateTime(t){
    // if($debug) Debug.write("FUNC/parseStringToDate",t);
    if (t.length==15){
        var d = Number(t.substring(0, 2));
        var m = Number(t.substring(3, 5));
        var y = Number(t.substring(6, 10));
        var h = Number(t.substring(10, 12));
        var min = Number(t.substring(13, 15));
        if (!isNaN(d) && !isNaN(m) && !isNaN(y)){
            if ($debug) Debug.write("parseStringToDateTime+: ",new Date(y, m-1, d, h, min))
            return new Date(y, m-1, d, h, min);
        } else {
            return new Date();
        }
    } else {
        return new Date();
    }
}

function getStringDateFileSave(){
    // if($debug) Debug.write("FUNC/getStringDateFileSave");
    var dateObj = new Date();
    var hours = dateObj.getHours();
    if (hours<10) hours="0"+hours;
    var minutes = dateObj.getMinutes();
    if (minutes<10) minutes="0"+minutes;
    var date = dateObj.getDate();
    if (date<10) date="0"+date;
    var month = dateObj.getMonth()+1;
    if (month<10) month="0"+month;
    return date+'_'+month+'_'+dateObj.getFullYear()+'_at_'+hours+'_'+minutes;
} 

]]>
</script>




<dataset type="http" name="languageData" request="false" 
	src="${ canvas.currentlanguage+'.xml' }" proxied="false">
	<handler name="ondata" args="value">
		parent.parseLanugageObject(value);
	</handler>
</dataset>

<method name="parseLanugageObject" args="obj">

	////Debug.write('parseLanugageObject: ',obj);
	////Debug.write('parseLanugageObject: ',obj.childNodes);
	<![CDATA[
	var t = new Array();
	for (var i=0;i<obj.childNodes.length;i++){
		for (var k=0;k<obj.childNodes[i].childNodes.length;k++){
			////Debug.write(obj.childNodes[i].childNodes[k]);
			var t2 = new Array();
			t2[obj.childNodes[i].childNodes[k].childNodes[0].nodeName]=obj.childNodes[i].childNodes[k].childNodes[0].childNodes[0].data;
			t2[obj.childNodes[i].childNodes[k].childNodes[1].nodeName]=obj.childNodes[i].childNodes[k].childNodes[1].childNodes[0].data;
			t.push(t2);
		}
	}
	setLabelObject(t);
	canvas.initScreen();
	//Debug.write(t);
	]]>
</method>

<!-- Data Source Definition -->
<dataset name="getSessionVarsData" request="false" proxied="false"
	querytype="POST" src="${ 'http://'+canvas.rtmphost+'/webrooms/checksession.php' }" 
	type="http" >
	<handler name="ondata" args="value">
	
		//Debug.write(value);
		canvas.setAttribute('currentcourse',value.childNodes[0].childNodes[0].childNodes[0].childNodes[0].data);
		canvas.setAttribute('currentcourseName',canvas.currentcourse);
		canvas.setAttribute('currentcourseNameLong',value.childNodes[0].childNodes[0].childNodes[1].childNodes[0].data);
		canvas.setAttribute('currentlanguage',value.childNodes[0].childNodes[0].childNodes[8].childNodes[0].data);

		canvas.setAttribute('currentusename',value.childNodes[0].childNodes[1].childNodes[2].childNodes[0].data+' '+value.childNodes[0].childNodes[1].childNodes[1].childNodes[0].data);
		
		canvas.setAttribute('user_id',value.childNodes[0].childNodes[1].childNodes[0].childNodes[0].data);
		canvas.setAttribute('firstName',value.childNodes[0].childNodes[1].childNodes[1].childNodes[0].data);
		canvas.setAttribute('lastName',value.childNodes[0].childNodes[1].childNodes[2].childNodes[0].data);
		canvas.setAttribute('mail',value.childNodes[0].childNodes[1].childNodes[3].childNodes[0].data);
		canvas.setAttribute('lastLogin','');
		canvas.setAttribute('official_code',value.childNodes[0].childNodes[1].childNodes[5].childNodes[0].data);
		canvas.setAttribute('picture_uri','');
		canvas.setAttribute('language',value.childNodes[0].childNodes[1].childNodes[7].childNodes[0].data);

		//Debug.write(value.childNodes[0].childNodes[1].childNodes[0].childNodes[0].data);
		//Debug.write(value.childNodes[0].childNodes[1].childNodes[1].childNodes[0].data);
		//Debug.write(value.childNodes[0].childNodes[1].childNodes[2].childNodes[0].data);
		//Debug.write(value.childNodes[0].childNodes[1].childNodes[3].childNodes[0].data);
		//Debug.write(value.childNodes[0].childNodes[1].childNodes[4].childNodes[0].data);
		//Debug.write(value.childNodes[0].childNodes[1].childNodes[5].childNodes[0].data);
		//Debug.write(value.childNodes[0].childNodes[1].childNodes[6].childNodes[0].data);
		//Debug.write(value.childNodes[0].childNodes[1].childNodes[7].childNodes[0].data);
		
		switch (canvas.currentlanguage){
			case 'english':
			break;
			case 'german':
			break;
			case 'french':
			break;			
			default:
			canvas.setAttribute('currentlanguage','english');
			break;
		}
		
		var addIt='conf';
		if (!canvas.isConference){
			addIt='meet'
		}
		canvas.setAttribute('currentcourse',canvas.rtmphost+canvas.currentcourse+addIt);
		canvas.setAttribute('currentuser',value.childNodes[0].childNodes[1].childNodes[5].childNodes[0].data);
		
		canvas.setAttribute('loadingmessage','loading language data');
		canvas.languageData.doRequest();
	</handler>
</dataset>


<method name="getSessionVars" args="">
	canvas.setAttribute('loadingmessage','loading session data');
	var d=getSessionVarsData;
	d.doRequest();
</method>


<method name="addBroswerTabHistory" args="value">
  	<![CDATA[
  	//Debug.write("addBroswerTabHistory: ",value);
  	_browserhistory.addItem(value);
  	this.browserTabHistory.push(value);
  	]]>
</method>
  


<method name="setModeratorName" args="mod">
	<![CDATA[
	this.moderatorName = mod;
	canvas._mymod.mymodText.setAttribute('text',canvas.getLabelName(98)+' '+this.moderatorName);
	if ($debug) Debug.write("canvas.moderatorStreamID==canvas.streamid",
                            (canvas.moderatorStreamID==canvas.streamid),
                            canvas.moderatorStreamID,canvas.streamid);
	if (canvas.moderatorStreamID==canvas.streamid){
		this.setAttribute('ismoderator',true);
	} else {
		this.setAttribute('ismoderator',false);
	}
	]]>
</method>

<method name="addFolderSequence" args="foldername">
	<![CDATA[
	this.uploadmoduleimgfolder = '/';
	this.uploadmoduleimgfolder += foldername;
	this.setAttribute('uploadmoduleimgfolder',this.uploadmoduleimgfolder);
	]]>
</method>
	
	
<!-- country validation -->
<method name="validateCountry" args="str">
	////Debug.write("validateCountry: ",str);
    str = str.toLowerCase();
	<![CDATA[
		if (str.length!=0){
			var a = new Array();
			for (var i=0;i<canvas.statesInitValues.length;i++){
                var st = canvas.statesInitValues[i].name.toLowerCase();
				if (st.startsWith(str))a.push(canvas.statesInitValues[i]);
				//this.addItem(canvas.statesInitValues[i].name,canvas.statesInitValues[i].state_id);
			}
			return a;
		}
	]]>	
</method>
    
<method name="getCountryRecord" args="id">
    return canvas.statesInitValues[id];
</method>
    
<handler name="onmousewheeldelta" reference="lz.Keys" args="d">
    var obj = getCurrentMouseWheelObject();
    ////Debug.write("onmousewheeldelta 12: ",d,obj);
    <![CDATA[
        if (obj!=null) {
            obj.step(-d);
        }
    ]]>
</handler>    

<method name="reverseWordingsBySplit" args="str">
    <![CDATA[
        var words_arr = str.split( " " ); // an array of chars
        for ( var i = 0, str = ""; i < words_arr.length; i++ ) // reverse their order
        {
            str += words_arr[ words_arr.length - i - 1 ];
            if (words_arr.length != 1) {
                str += " ";
            }
        }
        return str;
    ]]>
</method> 
    
<method name="reverseWords" args="str">
    <![CDATA[
        if ( str == "" || str == null ) return ""; // undefined
        // first char indicates the main directive of str (rtl/ltr)
        if ( isLTR( str.charCodeAt( 0 ) ) ) return str; // english or number
        var words_arr = str.split( "" ); // an array of chars
        for ( var i = 0, str = ""; i < words_arr.length; i++ ) // reverse their order
            str += words_arr[ words_arr.length - i - 1 ];
        return str;
    ]]>
</method>
    
<method name="isLTR" args="c">
    <![CDATA[
        return ( c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 );
    ]]>
</method>

<method name="isHEB" args="c">
    <![CDATA[
        return ( c >= 224 && c <= 250 );
    ]]>
</method>    

<method name="setTextAlign" args="obj,type">
    switch ( type ) {
        case "left" :
            obj.setX( 0 );
        break;
        case "center" :
            obj.setX( this.parent.width / 2 - this.getTextWidth() / 2 );
        break;
        case "right" :
            obj.setX( this.parent.width - this.getTextWidth() );
        break;
    }
</method>         

<!--

 -->
		
</library>
