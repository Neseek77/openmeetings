<library>

	<!-- CLASS: rtlText ============================================ --> 
	<!-- use this on dynamic data text tags. -->
	<class name="rtlText" extends="text">
		
		<!-- ATTRIBUTES -->
		<!-- text alignment: default is right -->
    <attribute name="textAlign" value="right" type="string" /> 
    
    <method name="getTextAlign">    
    	return this.textAlign;
    </method>
    
    <method name="setTextAlign">
    	switch ( this.getTextAlign() ) {
				case "left" :
					this.setX( 0 );
				break;
				case "center" :
					this.setX( this.parent.width / 2 - this.getTextWidth() / 2 );
				break;
				case "right" :
					this.setX( this.parent.width - this.getTextWidth() );
				break;
			}
    </method>
    
    <method name="isLTR" args="c">
		<![CDATA[
			return ( c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 );
		]]>
	</method>
    
    <method name="isHEB" args="c">
		<![CDATA[
			return ( c >= 224 && c <= 250 );
		]]>
	</method>
    
    <method name="reverseWords" args="str">
		<![CDATA[
			if ( str == "" || str == null ) return ""; // undefined
			// first char indicates the main directive of str (rtl/ltr)
			if ( isLTR( str.charCodeAt( 0 ) ) ) return str; // english or number
			var words_arr = str.split( "" ); // an array of chars
			for ( var i = 0, str = ""; i < words_arr.length; i++ ) // reverse their order
				str += words_arr[ words_arr.length - i - 1 ];
			return str;
		]]>
	</method>
		
	<method name="applyData" args="rtl_str">
		this.setText( reverseWords( rtl_str ) );
	</method>
	
	<handler name="ontext">
		setTextAlign();
	</handler>
		
	</class>

</library>
