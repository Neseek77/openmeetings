<?xml version="1.0" encoding="UTF-8" ?>
<library>
    
<class name="participents" extends="baseRoomInnerList" 
       height="$once{ parent.height-34 }">

    <!--- holds a references to the videoview which is broadcasting -->
    <attribute name="broadCastViewRef" value="null" />
    
    <!--
       This is a variable to make it backwards compatible to the old room layout
     -->
    <attribute name="userNewVideoContainer" value="false" type="boolean"/>
    
    <handler name="oninit">
        //set modus
        canvas.thishib.modus = "conference";
       
        //set reference, this reference will be cleared at *ontabcontenctleave* event
        canvas._videocontainer=this;
        
        // Reconnect User to its Room Id
        canvas.thishib.userScope = canvas.thishib.currentroomid;
        var src = hib.protocollName+'://'+canvas.rtmphostlocal+':'+hib.protocollPort+'/'+canvas.webAppRootKey+'/'+hib.userScope;
        
        if( $debug ) Debug.write("videoContainer: canvas.thishib: ",canvas.thishib.src,canvas.thishib);
        
        if (canvas.thishib.src != src) {
            canvas.thishib.setAttribute('src',src);
            
            canvas.thishib.reconnectionAction = true;
            canvas.thishib.reconnectObjRef = this;
            canvas.thishib.disconnect();
        } else {
            //The user is already in the correct Scope
            this.reconnectSuccess();
        }
    </handler>
                  
    <method name="reconnectSuccess">
        if ($debug) Debug.write("User Reloged In");
        //set default values and get already availible streams
        this.getRoomModeratorsByRoomId.doCall();
    </method>
    
    <netRemoteCallHib name="getRoomModeratorsByRoomId" funcname="conferenceservice.getRoomModeratorsByRoomId" 
                      remotecontext="$once{ canvas.thishib }" >  
        <netparam><method name="getValue">return canvas.sessionId;</method></netparam>    
        <netparam><method name="getValue">return hib.currentroomid;</method></netparam>
        <handler name="ondata" args="value">
            <![CDATA[
                if ($debug) Debug.write("getRoomModeratorsByRoomId: ",value);
                canvas.becomeSuperModerator = false;
                
                parent.setRoomValues.applyDefaultModeration = canvas.becomemoderator;
                canvas.becomeSuperModerator = canvas.becomemoderator;
                
                if (!canvas.becomeSuperModerator) {
    	            for (var i=0;i<value.length;i++) {
                        
                        if (value[i].user.user_id == canvas.user_id) {
                            parent.setRoomValues.applyDefaultModeration = true;
                            canvas.becomeSuperModerator = value[i].isSuperModerator;
                            if ($debug) Debug.info("Make this User to an Moderator");
                            break;
                        }
                        
                    }
                }
	            
                if ($debug) Debug.write("canvas.becomemoderator: ",canvas.becomemoderator);
                if ($debug) Debug.write("canvas.becomeSuperModerator: ",canvas.becomeSuperModerator);
                
                canvas.currentusercolor = parent._participents.getColorForUser();
                
                var organisation_id = 1;
            
                if ($debug) Debug.write(hib.userobject); 
                if ($debug) Debug.write(hib.currentdomainObj); 
                
                if (hib.currentdomainObj != null) {
                    organisation_id = hib.currentdomainObj.organisation_id
                }
                
                this.parent.setRoomValues.organisation_id = organisation_id;
                
                if ($debug) Debug.write("setRoomValues CALL: ");
                this.parent.setRoomValues.doCall();
            
            ]]>
        </handler>
    </netRemoteCallHib>     

    <netRemoteCallHib name="setRoomValues" funcname="setRoomValues" remotecontext="$once{ canvas.thishib }" >   
        <attribute name="applyDefaultModeration" value="false" type="boolean" />
        <attribute name="organisation_id" value="0" type="number" />
        <netparam><method name="getValue">return hib.currentroomid;</method></netparam>
        <netparam><method name="getValue">return parent.applyDefaultModeration;</method></netparam>
        <netparam><method name="getValue">return canvas.becomeSuperModerator;</method></netparam>
        <netparam><method name="getValue">return parent.organisation_id;</method></netparam>
        <netparam><method name="getValue">return canvas.currentusercolor;</method></netparam>
        <handler name="ondata" args="roomStatus">
            <![CDATA[
            //The onResult-Handler will be called be the rtmpconnection
            if ($debug) Debug.write("+++++++++++++++++");
            if ($debug) Debug.write("+++++++++++++++++ setRoomValues1: ",roomStatus);
            //if ($debug) Debug.write("setRoomValues2: ",hib.currentroomid);
            
            //if ($debug) Debug.write("+++++++++++++++++ getClientListScope : ",value);
            
            if (roomStatus.roomFull) {
                canvas.thishib.showFullMessage = true;
                canvas.thishib.disconnect();
            }
            
            if (roomStatus.browserStatus.browserInited) {
                var tObj = new Object();
                tObj[0] = "newBrowserURL";
                tObj[1] = roomStatus.browserStatus.currentURL;
                canvas.startBrowser(tObj);
            }
            
            var value = roomStatus.clientMap;
            
            for (var i in value){
                if ( value[i].streamid == canvas.streamid ) {
                    canvas.isAllowedToDraw = value[i].canDraw;
                }
                //if ($debug) Debug.write("getClientListScope value: ",value[i]);
                this.parent.addItem(value[i].connectedSince,value[i].isMod,value[i].streamid,value[i].username,
                              '',value[i].formatedDate,value[i].userpos,value[i].usercolor,value[i]);
            }
            //this content must be inited _after_ setting the default values
            canvas.thishib.getCurrentModeratorList.doCall(); 
            canvas.thishib.checkLzRecording.doCall();
            canvas._chatcontent.doInit();   
            ]]>
        </handler>  
    </netRemoteCallHib>

    <!-- invoked if another client logs into the room 
    after choosing devices -->     
    <method name="setAVSettingsToClient" args="rcl">
        if ($debug) Debug.write("setAVSettingsToClient ",rcl.publicSID,rcl);
        var obj = this.getVideoObjectByPublicSID(rcl.publicSID);
        if ($debug) Debug.write("setAVSettingsToClient: ",obj,rcl.avsettings);
        if (obj == null) {
            if ($debug) Debug.warn("Could Not Find Instance setAVSettingsToClient ",rcl.publicSID);
            return;
        }
        if (rcl.avsettings=="n"){
            obj.setAttribute("visibility","hidden");
            obj.setVideouserProfilePic(rcl);
        } else if (rcl.avsettings=="a"){
            obj.setVideouserProfilePic(rcl);
            obj.setAttribute("visibility","hidden");
        } else {
            obj.deleteVideoConfProfilePic();
            obj.setAttribute("visibility","visible");
        }
        obj.clientVars = rcl;
        obj.updateAVSettingsSymbol(rcl);
    </method> 
    

    <!--- get a baseVideoObject by a Users publicSID
        @param string publicSID publicSID
     -->
    <method name="getVideoObjectByPublicSID" args="publicSID">
        <![CDATA[
            //if ($debug) Debug.write("getVideoObjectByPublicSid SEARCH: ",publicSID,parent.parent);
            
            //for (var i=0;i<this._videoviewcontent.subviews.length;i++){
            //  if ($debug) Debug.write("getVideoObjectByBroadCastId6 broadcastId: ",this._videoviewcontent.subviews[i].broadcastId);
            //  if ($debug) Debug.write("getVideoObjectByBroadCastId7 streamid,user_id: ",this._videoviewcontent.subviews[i].clientVars.streamid,this._videoviewcontent.subviews[i].clientVars.user_id);
            //}
            var videoContainer = this._videoviewcontent;
            if (this.userNewVideoContainer) {
                videoContainer = parent.parent._videoviewcontent;
            }
            
            for (var i=0;i<videoContainer.subviews.length;i++){
                //if ($debug) Debug.write("getVideoObjectByBroadCastId2 broadcastId VIEW: ",this._videoviewcontent.subviews[i].broadcastId);
                //if ($debug) Debug.write("getVideoObjectByBroadCastId3 broadcastId SEARCH: ",broadcastId);
                //if ($debug) Debug.write("getVideoObjectByBroadCastId4 obj: ",this._videoviewcontent.subviews[i]);
                //if ($debug) Debug.write("getVideoObjectByBroadCastId5 streamid,user_id: ",this._videoviewcontent.subviews[i].clientVars.streamid,this._videoviewcontent.subviews[i].clientVars.user_id);
                if (videoContainer.subviews[i].publicSID==publicSID){
                    return videoContainer.subviews[i];
                }
            }
            
            if ($debug) Debug.warn(" - getVideoObjectByPublicSID - DID NOT FIND THE USER BY ",publicSID);
            
            return null;
            
        ]]>
    </method>           

    <method name="addItem" args="connectedSince,isMod,streamid,username,userroom,formatedDate,position,color,object">
        <![CDATA[
            if ($debug) Debug.write("initializeStreams addItem: ",connectedSince,object);
            
            //Do init only in case this stream is NOT the same as we are
            if (streamid!=canvas.streamid){
            	
            	//if ($debug) Debug.write("???????? object.isBroadcasting :: ",object.isBroadcasting);
            	
                var myvideocontainer = this.getNewVideoObjectByPos(object.publicSID);
                myvideocontainer.clientVars = object;
                myvideocontainer.setAttribute('chatpartnername',object.firstname+' '+object.lastname);
                if ($debug) Debug.write("object.avsettings: ",object.avsettings);
                if (object.avsettings=="n"){
                    myvideocontainer.setVideouserProfilePic(object);
                    myvideocontainer.setAttribute("visibility","hidden");
                } else if (object.avsettings=="a"){
                    myvideocontainer.setVideouserProfilePic(object);
                    if ($debug) Debug.warn("start play");
                    myvideocontainer._chatvideoinner._videostream.playStream(object.broadCastID,-1);
                    myvideocontainer.setAttribute("visibility","hidden");
                } else {
                	myvideocontainer.setDefaultVideoSize(object.VWidth,object.VHeight);
                    myvideocontainer._chatvideoinner._videostream.playStream(object.broadCastID,-1);    
                    myvideocontainer.setAttribute("visibility","visible");
                    if ($debug) Debug.warn("start play");
                }
                myvideocontainer.updateAVSettingsSymbol(object);
                
                //do add others
                this._participents.addItem(object);
                
                return myvideocontainer;
            } else {
                
                //do add self too
                this._participents.addItem(object);
                
            }
           
        ]]>
    </method>
    
    <method name="addClientItem" args="connectedSince,isMod,streamid,username,room_id,formatedDate,position,color,object">
        <![CDATA[
        if ($debug) Debug.write("### initializeStreams addClientItem: ",connectedSince,isMod,streamid,username,room_id,formatedDate);
        
            if (canvas.publicSID != object.publicSID){
                
                
                var myvideocontainer = this.getNewVideoObjectByPos(object.publicSID);
                myvideocontainer.clientVars = object;
                myvideocontainer.setAttribute('chatpartnername',object.firstname+' '+object.lastname);
                if ($debug) Debug.write("addClientItem avsettings: ",object.avsettings);
                if (object.avsettings=="n" || object.avsettings=="a"){
                    myvideocontainer.setVideouserProfilePic(object);
                }
                myvideocontainer.updateAVSettingsSymbol(object);
                
            }

            //Do Add it anyway
            this._participents.addItem(object);
        ]]>
    </method>
        
    <!--
        invoked whenever a User starts to Stream Video in this Room, 
        interviewPodId has only a meaning in the Room Type Interview
     -->        
    <method name="startStream" args="publicSID,broadcastId,firstname,lastname,interviewPodId,width,height">
        <![CDATA[
            //if ($debug) Debug.write("startStream broadcastId: ",broadcastId);
            var obj = this.getVideoObjectByPublicSID(publicSID);
            //if ($debug) Debug.write("startStream obj: ",obj);
            if (obj != null ){
            	obj.setDefaultVideoSize(width,height);
                obj._chatvideoinner._videostream.playStream(broadcastId,-1);
                obj.setAttribute('chatpartnername',firstname+' '+lastname);
            }
        ]]>
    </method>

    <method name="updateMuteStatusVideoView" args="roomClient">
        <![CDATA[
            var videoContainer = parent.parent._videoviewcontent;
            for (var i=0;i<videoContainer.subviews.length;i++){
                videoContainer.subviews[i].muteMicrophone(roomClient);
            }
        ]]>
    </method>
    
    <!-- 
        This method returns an object of type videoObjectBroadcast
        you can only publish you a/v with this object
        @param string broadcastId broadcastId
     -->
    <method name="getNewVideoObject" args="publicSID">
        <![CDATA[
            var obj = this.getVideoObjectByPublicSID(publicSID);
            if (obj!=null){
                this.broadCastViewRef = obj;
            } else {
                
                var videoContainer = this._videoviewcontent;
                if (this.userNewVideoContainer) {
                    videoContainer = parent.parent._videoviewcontent;
                }
                
                if ($debug) Debug.warn("videoContainer ",videoContainer);
                
                //Get a Free VideoView Slot
                var freePos = videoContainer.getVideoObjectFreePos(40, 100, 100);
                
                this.broadCastViewRef = new lz.videoObjectBroadcast(videoContainer,{
                        publicSID:publicSID,
                        x:freePos[0],y:freePos[1],
                        hidebyAudioOnly:true
                    });
                canvas.currentusercolor = this.getColorForUser();
                this.broadCastViewRef._chatvideoinner.r.destroy();
                canvas.thishib.setAudienceModus.doCall();
                this.broadCastViewRef.setAttribute('chatpartnername',hib.userobject.firstname+' '+hib.userobject.lastname);
            }
            return this.broadCastViewRef;
        ]]>
    </method>
    
    <!---
        returns a new object of type videoObjectPlayBroadcast
        you can only play a stream not publish you a/v with this object
        @param string broadcastId broadcastId
     -->
    <method name="getNewVideoObjectByPos" args="publicSID">
        <![CDATA[
            var obj = this.getVideoObjectByPublicSID(publicSID);
            if (obj!=null){
                return obj;
            }
            var videoContainer = this._videoviewcontent;
            if (this.userNewVideoContainer) {
                videoContainer = parent.parent._videoviewcontent;
            }
            
            //Get a Free VideoView Slot
            var freePos = videoContainer.getVideoObjectFreePos(40, 100, 100);
            
            return new lz.videoObjectPlayBroadcast(videoContainer,{
                    publicSID:publicSID,
                    x:freePos[0],y:freePos[1]
                });
        ]]>
    </method>
    
    <!--- 
        invoked remotely by Red5-notification 
        shows a green light if somebody is speaking
        @param string broadcastId broadcastId
        @param boolean bool show light on/off
    -->
    <method name="setSpeakingByPos" args="publicSID,bool">
        <![CDATA[
            var obj = this.getVideoObjectByPublicSID(publicSID);
            var objList = this._participents.getVideoObjectByPublicSID(publicSID);
            if (bool){
                obj._loudness.loudness.setAttribute('opacity',1);
                objList._miniIcons._loudness.loudness.setAttribute('opacity',1);
            } else {
                obj._loudness.loudness.setAttribute('opacity',0.2);
                objList._miniIcons._loudness.loudness.setAttribute('opacity',0.2);
            }
        ]]>
    </method>   
    
    <!--- 
        stops the streaming but does not destroy the view
        @param int broadcastId broadcastId
     -->
    <method name="closeStreamClient" args="publicSID">
        <![CDATA[
            if ($debug) Debug.write("closeStreamclient: ",publicSID);
            var obj = this.getVideoObjectByPublicSID(publicSID);
            if ($debug) Debug.write("closeStreamclient obj: ",obj);
            if (obj != null){
                obj.resetValues();
            }
        ]]>
    </method>
    
    <!--- 
        stops the streaming but and destroys the view
        @param int broadcastId broadcastId
     -->
    <method name="disconnectclient" args="publicSID">
        <![CDATA[
            if ($debug) Debug.write("disconnectclient: ",publicSID);
            
            var obj = this.getVideoObjectByPublicSID(publicSID);
            var objList = this._participents.getVideoObjectByPublicSID(publicSID);
            
            //if ($debug) Debug.write("disconnectclient obj: ",obj);
            if (obj == null) {
            	if ($debug) Debug.warn("Could Not find CLient To disconnect",publicSID);
            }
            
            if (obj != null){
                obj.resetValues();
                obj.destroy();
            }
            if (objList != null){
                objList.resetValues();
                objList.destroy();
            }
            return null;
        ]]>
    </method>   
    
    <method name="resetAllValues">
        var videoContainer = this._videoviewcontent;
        if (this.userNewVideoContainer) {
            videoContainer = parent.parent._videoviewcontent;
        }
        for (var eg in videoContainer.subviews){
            videoContainer.subviews[eg].resetValues();
        }
    </method>
    
    <moderationMiniIconsEventUserList name="_applyAndStatusIcons" showAvIcons="false" x="2" y="2" >
        <handler name="onismoderator" reference="canvas" args="m">
            this.updateIcons();
        </handler>
        <handler name="ondrawAllowStatus" reference="canvas" args="drawObject">
            this.updateIcons();
        </handler>
        <handler name="onexclusiveAudioAllowStatus" reference="canvas" args="rclObject">
            this.updateIcons();
        </handler>
        <handler name="onlastBroadCastingUser" reference="canvas" args="userObject">
            this.updateIcons();
        </handler>
        <handler name="onmicMutedStatusChangedItem" reference="canvas" args="userObject">
            this.updateIcons();
        </handler>
    </moderationMiniIconsEventUserList>
    
    <participentList name="_participents" />
    
    <commonVideoViewContent name="_videoviewcontent" />
    
</class>

</library>