<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project name="openmeetings" basedir="./" default="dist">

    <!-- Sources and output dirs -->
    <property name="main.src.dir" value="${basedir}/src/app"/>
    <property name="webstart.src.dir" value="${basedir}/src/screenviewer"/>
    <property name="templates.src.dir" value="${basedir}/src/templates"/>
    <property name="test.src.dir" value="${basedir}/src/test"/>
	<property name="client.src.dir" value="${basedir}/src/client"/>
    <property name="main.out.dir" value="${basedir}/bin"/>
	
	<!-- screen.out.dir -->
	<property name="screen.out.dir" value="${basedir}/screen_compile" />
	
	<!-- screen.src.dir -->
	<property name="screen.src.dir" value="${basedir}/src/red5-screenshare" />
	
	<!-- hudson config -->
	<property environment="env"/>

	<property name="build.number.hudson" value="${env.BUILD_NUMBER}" />
	<property name="build.svn.hudson" value="${env.SVN_REVISION}" />
	<property name="build.target" value="/home/swagner/apache-tomcat-6.0.18/webapps/openmeetings/builds/" />
	
    <!-- Axis2 Services -->
    <property name="fileservice.src.dir" value="${basedir}/src/fileservice"/>
    <property name="roomservice.src.dir" value="${basedir}/src/roomservice"/>
    <property name="userservice.src.dir" value="${basedir}/src/userservice"/>
    
    <property name="classes.dir" value="${basedir}/bin"/>
    
    <property name="dist.dir" value="dist"/>
    
    <!-- Conf dirs -->
    <property name="conf.dir" value="${basedir}/conf"/>
    
    <!-- Distribution properties -->
    <property name="project.distname" value="openmeetings"/>

    <!-- Hibernate Properties -->
    <property file="${conf.dir}/hibernate.properties" />

    <!-- libraries -->
    <property name="project.lib" value="./lib"/>
	
    <!-- Hibernate -->
    <property name="hibernate.lib" value="${project.lib}/hibernate_36"/>
    <!-- Log4j -->
    <property name="log4j.lib" value="${project.lib}/log4j" />
    <!-- xDoclet -->
    <property name="xdoclet.lib" value="${project.lib}/xdoclet" />
    <!-- Jakarta commons -->
    <property name="jakarta.common.lib" value="${project.lib}/jakarta-commons" />
    <!--JDBC Drivers-->
    <property name="database.lib" value="${project.lib}/database" />
    <property name="red5.lib" value="${project.lib}/red5_08rc3" />
    <property name="upload.lib" value="${project.lib}/upload" />
    <property name="xstream.lib" value="${project.lib}/xstream" />
    <property name="junit.lib" value="${project.lib}/junit" />
    <property name="web.lib" value="${project.lib}" />
    <property name="ical.lib" value="${project.lib}/ical4j" />
    <!-- Apache Axis2 -->
    <property name="axis2.lib" value="${project.lib}/axis2-1.3" />
    <!-- JMF Libe -->
    <property name="jmf.lib" value="${project.lib}/jmf" />
    <!-- SLF4J -->
    <property name="slf4j.lib" value="${project.lib}/slf4j" />
    <!-- Apache Velocity -->
    <property name="velocity.lib" value="${project.lib}/velocity" />
    <!-- Apache Batik -->
    <property name="batik.lib" value="${project.lib}/batik_17" />
    <property name="java2swf.lib" value="${project.lib}/java2swf" />
	<!-- Junit -->
    <property name="junit.lib" value="${project.lib}/junit" />
	
	<!-- screenshare.lib -->
    <property name="screenshare.lib" value="${basedir}/WebContent/red5-screenshare" />
	
    <!-- compile classpath -->
    <path id="compile.classpath">
        <fileset dir="${log4j.lib}" includes="*.jar"/>
        <fileset dir="${hibernate.lib}" includes="*.jar"/>
        <fileset dir="${project.lib}" includes="*.jar"/>
        <fileset dir="${jakarta.common.lib}" includes="*.jar"/>
        <fileset dir="${red5.lib}" includes="*.jar"/>
        <fileset dir="${upload.lib}" includes="*.jar"/>
        <fileset dir="${xstream.lib}" includes="*.jar"/>
        <fileset dir="${junit.lib}" includes="*.jar"/>
        <fileset dir="${web.lib}" includes="*.jar"/>
        <fileset dir="${slf4j.lib}" includes="*.jar"/>
        <fileset dir="${axis2.lib}" includes="*.jar"/>
        <fileset dir="${velocity.lib}" includes="*.jar"/>
        <fileset dir="${batik.lib}" includes="*.jar"/>
        <fileset dir="${ical.lib}" includes="*.jar"/>
        <fileset dir="${java2swf.lib}" includes="*.jar"/>
        <fileset dir="${jmf.lib}" includes="*.jar"/>
    	<fileset dir="${junit.lib}" includes="*.jar"/>
    </path>
	
	<!-- screenshare classpath -->
	<path id="screenshare.classpath">
        <fileset dir="${screenshare.lib}" includes="*.jar"/>
    </path>

    <!-- build webapp -->

    <target name="dist" description="binary distribution of OpenMeetings"
        depends="jar, signWebStartJars">
        
    </target>
	
    <!-- Compile JAR -->
    <target name="jar" description="Make Archive" depends="compile">
        <tstamp prefix="build">
            <format property="TODAY" pattern="d-MMMM-yyyy" locale="en"/>
        </tstamp>
    	<manifestclasspath property="jar2.classpath" jarfile="${project.distname}.jar">
            <classpath refid="screenshare.classpath"/>
        </manifestclasspath>
    	<!-- Screen Share -->
        <jar destfile="${dist.dir}/red5/webapps/${project.distname}/red5-screenshare/red5-screenshare.jar">
            <fileset dir="${screen.out.dir}">
                <include name="**/**"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="OpenMeetings - http://openmeetings.googlecode.com"/>
                <attribute name="Built-On" value="${build.TODAY}"/>
                <attribute name="Class-Path" value="conf/ ${jar2.classpath}"/>
            </manifest>
        </jar>
        
    </target>
    
    <target name="signWebStartJars">
        <delete file="filetest.keystore" />
        <genkey alias="filetest"
          storepass="secret"
          keystore="filetest.keystore"
          verbose="true">
            <dname>
                <param name="CN" value="Sebastian Wagner"/>
                <param name="OU" value="technology"/>
                <param name="O"  value="openmeetings.googlecode.com"/>
                <param name="C"  value="DE"/>
            </dname>
        </genkey>       
        <signjar
            alias="filetest" keystore="filetest.keystore"
            storepass="secret"
            lazy="false"
            >
          <path>
          	<fileset dir="${dist.dir}/red5/webapps/${project.distname}/red5-screenshare" >
                 <include name="**/*.jar" />
                
            </fileset>
          </path>
        </signjar>  
    </target>
	
    <!-- Normal build of application
    compiler="org.eclipse.jdt.core.JDTCompilerAdapter" -->
    <target name="compile">
    	<echo message="Compile screen share to ${screen.out.dir}"></echo>
    	<!-- compile screen share -->
    	<javac debug="on" debuglevel="lines,vars,source" srcdir="${screen.src.dir}" destdir="${screen.out.dir}" >
            <classpath refid="screenshare.classpath"/>
        </javac>
    </target>
	
	<target name="doStartServer" depends="compile">
	    <junit>
	    	<classpath refid="compile.classpath"/>
	    	<formatter type="plain"/>

	    	   <test name="org.openmeetings.server.TestSocket" />
	    </junit>
	</target>
	
	<target name="hudson" depends="dist">
		<mkdir dir="${build.target}${build.number.hudson}"/>
		<zip destfile="${build.target}${build.number.hudson}/openmeetings_r${build.svn.hudson}.zip"
		       basedir="${dist.dir}/red5" />
	</target>

    <!-- Build of junit tests
    compiler="org.eclipse.jdt.core.JDTCompilerAdapter"
     -->
    <target name="compileTest" depends="compile">
        <javac debug="on" srcdir="${test.src.dir}" destdir="${main.out.dir}" >
            <classpath refid="compile.classpath"/>
        </javac>
    </target>

    <!-- Remove classes directory for clean build -->
    <target name="clean" depends="cleanForBinary" 
        description="Prepare for clean build">
    	<delete dir="${main.out.dir}"/>
    	<delete dir="${dist.dir}"/>
        <!--mkdir dir="${main.out.dir}"/-->
    </target>
    
    <target name="cleanForBinary" description="Clean For Binary">
        <delete dir="${dist.dir}"/>
    	<delete dir="${screen.out.dir}"/>
        <delete dir="${main.out.dir}"/>
        <delete file="filetest.keystore" />
    </target>


</project>